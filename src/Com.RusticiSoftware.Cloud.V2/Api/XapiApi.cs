/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXapiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an xAPI statement pipe.
        /// </summary>
        /// <remarks>
        /// Create an xAPI statement pipe.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateStatementPipe (XapiStatementPipePostSchema xapiStatementPipe);

        /// <summary>
        /// Create an xAPI statement pipe.
        /// </summary>
        /// <remarks>
        /// Create an xAPI statement pipe.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateStatementPipeWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe);
        /// <summary>
        /// Create a xAPI credential.
        /// </summary>
        /// <remarks>
        /// Create a xAPI credential.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateXapiCredential (XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Create a xAPI credential.
        /// </summary>
        /// <remarks>
        /// Create a xAPI credential.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateXapiCredentialWithHttpInfo (XapiCredentialPostSchema xapiCredential);
        /// <summary>
        /// Deletes this xAPI pipe.
        /// </summary>
        /// <remarks>
        /// Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns></returns>
        void DeleteStatementPipe (string statementPipeId);

        /// <summary>
        /// Deletes this xAPI pipe.
        /// </summary>
        /// <remarks>
        /// Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStatementPipeWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns></returns>
        void DeleteXapiCredential (string xapiCredentialId);

        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteXapiCredentialWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <remarks>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>XapiStatementPipeSchema</returns>
        XapiStatementPipeSchema GetStatementPipe (string statementPipeId);

        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <remarks>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>ApiResponse of XapiStatementPipeSchema</returns>
        ApiResponse<XapiStatementPipeSchema> GetStatementPipeWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>XapiStatementPipeListSchema</returns>
        XapiStatementPipeListSchema GetStatementPipes ();

        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of XapiStatementPipeListSchema</returns>
        ApiResponse<XapiStatementPipeListSchema> GetStatementPipesWithHttpInfo ();
        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <remarks>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>XapiCredentialSchema</returns>
        XapiCredentialSchema GetXapiCredential (string xapiCredentialId);

        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <remarks>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>ApiResponse of XapiCredentialSchema</returns>
        ApiResponse<XapiCredentialSchema> GetXapiCredentialWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Get the list of xapiCredentials
        /// </summary>
        /// <remarks>
        /// Get the list of xapiCredentials
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiCredentialsListSchema</returns>
        XapiCredentialsListSchema GetXapiCredentials (DateTime? since = null, string more = null);

        /// <summary>
        /// Get the list of xapiCredentials
        /// </summary>
        /// <remarks>
        /// Get the list of xapiCredentials
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiCredentialsListSchema</returns>
        ApiResponse<XapiCredentialsListSchema> GetXapiCredentialsWithHttpInfo (DateTime? since = null, string more = null);
        /// <summary>
        /// Edit an existing xAPI pipe or create a new one.
        /// </summary>
        /// <remarks>
        /// Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema SetStatementPipe (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);

        /// <summary>
        /// Edit an existing xAPI pipe or create a new one.
        /// </summary>
        /// <remarks>
        /// Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> SetStatementPipeWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);
        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns></returns>
        void SetXapiCredential (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetXapiCredentialWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an xAPI statement pipe.
        /// </summary>
        /// <remarks>
        /// Create an xAPI statement pipe.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateStatementPipeAsync (XapiStatementPipePostSchema xapiStatementPipe);

        /// <summary>
        /// Create an xAPI statement pipe.
        /// </summary>
        /// <remarks>
        /// Create an xAPI statement pipe.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateStatementPipeAsyncWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe);
        /// <summary>
        /// Create a xAPI credential.
        /// </summary>
        /// <remarks>
        /// Create a xAPI credential.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateXapiCredentialAsync (XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Create a xAPI credential.
        /// </summary>
        /// <remarks>
        /// Create a xAPI credential.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateXapiCredentialAsyncWithHttpInfo (XapiCredentialPostSchema xapiCredential);
        /// <summary>
        /// Deletes this xAPI pipe.
        /// </summary>
        /// <remarks>
        /// Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStatementPipeAsync (string statementPipeId);

        /// <summary>
        /// Deletes this xAPI pipe.
        /// </summary>
        /// <remarks>
        /// Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStatementPipeAsyncWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteXapiCredentialAsync (string xapiCredentialId);

        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Deletes the xAPI credentials specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteXapiCredentialAsyncWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <remarks>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of XapiStatementPipeSchema</returns>
        System.Threading.Tasks.Task<XapiStatementPipeSchema> GetStatementPipeAsync (string statementPipeId);

        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <remarks>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of ApiResponse (XapiStatementPipeSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeSchema>> GetStatementPipeAsyncWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of XapiStatementPipeListSchema</returns>
        System.Threading.Tasks.Task<XapiStatementPipeListSchema> GetStatementPipesAsync ();

        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// Get all of the xapiPipes for &#x60;appId&#x60;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (XapiStatementPipeListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeListSchema>> GetStatementPipesAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <remarks>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of XapiCredentialSchema</returns>
        System.Threading.Tasks.Task<XapiCredentialSchema> GetXapiCredentialAsync (string xapiCredentialId);

        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <remarks>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of ApiResponse (XapiCredentialSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiCredentialSchema>> GetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Get the list of xapiCredentials
        /// </summary>
        /// <remarks>
        /// Get the list of xapiCredentials
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiCredentialsListSchema</returns>
        System.Threading.Tasks.Task<XapiCredentialsListSchema> GetXapiCredentialsAsync (DateTime? since = null, string more = null);

        /// <summary>
        /// Get the list of xapiCredentials
        /// </summary>
        /// <remarks>
        /// Get the list of xapiCredentials
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiCredentialsListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiCredentialsListSchema>> GetXapiCredentialsAsyncWithHttpInfo (DateTime? since = null, string more = null);
        /// <summary>
        /// Edit an existing xAPI pipe or create a new one.
        /// </summary>
        /// <remarks>
        /// Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> SetStatementPipeAsync (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);

        /// <summary>
        /// Edit an existing xAPI pipe or create a new one.
        /// </summary>
        /// <remarks>
        /// Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> SetStatementPipeAsyncWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);
        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetXapiCredentialAsync (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <remarks>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class XapiApi : IXapiApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="XapiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public XapiApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XapiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public XapiApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an xAPI statement pipe. Create an xAPI statement pipe.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateStatementPipe (XapiStatementPipePostSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateStatementPipeWithHttpInfo(xapiStatementPipe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an xAPI statement pipe. Create an xAPI statement pipe.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateStatementPipeWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe)
        {
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->CreateStatementPipe");

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create an xAPI statement pipe. Create an xAPI statement pipe.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateStatementPipeAsync (XapiStatementPipePostSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateStatementPipeAsyncWithHttpInfo(xapiStatementPipe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an xAPI statement pipe. Create an xAPI statement pipe.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateStatementPipeAsyncWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe)
        {
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->CreateStatementPipe");

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a xAPI credential. Create a xAPI credential.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateXapiCredential (XapiCredentialPostSchema xapiCredential)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateXapiCredentialWithHttpInfo(xapiCredential);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a xAPI credential. Create a xAPI credential.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateXapiCredentialWithHttpInfo (XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->CreateXapiCredential");

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a xAPI credential. Create a xAPI credential.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateXapiCredentialAsync (XapiCredentialPostSchema xapiCredential)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateXapiCredentialAsyncWithHttpInfo(xapiCredential);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a xAPI credential. Create a xAPI credential.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateXapiCredentialAsyncWithHttpInfo (XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->CreateXapiCredential");

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Deletes this xAPI pipe. Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns></returns>
        public void DeleteStatementPipe (string statementPipeId)
        {
             DeleteStatementPipeWithHttpInfo(statementPipeId);
        }

        /// <summary>
        /// Deletes this xAPI pipe. Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStatementPipeWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->DeleteStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes this xAPI pipe. Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStatementPipeAsync (string statementPipeId)
        {
             await DeleteStatementPipeAsyncWithHttpInfo(statementPipeId);

        }

        /// <summary>
        /// Deletes this xAPI pipe. Caution: avoid re-creating a pipe with the same ID quickly after a delete. The old version could still be processing, in which case the new pipe could be updated improperly by the processor. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStatementPipeAsyncWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->DeleteStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns></returns>
        public void DeleteXapiCredential (string xapiCredentialId)
        {
             DeleteXapiCredentialWithHttpInfo(xapiCredentialId);
        }

        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteXapiCredentialWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->DeleteXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteXapiCredentialAsync (string xapiCredentialId)
        {
             await DeleteXapiCredentialAsyncWithHttpInfo(xapiCredentialId);

        }

        /// <summary>
        /// Deletes the xAPI credentials specified by the xAPI credentials id Deletes the xAPI credentials specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteXapiCredentialAsyncWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->DeleteXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60; Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>XapiStatementPipeSchema</returns>
        public XapiStatementPipeSchema GetStatementPipe (string statementPipeId)
        {
             ApiResponse<XapiStatementPipeSchema> localVarResponse = GetStatementPipeWithHttpInfo(statementPipeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60; Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>ApiResponse of XapiStatementPipeSchema</returns>
        public ApiResponse< XapiStatementPipeSchema > GetStatementPipeWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->GetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeSchema)));
        }

        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60; Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of XapiStatementPipeSchema</returns>
        public async System.Threading.Tasks.Task<XapiStatementPipeSchema> GetStatementPipeAsync (string statementPipeId)
        {
             ApiResponse<XapiStatementPipeSchema> localVarResponse = await GetStatementPipeAsyncWithHttpInfo(statementPipeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves xAPI pipe for &#x60;xapiPipeId&#x60; Retrieves xAPI pipe for &#x60;xapiPipeId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <returns>Task of ApiResponse (XapiStatementPipeSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeSchema>> GetStatementPipeAsyncWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->GetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeSchema)));
        }

        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60; Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>XapiStatementPipeListSchema</returns>
        public XapiStatementPipeListSchema GetStatementPipes ()
        {
             ApiResponse<XapiStatementPipeListSchema> localVarResponse = GetStatementPipesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60; Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of XapiStatementPipeListSchema</returns>
        public ApiResponse< XapiStatementPipeListSchema > GetStatementPipesWithHttpInfo ()
        {

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeListSchema)));
        }

        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60; Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of XapiStatementPipeListSchema</returns>
        public async System.Threading.Tasks.Task<XapiStatementPipeListSchema> GetStatementPipesAsync ()
        {
             ApiResponse<XapiStatementPipeListSchema> localVarResponse = await GetStatementPipesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all of the xapiPipes for &#x60;appId&#x60; Get all of the xapiPipes for &#x60;appId&#x60;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (XapiStatementPipeListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeListSchema>> GetStatementPipesAsyncWithHttpInfo ()
        {

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeListSchema)));
        }

        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id. Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>XapiCredentialSchema</returns>
        public XapiCredentialSchema GetXapiCredential (string xapiCredentialId)
        {
             ApiResponse<XapiCredentialSchema> localVarResponse = GetXapiCredentialWithHttpInfo(xapiCredentialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id. Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>ApiResponse of XapiCredentialSchema</returns>
        public ApiResponse< XapiCredentialSchema > GetXapiCredentialWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->GetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialSchema)));
        }

        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id. Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of XapiCredentialSchema</returns>
        public async System.Threading.Tasks.Task<XapiCredentialSchema> GetXapiCredentialAsync (string xapiCredentialId)
        {
             ApiResponse<XapiCredentialSchema> localVarResponse = await GetXapiCredentialAsyncWithHttpInfo(xapiCredentialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the xAPI credentials specified by the xAPI credentials id. Retrieves the xAPI credentials specified by the xAPI credentials id.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <returns>Task of ApiResponse (XapiCredentialSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiCredentialSchema>> GetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->GetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialSchema)));
        }

        /// <summary>
        /// Get the list of xapiCredentials Get the list of xapiCredentials
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiCredentialsListSchema</returns>
        public XapiCredentialsListSchema GetXapiCredentials (DateTime? since = null, string more = null)
        {
             ApiResponse<XapiCredentialsListSchema> localVarResponse = GetXapiCredentialsWithHttpInfo(since, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of xapiCredentials Get the list of xapiCredentials
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiCredentialsListSchema</returns>
        public ApiResponse< XapiCredentialsListSchema > GetXapiCredentialsWithHttpInfo (DateTime? since = null, string more = null)
        {

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialsListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialsListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialsListSchema)));
        }

        /// <summary>
        /// Get the list of xapiCredentials Get the list of xapiCredentials
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiCredentialsListSchema</returns>
        public async System.Threading.Tasks.Task<XapiCredentialsListSchema> GetXapiCredentialsAsync (DateTime? since = null, string more = null)
        {
             ApiResponse<XapiCredentialsListSchema> localVarResponse = await GetXapiCredentialsAsyncWithHttpInfo(since, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of xapiCredentials Get the list of xapiCredentials
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Only &lt;&lt;resourcePathName&gt;&gt; updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of &lt;&lt;resourcePathName&gt;&gt; lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiCredentialsListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiCredentialsListSchema>> GetXapiCredentialsAsyncWithHttpInfo (DateTime? since = null, string more = null)
        {

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialsListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialsListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialsListSchema)));
        }

        /// <summary>
        /// Edit an existing xAPI pipe or create a new one. Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema SetStatementPipe (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = SetStatementPipeWithHttpInfo(statementPipeId, xapiStatementPipe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing xAPI pipe or create a new one. Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > SetStatementPipeWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->SetStatementPipe");
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->SetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter
            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Edit an existing xAPI pipe or create a new one. Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> SetStatementPipeAsync (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = await SetStatementPipeAsyncWithHttpInfo(statementPipeId, xapiStatementPipe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing xAPI pipe or create a new one. Editing a pipe will cause it to start over and forward any statements it finds, even if the prior version of the pipe had already forwarded those statements. If the pipe being edited is currently being processed, the this request will fail with a status code of 409. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId">id for this xAPI statement pipe</param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> SetStatementPipeAsyncWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->SetStatementPipe");
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->SetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter
            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns></returns>
        public void SetXapiCredential (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
             SetXapiCredentialWithHttpInfo(xapiCredentialId, xapiCredential);
        }

        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetXapiCredentialWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->SetXapiCredential");
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->SetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter
            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetXapiCredentialAsync (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
             await SetXapiCredentialAsyncWithHttpInfo(xapiCredentialId, xapiCredential);

        }

        /// <summary>
        /// Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id Edit an existing xAPI credential or create a new one, specified by the xAPI credentials id
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId">id for this xAPI credential</param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->SetXapiCredential");
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->SetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter
            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
