/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXapiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateStatementPipe (XapiStatementPipePostSchema xapiStatementPipe);

        /// <summary>
        /// Create an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateStatementPipeWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe);
        /// <summary>
        /// Create xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateXapiCredential (XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Create xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateXapiCredentialWithHttpInfo (XapiCredentialPostSchema xapiCredential);
        /// <summary>
        /// Delete an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns></returns>
        void DeleteStatementPipe (string statementPipeId);

        /// <summary>
        /// Delete an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStatementPipeWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Delete xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns></returns>
        void DeleteXapiCredential (string xapiCredentialId);

        /// <summary>
        /// Delete xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteXapiCredentialWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>XapiStatementPipeSchema</returns>
        XapiStatementPipeSchema GetStatementPipe (string statementPipeId);

        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>ApiResponse of XapiStatementPipeSchema</returns>
        ApiResponse<XapiStatementPipeSchema> GetStatementPipeWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Get a list of xAPI Statement Pipes 
        /// </summary>
        /// <remarks>
        /// Returns a list of all xAPI statement pipes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>XapiStatementPipeListSchema</returns>
        XapiStatementPipeListSchema GetStatementPipes ();

        /// <summary>
        /// Get a list of xAPI Statement Pipes 
        /// </summary>
        /// <remarks>
        /// Returns a list of all xAPI statement pipes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of XapiStatementPipeListSchema</returns>
        ApiResponse<XapiStatementPipeListSchema> GetStatementPipesWithHttpInfo ();
        /// <summary>
        /// Get detailed information about the xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>XapiCredentialSchema</returns>
        XapiCredentialSchema GetXapiCredential (string xapiCredentialId);

        /// <summary>
        /// Get detailed information about the xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>ApiResponse of XapiCredentialSchema</returns>
        ApiResponse<XapiCredentialSchema> GetXapiCredentialWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Get a list of xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>XapiCredentialsListSchema</returns>
        XapiCredentialsListSchema GetXapiCredentials (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null);

        /// <summary>
        /// Get a list of xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>ApiResponse of XapiCredentialsListSchema</returns>
        ApiResponse<XapiCredentialsListSchema> GetXapiCredentialsWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null);
        /// <summary>
        /// Create or update an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema SetStatementPipe (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);

        /// <summary>
        /// Create or update an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> SetStatementPipeWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);
        /// <summary>
        /// Create or update xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns></returns>
        void SetXapiCredential (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Create or update xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetXapiCredentialWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateStatementPipeAsync (XapiStatementPipePostSchema xapiStatementPipe);

        /// <summary>
        /// Create an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateStatementPipeAsyncWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe);
        /// <summary>
        /// Create xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateXapiCredentialAsync (XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Create xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateXapiCredentialAsyncWithHttpInfo (XapiCredentialPostSchema xapiCredential);
        /// <summary>
        /// Delete an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStatementPipeAsync (string statementPipeId);

        /// <summary>
        /// Delete an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStatementPipeAsyncWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Delete xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteXapiCredentialAsync (string xapiCredentialId);

        /// <summary>
        /// Delete xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Deletes the specified xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteXapiCredentialAsyncWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of XapiStatementPipeSchema</returns>
        System.Threading.Tasks.Task<XapiStatementPipeSchema> GetStatementPipeAsync (string statementPipeId);

        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of ApiResponse (XapiStatementPipeSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeSchema>> GetStatementPipeAsyncWithHttpInfo (string statementPipeId);
        /// <summary>
        /// Get a list of xAPI Statement Pipes 
        /// </summary>
        /// <remarks>
        /// Returns a list of all xAPI statement pipes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of XapiStatementPipeListSchema</returns>
        System.Threading.Tasks.Task<XapiStatementPipeListSchema> GetStatementPipesAsync ();

        /// <summary>
        /// Get a list of xAPI Statement Pipes 
        /// </summary>
        /// <remarks>
        /// Returns a list of all xAPI statement pipes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (XapiStatementPipeListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeListSchema>> GetStatementPipesAsyncWithHttpInfo ();
        /// <summary>
        /// Get detailed information about the xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of XapiCredentialSchema</returns>
        System.Threading.Tasks.Task<XapiCredentialSchema> GetXapiCredentialAsync (string xapiCredentialId);

        /// <summary>
        /// Get detailed information about the xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of ApiResponse (XapiCredentialSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiCredentialSchema>> GetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId);
        /// <summary>
        /// Get a list of xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of XapiCredentialsListSchema</returns>
        System.Threading.Tasks.Task<XapiCredentialsListSchema> GetXapiCredentialsAsync (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null);

        /// <summary>
        /// Get a list of xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (XapiCredentialsListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiCredentialsListSchema>> GetXapiCredentialsAsyncWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null);
        /// <summary>
        /// Create or update an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> SetStatementPipeAsync (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);

        /// <summary>
        /// Create or update an xAPI Statement Pipe 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> SetStatementPipeAsyncWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe);
        /// <summary>
        /// Create or update xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetXapiCredentialAsync (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);

        /// <summary>
        /// Create or update xAPI Credentials 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the xAPI credentials. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class XapiApi : IXapiApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="XapiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public XapiApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XapiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public XapiApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an xAPI Statement Pipe  Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateStatementPipe (XapiStatementPipePostSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateStatementPipeWithHttpInfo(xapiStatementPipe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an xAPI Statement Pipe  Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateStatementPipeWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe)
        {
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->CreateStatementPipe");

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create an xAPI Statement Pipe  Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateStatementPipeAsync (XapiStatementPipePostSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateStatementPipeAsyncWithHttpInfo(xapiStatementPipe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an xAPI Statement Pipe  Creates an xAPI statement pipe.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateStatementPipeAsyncWithHttpInfo (XapiStatementPipePostSchema xapiStatementPipe)
        {
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->CreateStatementPipe");

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create xAPI Credentials  Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateXapiCredential (XapiCredentialPostSchema xapiCredential)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateXapiCredentialWithHttpInfo(xapiCredential);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create xAPI Credentials  Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateXapiCredentialWithHttpInfo (XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->CreateXapiCredential");

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create xAPI Credentials  Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateXapiCredentialAsync (XapiCredentialPostSchema xapiCredential)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateXapiCredentialAsyncWithHttpInfo(xapiCredential);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create xAPI Credentials  Creates an xAPI credential combination from the provided secret and a generated ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateXapiCredentialAsyncWithHttpInfo (XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->CreateXapiCredential");

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Delete an xAPI Statement Pipe  Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns></returns>
        public void DeleteStatementPipe (string statementPipeId)
        {
             DeleteStatementPipeWithHttpInfo(statementPipeId);
        }

        /// <summary>
        /// Delete an xAPI Statement Pipe  Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStatementPipeWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->DeleteStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an xAPI Statement Pipe  Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStatementPipeAsync (string statementPipeId)
        {
             await DeleteStatementPipeAsyncWithHttpInfo(statementPipeId);

        }

        /// <summary>
        /// Delete an xAPI Statement Pipe  Deletes the specified xAPI statement pipe  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion takes place.  Recreating a statement pipe with the same ID too quickly could cause the statement pipe to end up in a faulty state. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStatementPipeAsyncWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->DeleteStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete xAPI Credentials  Deletes the specified xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns></returns>
        public void DeleteXapiCredential (string xapiCredentialId)
        {
             DeleteXapiCredentialWithHttpInfo(xapiCredentialId);
        }

        /// <summary>
        /// Delete xAPI Credentials  Deletes the specified xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteXapiCredentialWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->DeleteXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete xAPI Credentials  Deletes the specified xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteXapiCredentialAsync (string xapiCredentialId)
        {
             await DeleteXapiCredentialAsyncWithHttpInfo(xapiCredentialId);

        }

        /// <summary>
        /// Delete xAPI Credentials  Deletes the specified xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteXapiCredentialAsyncWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->DeleteXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe  Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>XapiStatementPipeSchema</returns>
        public XapiStatementPipeSchema GetStatementPipe (string statementPipeId)
        {
             ApiResponse<XapiStatementPipeSchema> localVarResponse = GetStatementPipeWithHttpInfo(statementPipeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe  Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>ApiResponse of XapiStatementPipeSchema</returns>
        public ApiResponse< XapiStatementPipeSchema > GetStatementPipeWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->GetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeSchema)));
        }

        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe  Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of XapiStatementPipeSchema</returns>
        public async System.Threading.Tasks.Task<XapiStatementPipeSchema> GetStatementPipeAsync (string statementPipeId)
        {
             ApiResponse<XapiStatementPipeSchema> localVarResponse = await GetStatementPipeAsyncWithHttpInfo(statementPipeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about an xAPI Statement Pipe  Returns detailed information about the xAPI pipe.  This includes source and target urls, the last time a statement was successfully forwarded, and how many attempts have been made to send data to the target url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <returns>Task of ApiResponse (XapiStatementPipeSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeSchema>> GetStatementPipeAsyncWithHttpInfo (string statementPipeId)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->GetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeSchema)));
        }

        /// <summary>
        /// Get a list of xAPI Statement Pipes  Returns a list of all xAPI statement pipes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>XapiStatementPipeListSchema</returns>
        public XapiStatementPipeListSchema GetStatementPipes ()
        {
             ApiResponse<XapiStatementPipeListSchema> localVarResponse = GetStatementPipesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of xAPI Statement Pipes  Returns a list of all xAPI statement pipes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of XapiStatementPipeListSchema</returns>
        public ApiResponse< XapiStatementPipeListSchema > GetStatementPipesWithHttpInfo ()
        {

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeListSchema)));
        }

        /// <summary>
        /// Get a list of xAPI Statement Pipes  Returns a list of all xAPI statement pipes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of XapiStatementPipeListSchema</returns>
        public async System.Threading.Tasks.Task<XapiStatementPipeListSchema> GetStatementPipesAsync ()
        {
             ApiResponse<XapiStatementPipeListSchema> localVarResponse = await GetStatementPipesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of xAPI Statement Pipes  Returns a list of all xAPI statement pipes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (XapiStatementPipeListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementPipeListSchema>> GetStatementPipesAsyncWithHttpInfo ()
        {

            var localVarPath = "/xapi/statementPipes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatementPipes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementPipeListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementPipeListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementPipeListSchema)));
        }

        /// <summary>
        /// Get detailed information about the xAPI Credentials  Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>XapiCredentialSchema</returns>
        public XapiCredentialSchema GetXapiCredential (string xapiCredentialId)
        {
             ApiResponse<XapiCredentialSchema> localVarResponse = GetXapiCredentialWithHttpInfo(xapiCredentialId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about the xAPI Credentials  Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>ApiResponse of XapiCredentialSchema</returns>
        public ApiResponse< XapiCredentialSchema > GetXapiCredentialWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->GetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialSchema)));
        }

        /// <summary>
        /// Get detailed information about the xAPI Credentials  Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of XapiCredentialSchema</returns>
        public async System.Threading.Tasks.Task<XapiCredentialSchema> GetXapiCredentialAsync (string xapiCredentialId)
        {
             ApiResponse<XapiCredentialSchema> localVarResponse = await GetXapiCredentialAsyncWithHttpInfo(xapiCredentialId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about the xAPI Credentials  Returns detailed information about the xAPI credentials.  This includes the id (username), secret (password), permissions, and whether or not the credentials are enabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <returns>Task of ApiResponse (XapiCredentialSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiCredentialSchema>> GetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->GetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialSchema)));
        }

        /// <summary>
        /// Get a list of xAPI Credentials  Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>XapiCredentialsListSchema</returns>
        public XapiCredentialsListSchema GetXapiCredentials (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null)
        {
             ApiResponse<XapiCredentialsListSchema> localVarResponse = GetXapiCredentialsWithHttpInfo(since, until, datetimeFilter, filter, filterBy, orderBy, more, includeTotalCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of xAPI Credentials  Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>ApiResponse of XapiCredentialsListSchema</returns>
        public ApiResponse< XapiCredentialsListSchema > GetXapiCredentialsWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null)
        {

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeTotalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTotalCount", includeTotalCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialsListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialsListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialsListSchema)));
        }

        /// <summary>
        /// Get a list of xAPI Credentials  Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of XapiCredentialsListSchema</returns>
        public async System.Threading.Tasks.Task<XapiCredentialsListSchema> GetXapiCredentialsAsync (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null)
        {
             ApiResponse<XapiCredentialsListSchema> localVarResponse = await GetXapiCredentialsAsyncWithHttpInfo(since, until, datetimeFilter, filter, filterBy, orderBy, more, includeTotalCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of xAPI Credentials  Returns a list of xAPI credentials.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to credential_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (XapiCredentialsListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiCredentialsListSchema>> GetXapiCredentialsAsyncWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeTotalCount = null)
        {

            var localVarPath = "/xapi/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeTotalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTotalCount", includeTotalCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetXapiCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiCredentialsListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiCredentialsListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiCredentialsListSchema)));
        }

        /// <summary>
        /// Create or update an xAPI Statement Pipe  Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema SetStatementPipe (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = SetStatementPipeWithHttpInfo(statementPipeId, xapiStatementPipe);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update an xAPI Statement Pipe  Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > SetStatementPipeWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->SetStatementPipe");
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->SetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter
            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create or update an xAPI Statement Pipe  Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> SetStatementPipeAsync (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
             ApiResponse<StringResultSchema> localVarResponse = await SetStatementPipeAsyncWithHttpInfo(statementPipeId, xapiStatementPipe);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update an xAPI Statement Pipe  Creates or updates information about the xAPI statement pipe.  - If the xAPI statement pipe is instead being updated, the pipe will start over and forward any statements it finds, even if it had already forwarded those statements.  If the pipe being edited is currently being processed, then this request will fail with a status code of 409.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the creation of the xAPI statement pipe takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statementPipeId"></param>
        /// <param name="xapiStatementPipe"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> SetStatementPipeAsyncWithHttpInfo (string statementPipeId, XapiStatementPipePutSchema xapiStatementPipe)
        {
            // verify the required parameter 'statementPipeId' is set
            if (statementPipeId == null)
                throw new ApiException(400, "Missing required parameter 'statementPipeId' when calling XapiApi->SetStatementPipe");
            // verify the required parameter 'xapiStatementPipe' is set
            if (xapiStatementPipe == null)
                throw new ApiException(400, "Missing required parameter 'xapiStatementPipe' when calling XapiApi->SetStatementPipe");

            var localVarPath = "/xapi/statementPipes/{statementPipeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statementPipeId != null) localVarPathParams.Add("statementPipeId", this.Configuration.ApiClient.ParameterToString(statementPipeId)); // path parameter
            if (xapiStatementPipe != null && xapiStatementPipe.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiStatementPipe); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiStatementPipe; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStatementPipe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create or update xAPI Credentials  Creates or updates information about the xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns></returns>
        public void SetXapiCredential (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
             SetXapiCredentialWithHttpInfo(xapiCredentialId, xapiCredential);
        }

        /// <summary>
        /// Create or update xAPI Credentials  Creates or updates information about the xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetXapiCredentialWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->SetXapiCredential");
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->SetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter
            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or update xAPI Credentials  Creates or updates information about the xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetXapiCredentialAsync (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
             await SetXapiCredentialAsyncWithHttpInfo(xapiCredentialId, xapiCredential);

        }

        /// <summary>
        /// Create or update xAPI Credentials  Creates or updates information about the xAPI credentials. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xapiCredentialId"></param>
        /// <param name="xapiCredential"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetXapiCredentialAsyncWithHttpInfo (string xapiCredentialId, XapiCredentialPostSchema xapiCredential)
        {
            // verify the required parameter 'xapiCredentialId' is set
            if (xapiCredentialId == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredentialId' when calling XapiApi->SetXapiCredential");
            // verify the required parameter 'xapiCredential' is set
            if (xapiCredential == null)
                throw new ApiException(400, "Missing required parameter 'xapiCredential' when calling XapiApi->SetXapiCredential");

            var localVarPath = "/xapi/credentials/{xapiCredentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xapiCredentialId != null) localVarPathParams.Add("xapiCredentialId", this.Configuration.ApiClient.ParameterToString(xapiCredentialId)); // path parameter
            if (xapiCredential != null && xapiCredential.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xapiCredential); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xapiCredential; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetXapiCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
