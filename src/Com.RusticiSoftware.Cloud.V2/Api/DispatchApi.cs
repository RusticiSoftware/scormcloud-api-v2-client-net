/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDispatchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns></returns>
        void CreateDestinations (DestinationListSchema destinationsList);

        /// <summary>
        /// Create a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateDestinationsWithHttpInfo (DestinationListSchema destinationsList);
        /// <summary>
        /// Create a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns></returns>
        void CreateDispatches (CreateDispatchListSchema dispatchList);

        /// <summary>
        /// Create a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateDispatchesWithHttpInfo (CreateDispatchListSchema dispatchList);
        /// <summary>
        /// Delete a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns></returns>
        void DeleteDestination (string destinationId);

        /// <summary>
        /// Delete a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDestinationWithHttpInfo (string destinationId);
        /// <summary>
        /// Delete a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns></returns>
        void DeleteDestinationDispatches (string destinationId);

        /// <summary>
        /// Delete a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDestinationDispatchesWithHttpInfo (string destinationId);
        /// <summary>
        /// Delete tags from a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteDestinationTags (string destinationId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDestinationTagsWithHttpInfo (string destinationId, TagListSchema tags);
        /// <summary>
        /// Delete a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns></returns>
        void DeleteDispatch (string dispatchId);

        /// <summary>
        /// Delete a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDispatchWithHttpInfo (string dispatchId);
        /// <summary>
        /// Delete postback information from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns></returns>
        void DeleteDispatchPostbackInfo (string dispatchId);

        /// <summary>
        /// Delete postback information from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDispatchPostbackInfoWithHttpInfo (string dispatchId);
        /// <summary>
        /// Delete tags from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteDispatchTags (string dispatchId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDispatchTagsWithHttpInfo (string dispatchId, TagListSchema tags);
        /// <summary>
        /// Delete a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns></returns>
        void DeleteDispatches (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);

        /// <summary>
        /// Delete a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDispatchesWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);
        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        void EnableRegistrationInstancing (string destinationId, EnabledSchema enabled);

        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnableRegistrationInstancingWithHttpInfo (string destinationId, EnabledSchema enabled);
        /// <summary>
        /// Get detailed information about a Destination 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>DestinationSchema</returns>
        DestinationSchema GetDestination (string destinationId);

        /// <summary>
        /// Get detailed information about a Destination 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of DestinationSchema</returns>
        ApiResponse<DestinationSchema> GetDestinationWithHttpInfo (string destinationId);
        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>IntegerResultSchema</returns>
        IntegerResultSchema GetDestinationDispatchRegistrationCount (string destinationId);

        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of IntegerResultSchema</returns>
        ApiResponse<IntegerResultSchema> GetDestinationDispatchRegistrationCountWithHttpInfo (string destinationId);
        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDestinationDispatchZip (string destinationId, string type = null, string cssUrl = null, List<string> tags = null);

        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDestinationDispatchZipWithHttpInfo (string destinationId, string type = null, string cssUrl = null, List<string> tags = null);
        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>DispatchListSchema</returns>
        DispatchListSchema GetDestinationDispatches (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);

        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of DispatchListSchema</returns>
        ApiResponse<DispatchListSchema> GetDestinationDispatchesWithHttpInfo (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);
        /// <summary>
        /// Get user PII hashing status for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>EnabledSchema</returns>
        EnabledSchema GetDestinationHashUserInfo (string destinationId);

        /// <summary>
        /// Get user PII hashing status for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        ApiResponse<EnabledSchema> GetDestinationHashUserInfoWithHttpInfo (string destinationId);
        /// <summary>
        /// Get tags for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetDestinationTags (string destinationId);

        /// <summary>
        /// Get tags for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetDestinationTagsWithHttpInfo (string destinationId);
        /// <summary>
        /// Get a list of Destinations 
        /// </summary>
        /// <remarks>
        /// Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>DestinationListSchema</returns>
        DestinationListSchema GetDestinations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);

        /// <summary>
        /// Get a list of Destinations 
        /// </summary>
        /// <remarks>
        /// Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of DestinationListSchema</returns>
        ApiResponse<DestinationListSchema> GetDestinationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);
        /// <summary>
        /// Get detailed information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>DispatchSchema</returns>
        DispatchSchema GetDispatch (string dispatchId);

        /// <summary>
        /// Get detailed information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of DispatchSchema</returns>
        ApiResponse<DispatchSchema> GetDispatchWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get enabled status of a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>EnabledSchema</returns>
        EnabledSchema GetDispatchEnabled (string dispatchId);

        /// <summary>
        /// Get enabled status of a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        ApiResponse<EnabledSchema> GetDispatchEnabledWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get user PII hashing status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>EnabledSchema</returns>
        EnabledSchema GetDispatchHashUserInfo (string dispatchId);

        /// <summary>
        /// Get user PII hashing status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        ApiResponse<EnabledSchema> GetDispatchHashUserInfoWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>DispatchRegistrationCountSchema</returns>
        DispatchRegistrationCountSchema GetDispatchRegistrationCount (string dispatchId);

        /// <summary>
        /// Get registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of DispatchRegistrationCountSchema</returns>
        ApiResponse<DispatchRegistrationCountSchema> GetDispatchRegistrationCountWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get tags for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetDispatchTags (string dispatchId);

        /// <summary>
        /// Get tags for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetDispatchTagsWithHttpInfo (string dispatchId);
        /// <summary>
        /// Download a zip package for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDispatchZip (string dispatchId, string type = null, string cssUrl = null);

        /// <summary>
        /// Download a zip package for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDispatchZipWithHttpInfo (string dispatchId, string type = null, string cssUrl = null);
        /// <summary>
        /// Get a list of Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>DispatchListSchema</returns>
        DispatchListSchema GetDispatches (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);

        /// <summary>
        /// Get a list of Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of DispatchListSchema</returns>
        ApiResponse<DispatchListSchema> GetDispatchesWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);
        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>DispatchLtiInfoSchema</returns>
        DispatchLtiInfoSchema GetLTIDispatch (string dispatchId);

        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of DispatchLtiInfoSchema</returns>
        ApiResponse<DispatchLtiInfoSchema> GetLTIDispatchWithHttpInfo (string dispatchId);
        /// <summary>
        /// Add tags to a Destination 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutDestinationTags (string destinationId, TagListSchema tags);

        /// <summary>
        /// Add tags to a Destination 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutDestinationTagsWithHttpInfo (string destinationId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        void PutDestinationTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutDestinationTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Add tags to a Dispatch 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutDispatchTags (string dispatchId, TagListSchema tags);

        /// <summary>
        /// Add tags to a Dispatch 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutDispatchTagsWithHttpInfo (string dispatchId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        void PutDispatchTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutDispatchTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns></returns>
        void ResetDestinationDispatchRegistrationCount (string destinationId);

        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetDestinationDispatchRegistrationCountWithHttpInfo (string destinationId);
        /// <summary>
        /// Reset registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns></returns>
        void ResetDispatchRegistrationCount (string dispatchId);

        /// <summary>
        /// Reset registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetDispatchRegistrationCountWithHttpInfo (string dispatchId);
        /// <summary>
        /// Create or update a Destination 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns></returns>
        void SetDestination (string destinationId, DestinationSchema destination);

        /// <summary>
        /// Create or update a Destination 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetDestinationWithHttpInfo (string destinationId, DestinationSchema destination);
        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        void SetDestinationDispatchEnabled (string destinationId, EnabledSchema enabled);

        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetDestinationDispatchEnabledWithHttpInfo (string destinationId, EnabledSchema enabled);
        /// <summary>
        /// Update enabled status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        void SetDispatchEnabled (string dispatchId, EnabledSchema enabled);

        /// <summary>
        /// Update enabled status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetDispatchEnabledWithHttpInfo (string dispatchId, EnabledSchema enabled);
        /// <summary>
        /// Update user PII hashing status for a Destination
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        void UpdateDestinationHashUserInfo (string destinationId, EnabledSchema enabled);

        /// <summary>
        /// Update user PII hashing status for a Destination
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDestinationHashUserInfoWithHttpInfo (string destinationId, EnabledSchema enabled);
        /// <summary>
        /// Update information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns></returns>
        void UpdateDispatch (string dispatchId, UpdateDispatchSchema dispatchProperties);

        /// <summary>
        /// Update information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDispatchWithHttpInfo (string dispatchId, UpdateDispatchSchema dispatchProperties);
        /// <summary>
        /// Update user PII hashing status for a Dispatch
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        void UpdateDispatchHashUserInfo (string dispatchId, EnabledSchema enabled);

        /// <summary>
        /// Update user PII hashing status for a Dispatch
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDispatchHashUserInfoWithHttpInfo (string dispatchId, EnabledSchema enabled);
        /// <summary>
        /// Update a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns></returns>
        void UpdateDispatches (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);

        /// <summary>
        /// Update a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDispatchesWithHttpInfo (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateDestinationsAsync (DestinationListSchema destinationsList);

        /// <summary>
        /// Create a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDestinationsAsyncWithHttpInfo (DestinationListSchema destinationsList);
        /// <summary>
        /// Create a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateDispatchesAsync (CreateDispatchListSchema dispatchList);

        /// <summary>
        /// Create a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateDispatchesAsyncWithHttpInfo (CreateDispatchListSchema dispatchList);
        /// <summary>
        /// Delete a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDestinationAsync (string destinationId);

        /// <summary>
        /// Delete a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDestinationAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Delete a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDestinationDispatchesAsync (string destinationId);

        /// <summary>
        /// Delete a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDestinationDispatchesAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Delete tags from a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDestinationTagsAsync (string destinationId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a Destination 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDestinationTagsAsyncWithHttpInfo (string destinationId, TagListSchema tags);
        /// <summary>
        /// Delete a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDispatchAsync (string dispatchId);

        /// <summary>
        /// Delete a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Delete postback information from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDispatchPostbackInfoAsync (string dispatchId);

        /// <summary>
        /// Delete postback information from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchPostbackInfoAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Delete tags from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDispatchTagsAsync (string dispatchId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a Dispatch 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchTagsAsyncWithHttpInfo (string dispatchId, TagListSchema tags);
        /// <summary>
        /// Delete a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDispatchesAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);

        /// <summary>
        /// Delete a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchesAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);
        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnableRegistrationInstancingAsync (string destinationId, EnabledSchema enabled);

        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableRegistrationInstancingAsyncWithHttpInfo (string destinationId, EnabledSchema enabled);
        /// <summary>
        /// Get detailed information about a Destination 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of DestinationSchema</returns>
        System.Threading.Tasks.Task<DestinationSchema> GetDestinationAsync (string destinationId);

        /// <summary>
        /// Get detailed information about a Destination 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (DestinationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DestinationSchema>> GetDestinationAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of IntegerResultSchema</returns>
        System.Threading.Tasks.Task<IntegerResultSchema> GetDestinationDispatchRegistrationCountAsync (string destinationId);

        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (IntegerResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntegerResultSchema>> GetDestinationDispatchRegistrationCountAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDestinationDispatchZipAsync (string destinationId, string type = null, string cssUrl = null, List<string> tags = null);

        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDestinationDispatchZipAsyncWithHttpInfo (string destinationId, string type = null, string cssUrl = null, List<string> tags = null);
        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of DispatchListSchema</returns>
        System.Threading.Tasks.Task<DispatchListSchema> GetDestinationDispatchesAsync (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);

        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (DispatchListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DispatchListSchema>> GetDestinationDispatchesAsyncWithHttpInfo (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);
        /// <summary>
        /// Get user PII hashing status for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of EnabledSchema</returns>
        System.Threading.Tasks.Task<EnabledSchema> GetDestinationHashUserInfoAsync (string destinationId);

        /// <summary>
        /// Get user PII hashing status for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetDestinationHashUserInfoAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Get tags for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetDestinationTagsAsync (string destinationId);

        /// <summary>
        /// Get tags for a Destination 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetDestinationTagsAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Get a list of Destinations 
        /// </summary>
        /// <remarks>
        /// Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of DestinationListSchema</returns>
        System.Threading.Tasks.Task<DestinationListSchema> GetDestinationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);

        /// <summary>
        /// Get a list of Destinations 
        /// </summary>
        /// <remarks>
        /// Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (DestinationListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DestinationListSchema>> GetDestinationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);
        /// <summary>
        /// Get detailed information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of DispatchSchema</returns>
        System.Threading.Tasks.Task<DispatchSchema> GetDispatchAsync (string dispatchId);

        /// <summary>
        /// Get detailed information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (DispatchSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DispatchSchema>> GetDispatchAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get enabled status of a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of EnabledSchema</returns>
        System.Threading.Tasks.Task<EnabledSchema> GetDispatchEnabledAsync (string dispatchId);

        /// <summary>
        /// Get enabled status of a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetDispatchEnabledAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get user PII hashing status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of EnabledSchema</returns>
        System.Threading.Tasks.Task<EnabledSchema> GetDispatchHashUserInfoAsync (string dispatchId);

        /// <summary>
        /// Get user PII hashing status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetDispatchHashUserInfoAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of DispatchRegistrationCountSchema</returns>
        System.Threading.Tasks.Task<DispatchRegistrationCountSchema> GetDispatchRegistrationCountAsync (string dispatchId);

        /// <summary>
        /// Get registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (DispatchRegistrationCountSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DispatchRegistrationCountSchema>> GetDispatchRegistrationCountAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Get tags for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetDispatchTagsAsync (string dispatchId);

        /// <summary>
        /// Get tags for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the dispatch. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetDispatchTagsAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Download a zip package for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDispatchZipAsync (string dispatchId, string type = null, string cssUrl = null);

        /// <summary>
        /// Download a zip package for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDispatchZipAsyncWithHttpInfo (string dispatchId, string type = null, string cssUrl = null);
        /// <summary>
        /// Get a list of Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of DispatchListSchema</returns>
        System.Threading.Tasks.Task<DispatchListSchema> GetDispatchesAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);

        /// <summary>
        /// Get a list of Dispatches 
        /// </summary>
        /// <remarks>
        /// Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (DispatchListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DispatchListSchema>> GetDispatchesAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null);
        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of DispatchLtiInfoSchema</returns>
        System.Threading.Tasks.Task<DispatchLtiInfoSchema> GetLTIDispatchAsync (string dispatchId);

        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (DispatchLtiInfoSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<DispatchLtiInfoSchema>> GetLTIDispatchAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Add tags to a Destination 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutDestinationTagsAsync (string destinationId, TagListSchema tags);

        /// <summary>
        /// Add tags to a Destination 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutDestinationTagsAsyncWithHttpInfo (string destinationId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutDestinationTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of Destinations 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutDestinationTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Add tags to a Dispatch 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutDispatchTagsAsync (string dispatchId, TagListSchema tags);

        /// <summary>
        /// Add tags to a Dispatch 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutDispatchTagsAsyncWithHttpInfo (string dispatchId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutDispatchTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutDispatchTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetDestinationDispatchRegistrationCountAsync (string destinationId);

        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetDestinationDispatchRegistrationCountAsyncWithHttpInfo (string destinationId);
        /// <summary>
        /// Reset registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetDispatchRegistrationCountAsync (string dispatchId);

        /// <summary>
        /// Reset registration count for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetDispatchRegistrationCountAsyncWithHttpInfo (string dispatchId);
        /// <summary>
        /// Create or update a Destination 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetDestinationAsync (string destinationId, DestinationSchema destination);

        /// <summary>
        /// Create or update a Destination 
        /// </summary>
        /// <remarks>
        /// Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetDestinationAsyncWithHttpInfo (string destinationId, DestinationSchema destination);
        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetDestinationDispatchEnabledAsync (string destinationId, EnabledSchema enabled);

        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetDestinationDispatchEnabledAsyncWithHttpInfo (string destinationId, EnabledSchema enabled);
        /// <summary>
        /// Update enabled status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetDispatchEnabledAsync (string dispatchId, EnabledSchema enabled);

        /// <summary>
        /// Update enabled status for a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetDispatchEnabledAsyncWithHttpInfo (string dispatchId, EnabledSchema enabled);
        /// <summary>
        /// Update user PII hashing status for a Destination
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDestinationHashUserInfoAsync (string destinationId, EnabledSchema enabled);

        /// <summary>
        /// Update user PII hashing status for a Destination
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDestinationHashUserInfoAsyncWithHttpInfo (string destinationId, EnabledSchema enabled);
        /// <summary>
        /// Update information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDispatchAsync (string dispatchId, UpdateDispatchSchema dispatchProperties);

        /// <summary>
        /// Update information about a Dispatch 
        /// </summary>
        /// <remarks>
        /// Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDispatchAsyncWithHttpInfo (string dispatchId, UpdateDispatchSchema dispatchProperties);
        /// <summary>
        /// Update user PII hashing status for a Dispatch
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDispatchHashUserInfoAsync (string dispatchId, EnabledSchema enabled);

        /// <summary>
        /// Update user PII hashing status for a Dispatch
        /// </summary>
        /// <remarks>
        /// Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDispatchHashUserInfoAsyncWithHttpInfo (string dispatchId, EnabledSchema enabled);
        /// <summary>
        /// Update a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDispatchesAsync (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);

        /// <summary>
        /// Update a group of Dispatches 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDispatchesAsyncWithHttpInfo (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DispatchApi : IDispatchApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DispatchApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DispatchApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a group of Destinations  Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns></returns>
        public void CreateDestinations (DestinationListSchema destinationsList)
        {
             CreateDestinationsWithHttpInfo(destinationsList);
        }

        /// <summary>
        /// Create a group of Destinations  Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateDestinationsWithHttpInfo (DestinationListSchema destinationsList)
        {
            // verify the required parameter 'destinationsList' is set
            if (destinationsList == null)
                throw new ApiException(400, "Missing required parameter 'destinationsList' when calling DispatchApi->CreateDestinations");

            var localVarPath = "/dispatch/destinations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationsList != null && destinationsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(destinationsList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = destinationsList; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDestinations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a group of Destinations  Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateDestinationsAsync (DestinationListSchema destinationsList)
        {
             await CreateDestinationsAsyncWithHttpInfo(destinationsList);

        }

        /// <summary>
        /// Create a group of Destinations  Creates a group of destinations.  A destination is a label used to identify an entity outside of SCORM Cloud, such as an LMS.  Used in conjunction with dispatches to provide access control mechanisms for the courses distributed to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationsList"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateDestinationsAsyncWithHttpInfo (DestinationListSchema destinationsList)
        {
            // verify the required parameter 'destinationsList' is set
            if (destinationsList == null)
                throw new ApiException(400, "Missing required parameter 'destinationsList' when calling DispatchApi->CreateDestinations");

            var localVarPath = "/dispatch/destinations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationsList != null && destinationsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(destinationsList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = destinationsList; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDestinations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a group of Dispatches  Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns></returns>
        public void CreateDispatches (CreateDispatchListSchema dispatchList)
        {
             CreateDispatchesWithHttpInfo(dispatchList);
        }

        /// <summary>
        /// Create a group of Dispatches  Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateDispatchesWithHttpInfo (CreateDispatchListSchema dispatchList)
        {
            // verify the required parameter 'dispatchList' is set
            if (dispatchList == null)
                throw new ApiException(400, "Missing required parameter 'dispatchList' when calling DispatchApi->CreateDispatches");

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchList != null && dispatchList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dispatchList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispatchList; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a group of Dispatches  Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateDispatchesAsync (CreateDispatchListSchema dispatchList)
        {
             await CreateDispatchesAsyncWithHttpInfo(dispatchList);

        }

        /// <summary>
        /// Create a group of Dispatches  Creates a group of dispatches.  Dispatches are the connection between a course and a destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud.  As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination.  &gt;**Caution:** &gt;Only one dispatch can exist for a given course-destination combination.  If calling this method with the same course and destination supplied, the old one will be loaded for modification.  An exception to this is if a dispatchId is passed in the body, the request will fail with a 400 response warning that the dispatch already exists.  This is to prevent confusion over which dispatchId is to be used in future requests. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchList"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateDispatchesAsyncWithHttpInfo (CreateDispatchListSchema dispatchList)
        {
            // verify the required parameter 'dispatchList' is set
            if (dispatchList == null)
                throw new ApiException(400, "Missing required parameter 'dispatchList' when calling DispatchApi->CreateDispatches");

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchList != null && dispatchList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dispatchList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispatchList; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Destination  Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns></returns>
        public void DeleteDestination (string destinationId)
        {
             DeleteDestinationWithHttpInfo(destinationId);
        }

        /// <summary>
        /// Delete a Destination  Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDestinationWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->DeleteDestination");

            var localVarPath = "/dispatch/destinations/{destinationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Destination  Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDestinationAsync (string destinationId)
        {
             await DeleteDestinationAsyncWithHttpInfo(destinationId);

        }

        /// <summary>
        /// Delete a Destination  Deletes the specified destination.  &gt;**Caution:** &gt;This will also delete all dispatches belonging to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDestinationAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->DeleteDestination");

            var localVarPath = "/dispatch/destinations/{destinationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Destination&#39;s Dispatches  Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns></returns>
        public void DeleteDestinationDispatches (string destinationId)
        {
             DeleteDestinationDispatchesWithHttpInfo(destinationId);
        }

        /// <summary>
        /// Delete a Destination&#39;s Dispatches  Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDestinationDispatchesWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->DeleteDestinationDispatches");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDestinationDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Destination&#39;s Dispatches  Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDestinationDispatchesAsync (string destinationId)
        {
             await DeleteDestinationDispatchesAsyncWithHttpInfo(destinationId);

        }

        /// <summary>
        /// Delete a Destination&#39;s Dispatches  Deletes all the dispatches from the destination.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDestinationDispatchesAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->DeleteDestinationDispatches");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDestinationDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a Destination  Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteDestinationTags (string destinationId, TagListSchema tags)
        {
             DeleteDestinationTagsWithHttpInfo(destinationId, tags);
        }

        /// <summary>
        /// Delete tags from a Destination  Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDestinationTagsWithHttpInfo (string destinationId, TagListSchema tags)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->DeleteDestinationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->DeleteDestinationTags");

            var localVarPath = "/dispatch/destinations/{destinationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDestinationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a Destination  Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDestinationTagsAsync (string destinationId, TagListSchema tags)
        {
             await DeleteDestinationTagsAsyncWithHttpInfo(destinationId, tags);

        }

        /// <summary>
        /// Delete tags from a Destination  Deletes the specified tags from the destination.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDestinationTagsAsyncWithHttpInfo (string destinationId, TagListSchema tags)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->DeleteDestinationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->DeleteDestinationTags");

            var localVarPath = "/dispatch/destinations/{destinationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDestinationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Dispatch  Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns></returns>
        public void DeleteDispatch (string dispatchId)
        {
             DeleteDispatchWithHttpInfo(dispatchId);
        }

        /// <summary>
        /// Delete a Dispatch  Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDispatchWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->DeleteDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Dispatch  Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDispatchAsync (string dispatchId)
        {
             await DeleteDispatchAsyncWithHttpInfo(dispatchId);

        }

        /// <summary>
        /// Delete a Dispatch  Deletes the specified dispatch.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->DeleteDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete postback information from a Dispatch  Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns></returns>
        public void DeleteDispatchPostbackInfo (string dispatchId)
        {
             DeleteDispatchPostbackInfoWithHttpInfo(dispatchId);
        }

        /// <summary>
        /// Delete postback information from a Dispatch  Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDispatchPostbackInfoWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->DeleteDispatchPostbackInfo");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/postback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatchPostbackInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete postback information from a Dispatch  Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDispatchPostbackInfoAsync (string dispatchId)
        {
             await DeleteDispatchPostbackInfoAsyncWithHttpInfo(dispatchId);

        }

        /// <summary>
        /// Delete postback information from a Dispatch  Clears the postback settings from the dispatch.  This causes the postback settings to inherit a value from a higher level (e.g. application).  If there is no setting at the application level, this will disable postbacks for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchPostbackInfoAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->DeleteDispatchPostbackInfo");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/postback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatchPostbackInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a Dispatch  Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteDispatchTags (string dispatchId, TagListSchema tags)
        {
             DeleteDispatchTagsWithHttpInfo(dispatchId, tags);
        }

        /// <summary>
        /// Delete tags from a Dispatch  Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDispatchTagsWithHttpInfo (string dispatchId, TagListSchema tags)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->DeleteDispatchTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->DeleteDispatchTags");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatchTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a Dispatch  Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDispatchTagsAsync (string dispatchId, TagListSchema tags)
        {
             await DeleteDispatchTagsAsyncWithHttpInfo(dispatchId, tags);

        }

        /// <summary>
        /// Delete tags from a Dispatch  Deletes the specified tags from the dispatch.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchTagsAsyncWithHttpInfo (string dispatchId, TagListSchema tags)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->DeleteDispatchTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->DeleteDispatchTags");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatchTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group of Dispatches  Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns></returns>
        public void DeleteDispatches (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {
             DeleteDispatchesWithHttpInfo(courseId, since, until, datetimeFilter, tags, filter, filterBy);
        }

        /// <summary>
        /// Delete a group of Dispatches  Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDispatchesWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group of Dispatches  Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDispatchesAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {
             await DeleteDispatchesAsyncWithHttpInfo(courseId, since, until, datetimeFilter, tags, filter, filterBy);

        }

        /// <summary>
        /// Delete a group of Dispatches  Deletes the specified group of dispatches.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Caution:** &gt;This will invalidate any existing dispatch packages, rendering them unlaunchable.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental deletion of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispatchesAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches  Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        public void EnableRegistrationInstancing (string destinationId, EnabledSchema enabled)
        {
             EnableRegistrationInstancingWithHttpInfo(destinationId, enabled);
        }

        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches  Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnableRegistrationInstancingWithHttpInfo (string destinationId, EnabledSchema enabled)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->EnableRegistrationInstancing");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->EnableRegistrationInstancing");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/registrationInstancing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableRegistrationInstancing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches  Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnableRegistrationInstancingAsync (string destinationId, EnabledSchema enabled)
        {
             await EnableRegistrationInstancingAsyncWithHttpInfo(destinationId, enabled);

        }

        /// <summary>
        /// Update registration instancing status for a Destination&#39;s Dispatches  Updates the restration instancing status for all dispatches distributed to the destination.  Registration instancing is the default for dispatches, in order to support versioning of dispatches.  A small portion of users may experience duplicate registrations with content dispatched to some LMS platforms.  If you happen to be dispatching content to an LMS with this issue, disabling registration instancing here will resolve the problems. However, dispatch versioning will also be disabled. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnableRegistrationInstancingAsyncWithHttpInfo (string destinationId, EnabledSchema enabled)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->EnableRegistrationInstancing");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->EnableRegistrationInstancing");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/registrationInstancing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableRegistrationInstancing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get detailed information about a Destination  Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>DestinationSchema</returns>
        public DestinationSchema GetDestination (string destinationId)
        {
             ApiResponse<DestinationSchema> localVarResponse = GetDestinationWithHttpInfo(destinationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a Destination  Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of DestinationSchema</returns>
        public ApiResponse< DestinationSchema > GetDestinationWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestination");

            var localVarPath = "/dispatch/destinations/{destinationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DestinationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DestinationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DestinationSchema)));
        }

        /// <summary>
        /// Get detailed information about a Destination  Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of DestinationSchema</returns>
        public async System.Threading.Tasks.Task<DestinationSchema> GetDestinationAsync (string destinationId)
        {
             ApiResponse<DestinationSchema> localVarResponse = await GetDestinationAsyncWithHttpInfo(destinationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a Destination  Returns detailed information about the destination.  This includes name, tags, and launchAuth information. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (DestinationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DestinationSchema>> GetDestinationAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestination");

            var localVarPath = "/dispatch/destinations/{destinationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DestinationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DestinationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DestinationSchema)));
        }

        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches  Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>IntegerResultSchema</returns>
        public IntegerResultSchema GetDestinationDispatchRegistrationCount (string destinationId)
        {
             ApiResponse<IntegerResultSchema> localVarResponse = GetDestinationDispatchRegistrationCountWithHttpInfo(destinationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches  Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of IntegerResultSchema</returns>
        public ApiResponse< IntegerResultSchema > GetDestinationDispatchRegistrationCountWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationDispatchRegistrationCount");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegerResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegerResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegerResultSchema)));
        }

        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches  Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of IntegerResultSchema</returns>
        public async System.Threading.Tasks.Task<IntegerResultSchema> GetDestinationDispatchRegistrationCountAsync (string destinationId)
        {
             ApiResponse<IntegerResultSchema> localVarResponse = await GetDestinationDispatchRegistrationCountAsyncWithHttpInfo(destinationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get registration count for a Destination&#39;s Dispatches  Returns the registration count for all dispatches distributed to the destination.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (IntegerResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntegerResultSchema>> GetDestinationDispatchRegistrationCountAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationDispatchRegistrationCount");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntegerResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntegerResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntegerResultSchema)));
        }

        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches  Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDestinationDispatchZip (string destinationId, string type = null, string cssUrl = null, List<string> tags = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDestinationDispatchZipWithHttpInfo(destinationId, type, cssUrl, tags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches  Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDestinationDispatchZipWithHttpInfo (string destinationId, string type = null, string cssUrl = null, List<string> tags = null)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationDispatchZip");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (cssUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cssUrl", cssUrl)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationDispatchZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches  Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDestinationDispatchZipAsync (string destinationId, string type = null, string cssUrl = null, List<string> tags = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDestinationDispatchZipAsyncWithHttpInfo(destinationId, type, cssUrl, tags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a zip file for a Destination&#39;s Dispatches  Downloads a zip file containing all of the dispatch packages for the destination.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="type">The type of dispatch package to export (SCORM_12 only supported in SCORM Cloud today) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl"> (optional)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDestinationDispatchZipAsyncWithHttpInfo (string destinationId, string type = null, string cssUrl = null, List<string> tags = null)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationDispatchZip");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (cssUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cssUrl", cssUrl)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationDispatchZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches  Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>DispatchListSchema</returns>
        public DispatchListSchema GetDestinationDispatches (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
             ApiResponse<DispatchListSchema> localVarResponse = GetDestinationDispatchesWithHttpInfo(destinationId, courseId, since, until, datetimeFilter, tags, filter, filterBy, orderBy, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches  Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of DispatchListSchema</returns>
        public ApiResponse< DispatchListSchema > GetDestinationDispatchesWithHttpInfo (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationDispatches");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchListSchema)));
        }

        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches  Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of DispatchListSchema</returns>
        public async System.Threading.Tasks.Task<DispatchListSchema> GetDestinationDispatchesAsync (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
             ApiResponse<DispatchListSchema> localVarResponse = await GetDestinationDispatchesAsyncWithHttpInfo(destinationId, courseId, since, until, datetimeFilter, tags, filter, filterBy, orderBy, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of a Destination&#39;s Dispatches  Returns a list of dispatches belonging to the destination.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter should only ever yield 0 or 1 results, as a dispatch is the intersection of a course and a destination.  This can be useful for identifying if a certain course is dispatched to the destination.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (DispatchListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DispatchListSchema>> GetDestinationDispatchesAsyncWithHttpInfo (string destinationId, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationDispatches");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchListSchema)));
        }

        /// <summary>
        /// Get user PII hashing status for a Destination  Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>EnabledSchema</returns>
        public EnabledSchema GetDestinationHashUserInfo (string destinationId)
        {
             ApiResponse<EnabledSchema> localVarResponse = GetDestinationHashUserInfoWithHttpInfo(destinationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user PII hashing status for a Destination  Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        public ApiResponse< EnabledSchema > GetDestinationHashUserInfoWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationHashUserInfo");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Get user PII hashing status for a Destination  Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of EnabledSchema</returns>
        public async System.Threading.Tasks.Task<EnabledSchema> GetDestinationHashUserInfoAsync (string destinationId)
        {
             ApiResponse<EnabledSchema> localVarResponse = await GetDestinationHashUserInfoAsyncWithHttpInfo(destinationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user PII hashing status for a Destination  Returns whether or not user PII hashing is enabled for the destination.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetDestinationHashUserInfoAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationHashUserInfo");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Get tags for a Destination  Returns the tags for the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetDestinationTags (string destinationId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetDestinationTagsWithHttpInfo(destinationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags for a Destination  Returns the tags for the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetDestinationTagsWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationTags");

            var localVarPath = "/dispatch/destinations/{destinationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get tags for a Destination  Returns the tags for the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetDestinationTagsAsync (string destinationId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetDestinationTagsAsyncWithHttpInfo(destinationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags for a Destination  Returns the tags for the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetDestinationTagsAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->GetDestinationTags");

            var localVarPath = "/dispatch/destinations/{destinationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get a list of Destinations  Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>DestinationListSchema</returns>
        public DestinationListSchema GetDestinations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
             ApiResponse<DestinationListSchema> localVarResponse = GetDestinationsWithHttpInfo(courseId, since, until, datetimeFilter, tags, filter, filterBy, orderBy, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Destinations  Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of DestinationListSchema</returns>
        public ApiResponse< DestinationListSchema > GetDestinationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {

            var localVarPath = "/dispatch/destinations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DestinationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DestinationListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DestinationListSchema)));
        }

        /// <summary>
        /// Get a list of Destinations  Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of DestinationListSchema</returns>
        public async System.Threading.Tasks.Task<DestinationListSchema> GetDestinationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
             ApiResponse<DestinationListSchema> localVarResponse = await GetDestinationsAsyncWithHttpInfo(courseId, since, until, datetimeFilter, tags, filter, filterBy, orderBy, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Destinations  Returns a list of destinations.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to destination_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (DestinationListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DestinationListSchema>> GetDestinationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {

            var localVarPath = "/dispatch/destinations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDestinations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DestinationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DestinationListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DestinationListSchema)));
        }

        /// <summary>
        /// Get detailed information about a Dispatch  Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>DispatchSchema</returns>
        public DispatchSchema GetDispatch (string dispatchId)
        {
             ApiResponse<DispatchSchema> localVarResponse = GetDispatchWithHttpInfo(dispatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a Dispatch  Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of DispatchSchema</returns>
        public ApiResponse< DispatchSchema > GetDispatchWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchSchema)));
        }

        /// <summary>
        /// Get detailed information about a Dispatch  Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of DispatchSchema</returns>
        public async System.Threading.Tasks.Task<DispatchSchema> GetDispatchAsync (string dispatchId)
        {
             ApiResponse<DispatchSchema> localVarResponse = await GetDispatchAsyncWithHttpInfo(dispatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a Dispatch  Returns detailed information about the dispatch.  This includes destination and course IDs, as well as registration count. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (DispatchSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DispatchSchema>> GetDispatchAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchSchema)));
        }

        /// <summary>
        /// Get enabled status of a Dispatch  Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>EnabledSchema</returns>
        public EnabledSchema GetDispatchEnabled (string dispatchId)
        {
             ApiResponse<EnabledSchema> localVarResponse = GetDispatchEnabledWithHttpInfo(dispatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get enabled status of a Dispatch  Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        public ApiResponse< EnabledSchema > GetDispatchEnabledWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchEnabled");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Get enabled status of a Dispatch  Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of EnabledSchema</returns>
        public async System.Threading.Tasks.Task<EnabledSchema> GetDispatchEnabledAsync (string dispatchId)
        {
             ApiResponse<EnabledSchema> localVarResponse = await GetDispatchEnabledAsyncWithHttpInfo(dispatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get enabled status of a Dispatch  Returns the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetDispatchEnabledAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchEnabled");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Get user PII hashing status for a Dispatch  Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>EnabledSchema</returns>
        public EnabledSchema GetDispatchHashUserInfo (string dispatchId)
        {
             ApiResponse<EnabledSchema> localVarResponse = GetDispatchHashUserInfoWithHttpInfo(dispatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user PII hashing status for a Dispatch  Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        public ApiResponse< EnabledSchema > GetDispatchHashUserInfoWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchHashUserInfo");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Get user PII hashing status for a Dispatch  Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of EnabledSchema</returns>
        public async System.Threading.Tasks.Task<EnabledSchema> GetDispatchHashUserInfoAsync (string dispatchId)
        {
             ApiResponse<EnabledSchema> localVarResponse = await GetDispatchHashUserInfoAsyncWithHttpInfo(dispatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user PII hashing status for a Dispatch  Returns whether or not user PII hashing is enabled for the dispatch.  Enabling it will cause all user PII to be hashed.  Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetDispatchHashUserInfoAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchHashUserInfo");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Get registration count for a Dispatch  Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>DispatchRegistrationCountSchema</returns>
        public DispatchRegistrationCountSchema GetDispatchRegistrationCount (string dispatchId)
        {
             ApiResponse<DispatchRegistrationCountSchema> localVarResponse = GetDispatchRegistrationCountWithHttpInfo(dispatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get registration count for a Dispatch  Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of DispatchRegistrationCountSchema</returns>
        public ApiResponse< DispatchRegistrationCountSchema > GetDispatchRegistrationCountWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchRegistrationCount");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchRegistrationCountSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchRegistrationCountSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchRegistrationCountSchema)));
        }

        /// <summary>
        /// Get registration count for a Dispatch  Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of DispatchRegistrationCountSchema</returns>
        public async System.Threading.Tasks.Task<DispatchRegistrationCountSchema> GetDispatchRegistrationCountAsync (string dispatchId)
        {
             ApiResponse<DispatchRegistrationCountSchema> localVarResponse = await GetDispatchRegistrationCountAsyncWithHttpInfo(dispatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get registration count for a Dispatch  Returns the registration count for the dispatch, as well as the date and time of the last count reset, if any.  &gt;**Note:** &gt;The count here is a convenience counter.  Since it has the capability of being reset, it may not match the actual billed registration count for a dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (DispatchRegistrationCountSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DispatchRegistrationCountSchema>> GetDispatchRegistrationCountAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchRegistrationCount");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchRegistrationCountSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchRegistrationCountSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchRegistrationCountSchema)));
        }

        /// <summary>
        /// Get tags for a Dispatch  Returns the tags for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetDispatchTags (string dispatchId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetDispatchTagsWithHttpInfo(dispatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags for a Dispatch  Returns the tags for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetDispatchTagsWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchTags");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get tags for a Dispatch  Returns the tags for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetDispatchTagsAsync (string dispatchId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetDispatchTagsAsyncWithHttpInfo(dispatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags for a Dispatch  Returns the tags for the dispatch. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetDispatchTagsAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchTags");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Download a zip package for a Dispatch  Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDispatchZip (string dispatchId, string type = null, string cssUrl = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDispatchZipWithHttpInfo(dispatchId, type, cssUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a zip package for a Dispatch  Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDispatchZipWithHttpInfo (string dispatchId, string type = null, string cssUrl = null)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchZip");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (cssUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cssUrl", cssUrl)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download a zip package for a Dispatch  Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDispatchZipAsync (string dispatchId, string type = null, string cssUrl = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDispatchZipAsyncWithHttpInfo(dispatchId, type, cssUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a zip package for a Dispatch  Downloads a zip package for the dispatch.  A dispatch zip package is a distributable course stub which, upon launch in a third-party LMS, will reference and launch the underlying course in SCORM Cloud. As an extension, dispatches allow for limiting access control even after the zip file has been given to the destination. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="type">The type of dispatch package to export (currently only SCORM_12 available) (optional, default to SCORM_12)</param>
        /// <param name="cssUrl">Custom CSS to apply to the dispatch package (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDispatchZipAsyncWithHttpInfo (string dispatchId, string type = null, string cssUrl = null)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetDispatchZip");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (cssUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cssUrl", cssUrl)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatchZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get a list of Dispatches  Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>DispatchListSchema</returns>
        public DispatchListSchema GetDispatches (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
             ApiResponse<DispatchListSchema> localVarResponse = GetDispatchesWithHttpInfo(courseId, since, until, datetimeFilter, tags, filter, filterBy, orderBy, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Dispatches  Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of DispatchListSchema</returns>
        public ApiResponse< DispatchListSchema > GetDispatchesWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchListSchema)));
        }

        /// <summary>
        /// Get a list of Dispatches  Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of DispatchListSchema</returns>
        public async System.Threading.Tasks.Task<DispatchListSchema> GetDispatchesAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {
             ApiResponse<DispatchListSchema> localVarResponse = await GetDispatchesAsyncWithHttpInfo(courseId, since, until, datetimeFilter, tags, filter, filterBy, orderBy, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Dispatches  Returns a list of dispatches.  Can be filtered using the request parameters to provide a subset of results.  Using the &#x60;courseId&#x60; filter will allow for viewing which destinations the course has been dispatched to.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to updated_asc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (DispatchListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DispatchListSchema>> GetDispatchesAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null)
        {

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchListSchema)));
        }

        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification.  
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>DispatchLtiInfoSchema</returns>
        public DispatchLtiInfoSchema GetLTIDispatch (string dispatchId)
        {
             ApiResponse<DispatchLtiInfoSchema> localVarResponse = GetLTIDispatchWithHttpInfo(dispatchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification.  
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of DispatchLtiInfoSchema</returns>
        public ApiResponse< DispatchLtiInfoSchema > GetLTIDispatchWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetLTIDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/lti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLTIDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchLtiInfoSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchLtiInfoSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchLtiInfoSchema)));
        }

        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification.  
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of DispatchLtiInfoSchema</returns>
        public async System.Threading.Tasks.Task<DispatchLtiInfoSchema> GetLTIDispatchAsync (string dispatchId)
        {
             ApiResponse<DispatchLtiInfoSchema> localVarResponse = await GetLTIDispatchAsyncWithHttpInfo(dispatchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the information necessary to launch this dispatch using the IMS LTI 1.1 specification.  
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse (DispatchLtiInfoSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DispatchLtiInfoSchema>> GetLTIDispatchAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->GetLTIDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/lti";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLTIDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispatchLtiInfoSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispatchLtiInfoSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispatchLtiInfoSchema)));
        }

        /// <summary>
        /// Add tags to a Destination  Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutDestinationTags (string destinationId, TagListSchema tags)
        {
             PutDestinationTagsWithHttpInfo(destinationId, tags);
        }

        /// <summary>
        /// Add tags to a Destination  Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutDestinationTagsWithHttpInfo (string destinationId, TagListSchema tags)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->PutDestinationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->PutDestinationTags");

            var localVarPath = "/dispatch/destinations/{destinationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDestinationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add tags to a Destination  Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutDestinationTagsAsync (string destinationId, TagListSchema tags)
        {
             await PutDestinationTagsAsyncWithHttpInfo(destinationId, tags);

        }

        /// <summary>
        /// Add tags to a Destination  Applies the provided tags to the destination.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutDestinationTagsAsyncWithHttpInfo (string destinationId, TagListSchema tags)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->PutDestinationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->PutDestinationTags");

            var localVarPath = "/dispatch/destinations/{destinationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDestinationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of Destinations  Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        public void PutDestinationTagsBatch (BatchTagsSchema batch)
        {
             PutDestinationTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Add a group of tags to a group of Destinations  Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutDestinationTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling DispatchApi->PutDestinationTagsBatch");

            var localVarPath = "/dispatch/destinations/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDestinationTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of Destinations  Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutDestinationTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutDestinationTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Add a group of tags to a group of Destinations  Applies all of the provided tags on all of the provided destinations.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDestinations). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutDestinationTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling DispatchApi->PutDestinationTagsBatch");

            var localVarPath = "/dispatch/destinations/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDestinationTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add tags to a Dispatch  Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutDispatchTags (string dispatchId, TagListSchema tags)
        {
             PutDispatchTagsWithHttpInfo(dispatchId, tags);
        }

        /// <summary>
        /// Add tags to a Dispatch  Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutDispatchTagsWithHttpInfo (string dispatchId, TagListSchema tags)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->PutDispatchTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->PutDispatchTags");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDispatchTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add tags to a Dispatch  Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutDispatchTagsAsync (string dispatchId, TagListSchema tags)
        {
             await PutDispatchTagsAsyncWithHttpInfo(dispatchId, tags);

        }

        /// <summary>
        /// Add tags to a Dispatch  Applies the provided tags to the dispatch.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutDispatchTagsAsyncWithHttpInfo (string dispatchId, TagListSchema tags)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->PutDispatchTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling DispatchApi->PutDispatchTags");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDispatchTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of Dispatches  Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        public void PutDispatchTagsBatch (BatchTagsSchema batch)
        {
             PutDispatchTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Add a group of tags to a group of Dispatches  Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutDispatchTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling DispatchApi->PutDispatchTagsBatch");

            var localVarPath = "/dispatch/dispatches/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDispatchTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of Dispatches  Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutDispatchTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutDispatchTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Add a group of tags to a group of Dispatches  Applies all of the provided tags on all of the provided dispatches.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetDispatches). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutDispatchTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling DispatchApi->PutDispatchTagsBatch");

            var localVarPath = "/dispatch/dispatches/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDispatchTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches  Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns></returns>
        public void ResetDestinationDispatchRegistrationCount (string destinationId)
        {
             ResetDestinationDispatchRegistrationCountWithHttpInfo(destinationId);
        }

        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches  Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetDestinationDispatchRegistrationCountWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->ResetDestinationDispatchRegistrationCount");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetDestinationDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches  Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetDestinationDispatchRegistrationCountAsync (string destinationId)
        {
             await ResetDestinationDispatchRegistrationCountAsyncWithHttpInfo(destinationId);

        }

        /// <summary>
        /// Reset registration counts for a Destination&#39;s Dispatches  Clears the registration count for all dispatches distributed to the destination.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetDestinationDispatchRegistrationCountAsyncWithHttpInfo (string destinationId)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->ResetDestinationDispatchRegistrationCount");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetDestinationDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset registration count for a Dispatch  Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns></returns>
        public void ResetDispatchRegistrationCount (string dispatchId)
        {
             ResetDispatchRegistrationCountWithHttpInfo(dispatchId);
        }

        /// <summary>
        /// Reset registration count for a Dispatch  Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetDispatchRegistrationCountWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->ResetDispatchRegistrationCount");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset registration count for a Dispatch  Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetDispatchRegistrationCountAsync (string dispatchId)
        {
             await ResetDispatchRegistrationCountAsyncWithHttpInfo(dispatchId);

        }

        /// <summary>
        /// Reset registration count for a Dispatch  Clears the registration count for the dispatch.  This resets the registration counter on the dispatch itself, but has no effect on the existing registrations.  Can be used in situations where the license for the course material has been renewed. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetDispatchRegistrationCountAsyncWithHttpInfo (string dispatchId)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->ResetDispatchRegistrationCount");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/registrationCount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetDispatchRegistrationCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or update a Destination  Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns></returns>
        public void SetDestination (string destinationId, DestinationSchema destination)
        {
             SetDestinationWithHttpInfo(destinationId, destination);
        }

        /// <summary>
        /// Create or update a Destination  Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetDestinationWithHttpInfo (string destinationId, DestinationSchema destination)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->SetDestination");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling DispatchApi->SetDestination");

            var localVarPath = "/dispatch/destinations/{destinationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (destination != null && destination.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(destination); // http body (model) parameter
            }
            else
            {
                localVarPostBody = destination; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or update a Destination  Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetDestinationAsync (string destinationId, DestinationSchema destination)
        {
             await SetDestinationAsyncWithHttpInfo(destinationId, destination);

        }

        /// <summary>
        /// Create or update a Destination  Creates or updates information about the destination.  -If the destination is being created, a name should be provided in the DestinationSchema.  If one is not present in the request an error will be thrown. -If the destination is instead being updated, only non-null values that are provided will be updated.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="destination"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetDestinationAsyncWithHttpInfo (string destinationId, DestinationSchema destination)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->SetDestination");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling DispatchApi->SetDestination");

            var localVarPath = "/dispatch/destinations/{destinationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (destination != null && destination.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(destination); // http body (model) parameter
            }
            else
            {
                localVarPostBody = destination; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches  Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        public void SetDestinationDispatchEnabled (string destinationId, EnabledSchema enabled)
        {
             SetDestinationDispatchEnabledWithHttpInfo(destinationId, enabled);
        }

        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches  Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetDestinationDispatchEnabledWithHttpInfo (string destinationId, EnabledSchema enabled)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->SetDestinationDispatchEnabled");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->SetDestinationDispatchEnabled");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDestinationDispatchEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches  Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetDestinationDispatchEnabledAsync (string destinationId, EnabledSchema enabled)
        {
             await SetDestinationDispatchEnabledAsyncWithHttpInfo(destinationId, enabled);

        }

        /// <summary>
        /// Update enabled status for a Destination&#39;s Dispatches  Updates the enabled status for all dispatches distributed to the destination.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetDestinationDispatchEnabledAsyncWithHttpInfo (string destinationId, EnabledSchema enabled)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->SetDestinationDispatchEnabled");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->SetDestinationDispatchEnabled");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDestinationDispatchEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update enabled status for a Dispatch  Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        public void SetDispatchEnabled (string dispatchId, EnabledSchema enabled)
        {
             SetDispatchEnabledWithHttpInfo(dispatchId, enabled);
        }

        /// <summary>
        /// Update enabled status for a Dispatch  Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetDispatchEnabledWithHttpInfo (string dispatchId, EnabledSchema enabled)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->SetDispatchEnabled");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->SetDispatchEnabled");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDispatchEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update enabled status for a Dispatch  Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetDispatchEnabledAsync (string dispatchId, EnabledSchema enabled)
        {
             await SetDispatchEnabledAsyncWithHttpInfo(dispatchId, enabled);

        }

        /// <summary>
        /// Update enabled status for a Dispatch  Updates the enabled status for the dispatch.  This is an access control measure allowing you to turn access to a previously distributed dispatch packages on or off. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetDispatchEnabledAsyncWithHttpInfo (string dispatchId, EnabledSchema enabled)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->SetDispatchEnabled");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->SetDispatchEnabled");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDispatchEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update user PII hashing status for a Destination Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        public void UpdateDestinationHashUserInfo (string destinationId, EnabledSchema enabled)
        {
             UpdateDestinationHashUserInfoWithHttpInfo(destinationId, enabled);
        }

        /// <summary>
        /// Update user PII hashing status for a Destination Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDestinationHashUserInfoWithHttpInfo (string destinationId, EnabledSchema enabled)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->UpdateDestinationHashUserInfo");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->UpdateDestinationHashUserInfo");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDestinationHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update user PII hashing status for a Destination Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDestinationHashUserInfoAsync (string destinationId, EnabledSchema enabled)
        {
             await UpdateDestinationHashUserInfoAsyncWithHttpInfo(destinationId, enabled);

        }

        /// <summary>
        /// Update user PII hashing status for a Destination Updates user PII hashing status for the destination.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId">Identifier for the destination</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDestinationHashUserInfoAsyncWithHttpInfo (string destinationId, EnabledSchema enabled)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
                throw new ApiException(400, "Missing required parameter 'destinationId' when calling DispatchApi->UpdateDestinationHashUserInfo");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->UpdateDestinationHashUserInfo");

            var localVarPath = "/dispatch/destinations/{destinationId}/dispatches/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (destinationId != null) localVarPathParams.Add("destinationId", this.Configuration.ApiClient.ParameterToString(destinationId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDestinationHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update information about a Dispatch  Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns></returns>
        public void UpdateDispatch (string dispatchId, UpdateDispatchSchema dispatchProperties)
        {
             UpdateDispatchWithHttpInfo(dispatchId, dispatchProperties);
        }

        /// <summary>
        /// Update information about a Dispatch  Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDispatchWithHttpInfo (string dispatchId, UpdateDispatchSchema dispatchProperties)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->UpdateDispatch");
            // verify the required parameter 'dispatchProperties' is set
            if (dispatchProperties == null)
                throw new ApiException(400, "Missing required parameter 'dispatchProperties' when calling DispatchApi->UpdateDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (dispatchProperties != null && dispatchProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dispatchProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispatchProperties; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update information about a Dispatch  Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDispatchAsync (string dispatchId, UpdateDispatchSchema dispatchProperties)
        {
             await UpdateDispatchAsyncWithHttpInfo(dispatchId, dispatchProperties);

        }

        /// <summary>
        /// Update information about a Dispatch  Updates information about the dispatch, such as the expiration date and registration cap.  Only non-null values that are provided will be updated. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="dispatchProperties"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDispatchAsyncWithHttpInfo (string dispatchId, UpdateDispatchSchema dispatchProperties)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->UpdateDispatch");
            // verify the required parameter 'dispatchProperties' is set
            if (dispatchProperties == null)
                throw new ApiException(400, "Missing required parameter 'dispatchProperties' when calling DispatchApi->UpdateDispatch");

            var localVarPath = "/dispatch/dispatches/{dispatchId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (dispatchProperties != null && dispatchProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dispatchProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispatchProperties; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDispatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update user PII hashing status for a Dispatch Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns></returns>
        public void UpdateDispatchHashUserInfo (string dispatchId, EnabledSchema enabled)
        {
             UpdateDispatchHashUserInfoWithHttpInfo(dispatchId, enabled);
        }

        /// <summary>
        /// Update user PII hashing status for a Dispatch Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDispatchHashUserInfoWithHttpInfo (string dispatchId, EnabledSchema enabled)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->UpdateDispatchHashUserInfo");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->UpdateDispatchHashUserInfo");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDispatchHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update user PII hashing status for a Dispatch Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDispatchHashUserInfoAsync (string dispatchId, EnabledSchema enabled)
        {
             await UpdateDispatchHashUserInfoAsyncWithHttpInfo(dispatchId, enabled);

        }

        /// <summary>
        /// Update user PII hashing status for a Dispatch Updates user PII hashing status for the dispatch.  Enabling it will cause all user PII to be hashed. Hashing PII will anonymize the learner data from the dispatched course.  This will make looking up specific details about a learner difficult. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchId">Identifier for the dispatch</param>
        /// <param name="enabled"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDispatchHashUserInfoAsyncWithHttpInfo (string dispatchId, EnabledSchema enabled)
        {
            // verify the required parameter 'dispatchId' is set
            if (dispatchId == null)
                throw new ApiException(400, "Missing required parameter 'dispatchId' when calling DispatchApi->UpdateDispatchHashUserInfo");
            // verify the required parameter 'enabled' is set
            if (enabled == null)
                throw new ApiException(400, "Missing required parameter 'enabled' when calling DispatchApi->UpdateDispatchHashUserInfo");

            var localVarPath = "/dispatch/dispatches/{dispatchId}/hashUserInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dispatchId != null) localVarPathParams.Add("dispatchId", this.Configuration.ApiClient.ParameterToString(dispatchId)); // path parameter
            if (enabled != null && enabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enabled; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDispatchHashUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a group of Dispatches  Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns></returns>
        public void UpdateDispatches (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {
             UpdateDispatchesWithHttpInfo(dispatchProperties, courseId, since, until, datetimeFilter, tags, filter, filterBy);
        }

        /// <summary>
        /// Update a group of Dispatches  Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDispatchesWithHttpInfo (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {
            // verify the required parameter 'dispatchProperties' is set
            if (dispatchProperties == null)
                throw new ApiException(400, "Missing required parameter 'dispatchProperties' when calling DispatchApi->UpdateDispatches");

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (dispatchProperties != null && dispatchProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dispatchProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispatchProperties; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a group of Dispatches  Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDispatchesAsync (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {
             await UpdateDispatchesAsyncWithHttpInfo(dispatchProperties, courseId, since, until, datetimeFilter, tags, filter, filterBy);

        }

        /// <summary>
        /// Update a group of Dispatches  Updates information about a group of dispatches, such as registration cap, expiration date, and postback information. Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;One of the filter parameters (i.e. &#x60;courseId&#x60;, &#x60;since&#x60;/&#x60;until&#x60;, &#x60;tags&#x60;, or &#x60;filter&#x60;) needs to be provided.  This is to prevent accidental modification of all dispatches.  If you do wish to update all dispatches, try setting the since parameter to a value prior to the creation of any dispatches.  &gt;**Info:** &gt;If using one of our client libraries, refer to its README for additional information on how to work with the &#x60;X-Total-Count&#x60; header. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispatchProperties"></param>
        /// <param name="courseId">Only retrieve resources having &#x60;courseId&#x60; (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to dispatch_id)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDispatchesAsyncWithHttpInfo (UpdateDispatchSchema dispatchProperties, string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null)
        {
            // verify the required parameter 'dispatchProperties' is set
            if (dispatchProperties == null)
                throw new ApiException(400, "Missing required parameter 'dispatchProperties' when calling DispatchApi->UpdateDispatches");

            var localVarPath = "/dispatch/dispatches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (dispatchProperties != null && dispatchProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dispatchProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispatchProperties; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDispatches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
