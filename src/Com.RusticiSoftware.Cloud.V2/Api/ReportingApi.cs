/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all of the account information specified by the given app ID
        /// </summary>
        /// <remarks>
        /// Get all of the account information specified by the given app ID
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportageAccountInfoSchema</returns>
        ReportageAccountInfoSchema GetAccountInfo ();

        /// <summary>
        /// Get all of the account information specified by the given app ID
        /// </summary>
        /// <remarks>
        /// Get all of the account information specified by the given app ID
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportageAccountInfoSchema</returns>
        ApiResponse<ReportageAccountInfoSchema> GetAccountInfoWithHttpInfo ();
        /// <summary>
        /// Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <remarks>
        /// Get a session authentication token to use when launching Reportage
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>ReportageAuthTokenSchema</returns>
        ReportageAuthTokenSchema GetReportageAuthToken (string navPermission, bool? admin = null);

        /// <summary>
        /// Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <remarks>
        /// Get a session authentication token to use when launching Reportage
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>ApiResponse of ReportageAuthTokenSchema</returns>
        ApiResponse<ReportageAuthTokenSchema> GetReportageAuthTokenWithHttpInfo (string navPermission, bool? admin = null);
        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <remarks>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>ReportageLinkSchema</returns>
        ReportageLinkSchema GetReportageLink (string auth, string reportUrl);

        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <remarks>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>ApiResponse of ReportageLinkSchema</returns>
        ApiResponse<ReportageLinkSchema> GetReportageLinkWithHttpInfo (string auth, string reportUrl);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all of the account information specified by the given app ID
        /// </summary>
        /// <remarks>
        /// Get all of the account information specified by the given app ID
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportageAccountInfoSchema</returns>
        System.Threading.Tasks.Task<ReportageAccountInfoSchema> GetAccountInfoAsync ();

        /// <summary>
        /// Get all of the account information specified by the given app ID
        /// </summary>
        /// <remarks>
        /// Get all of the account information specified by the given app ID
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportageAccountInfoSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportageAccountInfoSchema>> GetAccountInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <remarks>
        /// Get a session authentication token to use when launching Reportage
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>Task of ReportageAuthTokenSchema</returns>
        System.Threading.Tasks.Task<ReportageAuthTokenSchema> GetReportageAuthTokenAsync (string navPermission, bool? admin = null);

        /// <summary>
        /// Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <remarks>
        /// Get a session authentication token to use when launching Reportage
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ReportageAuthTokenSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportageAuthTokenSchema>> GetReportageAuthTokenAsyncWithHttpInfo (string navPermission, bool? admin = null);
        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <remarks>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>Task of ReportageLinkSchema</returns>
        System.Threading.Tasks.Task<ReportageLinkSchema> GetReportageLinkAsync (string auth, string reportUrl);

        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <remarks>
        /// Get the link to a page in Reportage with the given authentication and permissions
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>Task of ApiResponse (ReportageLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportageLinkSchema>> GetReportageLinkAsyncWithHttpInfo (string auth, string reportUrl);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportingApi : IReportingApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportingApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all of the account information specified by the given app ID Get all of the account information specified by the given app ID
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportageAccountInfoSchema</returns>
        public ReportageAccountInfoSchema GetAccountInfo ()
        {
             ApiResponse<ReportageAccountInfoSchema> localVarResponse = GetAccountInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all of the account information specified by the given app ID Get all of the account information specified by the given app ID
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportageAccountInfoSchema</returns>
        public ApiResponse< ReportageAccountInfoSchema > GetAccountInfoWithHttpInfo ()
        {

            var localVarPath = "/reporting/accountInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportageAccountInfoSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportageAccountInfoSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportageAccountInfoSchema)));
        }

        /// <summary>
        /// Get all of the account information specified by the given app ID Get all of the account information specified by the given app ID
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportageAccountInfoSchema</returns>
        public async System.Threading.Tasks.Task<ReportageAccountInfoSchema> GetAccountInfoAsync ()
        {
             ApiResponse<ReportageAccountInfoSchema> localVarResponse = await GetAccountInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all of the account information specified by the given app ID Get all of the account information specified by the given app ID
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportageAccountInfoSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportageAccountInfoSchema>> GetAccountInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/reporting/accountInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportageAccountInfoSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportageAccountInfoSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportageAccountInfoSchema)));
        }

        /// <summary>
        /// Get a session authentication token to use when launching Reportage Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>ReportageAuthTokenSchema</returns>
        public ReportageAuthTokenSchema GetReportageAuthToken (string navPermission, bool? admin = null)
        {
             ApiResponse<ReportageAuthTokenSchema> localVarResponse = GetReportageAuthTokenWithHttpInfo(navPermission, admin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a session authentication token to use when launching Reportage Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>ApiResponse of ReportageAuthTokenSchema</returns>
        public ApiResponse< ReportageAuthTokenSchema > GetReportageAuthTokenWithHttpInfo (string navPermission, bool? admin = null)
        {
            // verify the required parameter 'navPermission' is set
            if (navPermission == null)
                throw new ApiException(400, "Missing required parameter 'navPermission' when calling ReportingApi->GetReportageAuthToken");

            var localVarPath = "/reporting/reportageAuth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (navPermission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "navPermission", navPermission)); // query parameter
            if (admin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "admin", admin)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportageAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportageAuthTokenSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportageAuthTokenSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportageAuthTokenSchema)));
        }

        /// <summary>
        /// Get a session authentication token to use when launching Reportage Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>Task of ReportageAuthTokenSchema</returns>
        public async System.Threading.Tasks.Task<ReportageAuthTokenSchema> GetReportageAuthTokenAsync (string navPermission, bool? admin = null)
        {
             ApiResponse<ReportageAuthTokenSchema> localVarResponse = await GetReportageAuthTokenAsyncWithHttpInfo(navPermission, admin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a session authentication token to use when launching Reportage Get a session authentication token to use when launching Reportage
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="navPermission">The navigation permissions for this Reportage session</param>
        /// <param name="admin">Grant admin privileges to this Reportage session (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ReportageAuthTokenSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportageAuthTokenSchema>> GetReportageAuthTokenAsyncWithHttpInfo (string navPermission, bool? admin = null)
        {
            // verify the required parameter 'navPermission' is set
            if (navPermission == null)
                throw new ApiException(400, "Missing required parameter 'navPermission' when calling ReportingApi->GetReportageAuthToken");

            var localVarPath = "/reporting/reportageAuth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (navPermission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "navPermission", navPermission)); // query parameter
            if (admin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "admin", admin)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportageAuthToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportageAuthTokenSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportageAuthTokenSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportageAuthTokenSchema)));
        }

        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>ReportageLinkSchema</returns>
        public ReportageLinkSchema GetReportageLink (string auth, string reportUrl)
        {
             ApiResponse<ReportageLinkSchema> localVarResponse = GetReportageLinkWithHttpInfo(auth, reportUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>ApiResponse of ReportageLinkSchema</returns>
        public ApiResponse< ReportageLinkSchema > GetReportageLinkWithHttpInfo (string auth, string reportUrl)
        {
            // verify the required parameter 'auth' is set
            if (auth == null)
                throw new ApiException(400, "Missing required parameter 'auth' when calling ReportingApi->GetReportageLink");
            // verify the required parameter 'reportUrl' is set
            if (reportUrl == null)
                throw new ApiException(400, "Missing required parameter 'reportUrl' when calling ReportingApi->GetReportageLink");

            var localVarPath = "/reporting/reportageLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (auth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth", auth)); // query parameter
            if (reportUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportUrl", reportUrl)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportageLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportageLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportageLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportageLinkSchema)));
        }

        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>Task of ReportageLinkSchema</returns>
        public async System.Threading.Tasks.Task<ReportageLinkSchema> GetReportageLinkAsync (string auth, string reportUrl)
        {
             ApiResponse<ReportageLinkSchema> localVarResponse = await GetReportageLinkAsyncWithHttpInfo(auth, reportUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the link to a page in Reportage with the given authentication and permissions Get the link to a page in Reportage with the given authentication and permissions
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auth">The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;</param>
        /// <param name="reportUrl">The Reportage URL to try and access</param>
        /// <returns>Task of ApiResponse (ReportageLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportageLinkSchema>> GetReportageLinkAsyncWithHttpInfo (string auth, string reportUrl)
        {
            // verify the required parameter 'auth' is set
            if (auth == null)
                throw new ApiException(400, "Missing required parameter 'auth' when calling ReportingApi->GetReportageLink");
            // verify the required parameter 'reportUrl' is set
            if (reportUrl == null)
                throw new ApiException(400, "Missing required parameter 'reportUrl' when calling ReportingApi->GetReportageLink");

            var localVarPath = "/reporting/reportageLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (auth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth", auth)); // query parameter
            if (reportUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportUrl", reportUrl)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportageLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportageLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportageLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportageLinkSchema)));
        }

    }
}
