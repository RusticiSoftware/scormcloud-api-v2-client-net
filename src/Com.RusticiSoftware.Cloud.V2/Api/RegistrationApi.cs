/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistrationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get registration launch link. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to launch this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildRegistrationLaunchLink (string registrationId, LaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get registration launch link. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to launch this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildRegistrationLaunchLinkWithHttpInfo (string registrationId, LaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new instance for this registration specified by the registration ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        void CreateNewRegistrationInstance (string registrationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new instance for this registration specified by the registration ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateNewRegistrationInstanceWithHttpInfo (string registrationId);
        /// <summary>
        /// Create a registration. 
        /// </summary>
        /// <remarks>
        /// This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns></returns>
        void CreateRegistration (CreateRegistrationSchema registration, int? courseVersion = null);

        /// <summary>
        /// Create a registration. 
        /// </summary>
        /// <remarks>
        /// This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRegistrationWithHttpInfo (CreateRegistrationSchema registration, int? courseVersion = null);
        /// <summary>
        /// Delete a registration. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        void DeleteRegistration (string registrationId);

        /// <summary>
        /// Delete a registration. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationWithHttpInfo (string registrationId);
        /// <summary>
        /// Clear a registration configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteRegistrationConfigurationSetting (string registrationId, string settingId);

        /// <summary>
        /// Clear a registration configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationConfigurationSettingWithHttpInfo (string registrationId, string settingId);
        /// <summary>
        /// Delete the global data of a registration. 
        /// </summary>
        /// <remarks>
        /// Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        void DeleteRegistrationGlobalData (string registrationId);

        /// <summary>
        /// Delete the global data of a registration. 
        /// </summary>
        /// <remarks>
        /// Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationGlobalDataWithHttpInfo (string registrationId);
        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <remarks>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns></returns>
        void DeleteRegistrationInstance (string registrationId, int? instanceId);

        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <remarks>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationInstanceWithHttpInfo (string registrationId, int? instanceId);
        /// <summary>
        /// Clear a configuration for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteRegistrationInstanceConfigurationSetting (string registrationId, int? instanceId, string settingId);

        /// <summary>
        /// Clear a configuration for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationInstanceConfigurationSettingWithHttpInfo (string registrationId, int? instanceId, string settingId);
        /// <summary>
        /// Reset a registration. 
        /// </summary>
        /// <remarks>
        /// This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        void DeleteRegistrationProgress (string registrationId);

        /// <summary>
        /// Reset a registration. 
        /// </summary>
        /// <remarks>
        /// This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationProgressWithHttpInfo (string registrationId);
        /// <summary>
        /// Delete tags from a registration. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteRegistrationTags (string registrationId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a registration. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRegistrationTagsWithHttpInfo (string registrationId, TagListSchema tags);
        /// <summary>
        /// See if a registration exists. 
        /// </summary>
        /// <remarks>
        /// This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        void GetRegistration (string registrationId);

        /// <summary>
        /// See if a registration exists. 
        /// </summary>
        /// <remarks>
        /// This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetRegistrationWithHttpInfo (string registrationId);
        /// <summary>
        /// Get registration configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetRegistrationConfiguration (string registrationId, bool? includeMetadata = null);

        /// <summary>
        /// Get registration configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetRegistrationConfigurationWithHttpInfo (string registrationId, bool? includeMetadata = null);
        /// <summary>
        /// Get configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetRegistrationInstanceConfiguration (string registrationId, int? instanceId, bool? includeMetadata = null);

        /// <summary>
        /// Get configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetRegistrationInstanceConfigurationWithHttpInfo (string registrationId, int? instanceId, bool? includeMetadata = null);
        /// <summary>
        /// Get launch history for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of the launches of the specified instance of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>LaunchHistoryListSchema</returns>
        LaunchHistoryListSchema GetRegistrationInstanceLaunchHistory (string registrationId, int? instanceId, bool? includeHistoryLog = null);

        /// <summary>
        /// Get launch history for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of the launches of the specified instance of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>ApiResponse of LaunchHistoryListSchema</returns>
        ApiResponse<LaunchHistoryListSchema> GetRegistrationInstanceLaunchHistoryWithHttpInfo (string registrationId, int? instanceId, bool? includeHistoryLog = null);
        /// <summary>
        /// Get details of an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>RegistrationSchema</returns>
        RegistrationSchema GetRegistrationInstanceProgress (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);

        /// <summary>
        /// Get details of an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>ApiResponse of RegistrationSchema</returns>
        ApiResponse<RegistrationSchema> GetRegistrationInstanceProgressWithHttpInfo (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);
        /// <summary>
        /// Get xAPI statements for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetRegistrationInstanceStatements (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetRegistrationInstanceStatementsWithHttpInfo (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get all instances of a registration. 
        /// </summary>
        /// <remarks>
        /// Get all the instances of this the registration specified by the registration ID 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>RegistrationListSchema</returns>
        RegistrationListSchema GetRegistrationInstances (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);

        /// <summary>
        /// Get all instances of a registration. 
        /// </summary>
        /// <remarks>
        /// Get all the instances of this the registration specified by the registration ID 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>ApiResponse of RegistrationListSchema</returns>
        ApiResponse<RegistrationListSchema> GetRegistrationInstancesWithHttpInfo (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);
        /// <summary>
        /// Get launch history for a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of this registration&#39;s launches. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>LaunchHistoryListSchema</returns>
        LaunchHistoryListSchema GetRegistrationLaunchHistory (string registrationId, bool? includeHistoryLog = null);

        /// <summary>
        /// Get launch history for a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of this registration&#39;s launches. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>ApiResponse of LaunchHistoryListSchema</returns>
        ApiResponse<LaunchHistoryListSchema> GetRegistrationLaunchHistoryWithHttpInfo (string registrationId, bool? includeHistoryLog = null);
        /// <summary>
        /// Get details of a registration. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>RegistrationSchema</returns>
        RegistrationSchema GetRegistrationProgress (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);

        /// <summary>
        /// Get details of a registration. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>ApiResponse of RegistrationSchema</returns>
        ApiResponse<RegistrationSchema> GetRegistrationProgressWithHttpInfo (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);
        /// <summary>
        /// Get xAPI statements for a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetRegistrationStatements (string registrationId, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetRegistrationStatementsWithHttpInfo (string registrationId, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get tags for a registration. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags applied to this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetRegistrationTags (string registrationId);

        /// <summary>
        /// Get tags for a registration. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags applied to this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetRegistrationTagsWithHttpInfo (string registrationId);
        /// <summary>
        /// Get a list of all registrations. 
        /// </summary>
        /// <remarks>
        /// Gets a list of registrations including a summary of the status of each registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>RegistrationListSchema</returns>
        RegistrationListSchema GetRegistrations (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null);

        /// <summary>
        /// Get a list of all registrations. 
        /// </summary>
        /// <remarks>
        /// Gets a list of registrations including a summary of the status of each registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of RegistrationListSchema</returns>
        ApiResponse<RegistrationListSchema> GetRegistrationsWithHttpInfo (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null);
        /// <summary>
        /// Set tags on a registration. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutRegistrationTags (string registrationId, TagListSchema tags);

        /// <summary>
        /// Set tags on a registration. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutRegistrationTagsWithHttpInfo (string registrationId, TagListSchema tags);
        /// <summary>
        /// Set tags on registrations. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided registrations. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns></returns>
        void PutRegistrationTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Set tags on registrations. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided registrations. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutRegistrationTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Set registration configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetRegistrationConfiguration (string registrationId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set registration configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetRegistrationConfigurationWithHttpInfo (string registrationId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Set configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetRegistrationInstanceConfiguration (string registrationId, int? instanceId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetRegistrationInstanceConfigurationWithHttpInfo (string registrationId, int? instanceId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Send a test postback with a provided configuration. 
        /// </summary>
        /// <remarks>
        /// This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns></returns>
        void TestRegistrationPostback (PostBackSchema postBack);

        /// <summary>
        /// Send a test postback with a provided configuration. 
        /// </summary>
        /// <remarks>
        /// This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestRegistrationPostbackWithHttpInfo (PostBackSchema postBack);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get registration launch link. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to launch this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildRegistrationLaunchLinkAsync (string registrationId, LaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get registration launch link. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to launch this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildRegistrationLaunchLinkAsyncWithHttpInfo (string registrationId, LaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new instance for this registration specified by the registration ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateNewRegistrationInstanceAsync (string registrationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new instance for this registration specified by the registration ID. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateNewRegistrationInstanceAsyncWithHttpInfo (string registrationId);
        /// <summary>
        /// Create a registration. 
        /// </summary>
        /// <remarks>
        /// This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRegistrationAsync (CreateRegistrationSchema registration, int? courseVersion = null);

        /// <summary>
        /// Create a registration. 
        /// </summary>
        /// <remarks>
        /// This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRegistrationAsyncWithHttpInfo (CreateRegistrationSchema registration, int? courseVersion = null);
        /// <summary>
        /// Delete a registration. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationAsync (string registrationId);

        /// <summary>
        /// Delete a registration. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationAsyncWithHttpInfo (string registrationId);
        /// <summary>
        /// Clear a registration configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationConfigurationSettingAsync (string registrationId, string settingId);

        /// <summary>
        /// Clear a registration configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationConfigurationSettingAsyncWithHttpInfo (string registrationId, string settingId);
        /// <summary>
        /// Delete the global data of a registration. 
        /// </summary>
        /// <remarks>
        /// Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationGlobalDataAsync (string registrationId);

        /// <summary>
        /// Delete the global data of a registration. 
        /// </summary>
        /// <remarks>
        /// Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationGlobalDataAsyncWithHttpInfo (string registrationId);
        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <remarks>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationInstanceAsync (string registrationId, int? instanceId);

        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <remarks>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationInstanceAsyncWithHttpInfo (string registrationId, int? instanceId);
        /// <summary>
        /// Clear a configuration for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationInstanceConfigurationSettingAsync (string registrationId, int? instanceId, string settingId);

        /// <summary>
        /// Clear a configuration for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationInstanceConfigurationSettingAsyncWithHttpInfo (string registrationId, int? instanceId, string settingId);
        /// <summary>
        /// Reset a registration. 
        /// </summary>
        /// <remarks>
        /// This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationProgressAsync (string registrationId);

        /// <summary>
        /// Reset a registration. 
        /// </summary>
        /// <remarks>
        /// This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationProgressAsyncWithHttpInfo (string registrationId);
        /// <summary>
        /// Delete tags from a registration. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRegistrationTagsAsync (string registrationId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a registration. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationTagsAsyncWithHttpInfo (string registrationId, TagListSchema tags);
        /// <summary>
        /// See if a registration exists. 
        /// </summary>
        /// <remarks>
        /// This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetRegistrationAsync (string registrationId);

        /// <summary>
        /// See if a registration exists. 
        /// </summary>
        /// <remarks>
        /// This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRegistrationAsyncWithHttpInfo (string registrationId);
        /// <summary>
        /// Get registration configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetRegistrationConfigurationAsync (string registrationId, bool? includeMetadata = null);

        /// <summary>
        /// Get registration configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetRegistrationConfigurationAsyncWithHttpInfo (string registrationId, bool? includeMetadata = null);
        /// <summary>
        /// Get configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetRegistrationInstanceConfigurationAsync (string registrationId, int? instanceId, bool? includeMetadata = null);

        /// <summary>
        /// Get configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetRegistrationInstanceConfigurationAsyncWithHttpInfo (string registrationId, int? instanceId, bool? includeMetadata = null);
        /// <summary>
        /// Get launch history for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of the launches of the specified instance of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of LaunchHistoryListSchema</returns>
        System.Threading.Tasks.Task<LaunchHistoryListSchema> GetRegistrationInstanceLaunchHistoryAsync (string registrationId, int? instanceId, bool? includeHistoryLog = null);

        /// <summary>
        /// Get launch history for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of the launches of the specified instance of this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of ApiResponse (LaunchHistoryListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchHistoryListSchema>> GetRegistrationInstanceLaunchHistoryAsyncWithHttpInfo (string registrationId, int? instanceId, bool? includeHistoryLog = null);
        /// <summary>
        /// Get details of an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of RegistrationSchema</returns>
        System.Threading.Tasks.Task<RegistrationSchema> GetRegistrationInstanceProgressAsync (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);

        /// <summary>
        /// Get details of an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistrationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationSchema>> GetRegistrationInstanceProgressAsyncWithHttpInfo (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);
        /// <summary>
        /// Get xAPI statements for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetRegistrationInstanceStatementsAsync (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for an instance of a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetRegistrationInstanceStatementsAsyncWithHttpInfo (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get all instances of a registration. 
        /// </summary>
        /// <remarks>
        /// Get all the instances of this the registration specified by the registration ID 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of RegistrationListSchema</returns>
        System.Threading.Tasks.Task<RegistrationListSchema> GetRegistrationInstancesAsync (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);

        /// <summary>
        /// Get all instances of a registration. 
        /// </summary>
        /// <remarks>
        /// Get all the instances of this the registration specified by the registration ID 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistrationListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationListSchema>> GetRegistrationInstancesAsyncWithHttpInfo (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);
        /// <summary>
        /// Get launch history for a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of this registration&#39;s launches. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of LaunchHistoryListSchema</returns>
        System.Threading.Tasks.Task<LaunchHistoryListSchema> GetRegistrationLaunchHistoryAsync (string registrationId, bool? includeHistoryLog = null);

        /// <summary>
        /// Get launch history for a registration. 
        /// </summary>
        /// <remarks>
        /// Returns history of this registration&#39;s launches. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of ApiResponse (LaunchHistoryListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchHistoryListSchema>> GetRegistrationLaunchHistoryAsyncWithHttpInfo (string registrationId, bool? includeHistoryLog = null);
        /// <summary>
        /// Get details of a registration. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of RegistrationSchema</returns>
        System.Threading.Tasks.Task<RegistrationSchema> GetRegistrationProgressAsync (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);

        /// <summary>
        /// Get details of a registration. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistrationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationSchema>> GetRegistrationProgressAsyncWithHttpInfo (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null);
        /// <summary>
        /// Get xAPI statements for a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetRegistrationStatementsAsync (string registrationId, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a registration. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetRegistrationStatementsAsyncWithHttpInfo (string registrationId, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get tags for a registration. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags applied to this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetRegistrationTagsAsync (string registrationId);

        /// <summary>
        /// Get tags for a registration. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags applied to this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetRegistrationTagsAsyncWithHttpInfo (string registrationId);
        /// <summary>
        /// Get a list of all registrations. 
        /// </summary>
        /// <remarks>
        /// Gets a list of registrations including a summary of the status of each registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of RegistrationListSchema</returns>
        System.Threading.Tasks.Task<RegistrationListSchema> GetRegistrationsAsync (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null);

        /// <summary>
        /// Get a list of all registrations. 
        /// </summary>
        /// <remarks>
        /// Gets a list of registrations including a summary of the status of each registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of ApiResponse (RegistrationListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationListSchema>> GetRegistrationsAsyncWithHttpInfo (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null);
        /// <summary>
        /// Set tags on a registration. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutRegistrationTagsAsync (string registrationId, TagListSchema tags);

        /// <summary>
        /// Set tags on a registration. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutRegistrationTagsAsyncWithHttpInfo (string registrationId, TagListSchema tags);
        /// <summary>
        /// Set tags on registrations. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided registrations. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutRegistrationTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Set tags on registrations. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided registrations. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutRegistrationTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Set registration configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetRegistrationConfigurationAsync (string registrationId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set registration configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRegistrationConfigurationAsyncWithHttpInfo (string registrationId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Set configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetRegistrationInstanceConfigurationAsync (string registrationId, int? instanceId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration for instance of registration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this registration instance. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRegistrationInstanceConfigurationAsyncWithHttpInfo (string registrationId, int? instanceId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Send a test postback with a provided configuration. 
        /// </summary>
        /// <remarks>
        /// This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestRegistrationPostbackAsync (PostBackSchema postBack);

        /// <summary>
        /// Send a test postback with a provided configuration. 
        /// </summary>
        /// <remarks>
        /// This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestRegistrationPostbackAsyncWithHttpInfo (PostBackSchema postBack);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegistrationApi : IRegistrationApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistrationApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegistrationApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get registration launch link.  Returns the link to use to launch this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildRegistrationLaunchLink (string registrationId, LaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildRegistrationLaunchLinkWithHttpInfo(registrationId, launchLinkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get registration launch link.  Returns the link to use to launch this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildRegistrationLaunchLinkWithHttpInfo (string registrationId, LaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->BuildRegistrationLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling RegistrationApi->BuildRegistrationLaunchLink");

            var localVarPath = "/registrations/{registrationId}/launchLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildRegistrationLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get registration launch link.  Returns the link to use to launch this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildRegistrationLaunchLinkAsync (string registrationId, LaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildRegistrationLaunchLinkAsyncWithHttpInfo(registrationId, launchLinkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get registration launch link.  Returns the link to use to launch this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildRegistrationLaunchLinkAsyncWithHttpInfo (string registrationId, LaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->BuildRegistrationLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling RegistrationApi->BuildRegistrationLaunchLink");

            var localVarPath = "/registrations/{registrationId}/launchLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildRegistrationLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        ///  Create a new instance for this registration specified by the registration ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        public void CreateNewRegistrationInstance (string registrationId)
        {
             CreateNewRegistrationInstanceWithHttpInfo(registrationId);
        }

        /// <summary>
        ///  Create a new instance for this registration specified by the registration ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateNewRegistrationInstanceWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->CreateNewRegistrationInstance");

            var localVarPath = "/registrations/{registrationId}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNewRegistrationInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Create a new instance for this registration specified by the registration ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateNewRegistrationInstanceAsync (string registrationId)
        {
             await CreateNewRegistrationInstanceAsyncWithHttpInfo(registrationId);

        }

        /// <summary>
        ///  Create a new instance for this registration specified by the registration ID. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateNewRegistrationInstanceAsyncWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->CreateNewRegistrationInstance");

            var localVarPath = "/registrations/{registrationId}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNewRegistrationInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a registration.  This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns></returns>
        public void CreateRegistration (CreateRegistrationSchema registration, int? courseVersion = null)
        {
             CreateRegistrationWithHttpInfo(registration, courseVersion);
        }

        /// <summary>
        /// Create a registration.  This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRegistrationWithHttpInfo (CreateRegistrationSchema registration, int? courseVersion = null)
        {
            // verify the required parameter 'registration' is set
            if (registration == null)
                throw new ApiException(400, "Missing required parameter 'registration' when calling RegistrationApi->CreateRegistration");

            var localVarPath = "/registrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseVersion", courseVersion)); // query parameter
            if (registration != null && registration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registration; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a registration.  This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRegistrationAsync (CreateRegistrationSchema registration, int? courseVersion = null)
        {
             await CreateRegistrationAsyncWithHttpInfo(registration, courseVersion);

        }

        /// <summary>
        /// Create a registration.  This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registration"></param>
        /// <param name="courseVersion">The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRegistrationAsyncWithHttpInfo (CreateRegistrationSchema registration, int? courseVersion = null)
        {
            // verify the required parameter 'registration' is set
            if (registration == null)
                throw new ApiException(400, "Missing required parameter 'registration' when calling RegistrationApi->CreateRegistration");

            var localVarPath = "/registrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseVersion", courseVersion)); // query parameter
            if (registration != null && registration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registration; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a registration.  Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        public void DeleteRegistration (string registrationId)
        {
             DeleteRegistrationWithHttpInfo(registrationId);
        }

        /// <summary>
        /// Delete a registration.  Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistration");

            var localVarPath = "/registrations/{registrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a registration.  Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationAsync (string registrationId)
        {
             await DeleteRegistrationAsyncWithHttpInfo(registrationId);

        }

        /// <summary>
        /// Delete a registration.  Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationAsyncWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistration");

            var localVarPath = "/registrations/{registrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a registration configuration.  Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteRegistrationConfigurationSetting (string registrationId, string settingId)
        {
             DeleteRegistrationConfigurationSettingWithHttpInfo(registrationId, settingId);
        }

        /// <summary>
        /// Clear a registration configuration.  Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationConfigurationSettingWithHttpInfo (string registrationId, string settingId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling RegistrationApi->DeleteRegistrationConfigurationSetting");

            var localVarPath = "/registrations/{registrationId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a registration configuration.  Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationConfigurationSettingAsync (string registrationId, string settingId)
        {
             await DeleteRegistrationConfigurationSettingAsyncWithHttpInfo(registrationId, settingId);

        }

        /// <summary>
        /// Clear a registration configuration.  Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationConfigurationSettingAsyncWithHttpInfo (string registrationId, string settingId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling RegistrationApi->DeleteRegistrationConfigurationSetting");

            var localVarPath = "/registrations/{registrationId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the global data of a registration.  Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        public void DeleteRegistrationGlobalData (string registrationId)
        {
             DeleteRegistrationGlobalDataWithHttpInfo(registrationId);
        }

        /// <summary>
        /// Delete the global data of a registration.  Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationGlobalDataWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationGlobalData");

            var localVarPath = "/registrations/{registrationId}/globalData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationGlobalData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the global data of a registration.  Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationGlobalDataAsync (string registrationId)
        {
             await DeleteRegistrationGlobalDataAsyncWithHttpInfo(registrationId);

        }

        /// <summary>
        /// Delete the global data of a registration.  Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationGlobalDataAsyncWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationGlobalData");

            var localVarPath = "/registrations/{registrationId}/globalData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationGlobalData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns></returns>
        public void DeleteRegistrationInstance (string registrationId, int? instanceId)
        {
             DeleteRegistrationInstanceWithHttpInfo(registrationId, instanceId);
        }

        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationInstanceWithHttpInfo (string registrationId, int? instanceId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->DeleteRegistrationInstance");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationInstanceAsync (string registrationId, int? instanceId)
        {
             await DeleteRegistrationInstanceAsyncWithHttpInfo(registrationId, instanceId);

        }

        /// <summary>
        /// Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  Delete instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;.  If this is the only existing instance of this registration, the registration will be deleted in its entirety along with any associated data. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationInstanceAsyncWithHttpInfo (string registrationId, int? instanceId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationInstance");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->DeleteRegistrationInstance");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a configuration for an instance of a registration.  Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteRegistrationInstanceConfigurationSetting (string registrationId, int? instanceId, string settingId)
        {
             DeleteRegistrationInstanceConfigurationSettingWithHttpInfo(registrationId, instanceId, settingId);
        }

        /// <summary>
        /// Clear a configuration for an instance of a registration.  Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationInstanceConfigurationSettingWithHttpInfo (string registrationId, int? instanceId, string settingId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationInstanceConfigurationSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->DeleteRegistrationInstanceConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling RegistrationApi->DeleteRegistrationInstanceConfigurationSetting");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationInstanceConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a configuration for an instance of a registration.  Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationInstanceConfigurationSettingAsync (string registrationId, int? instanceId, string settingId)
        {
             await DeleteRegistrationInstanceConfigurationSettingAsyncWithHttpInfo(registrationId, instanceId, settingId);

        }

        /// <summary>
        /// Clear a configuration for an instance of a registration.  Clears the &#x60;settingId&#x60; value for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationInstanceConfigurationSettingAsyncWithHttpInfo (string registrationId, int? instanceId, string settingId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationInstanceConfigurationSetting");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->DeleteRegistrationInstanceConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling RegistrationApi->DeleteRegistrationInstanceConfigurationSetting");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationInstanceConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset a registration.  This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        public void DeleteRegistrationProgress (string registrationId)
        {
             DeleteRegistrationProgressWithHttpInfo(registrationId);
        }

        /// <summary>
        /// Reset a registration.  This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationProgressWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationProgress");

            var localVarPath = "/registrations/{registrationId}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset a registration.  This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationProgressAsync (string registrationId)
        {
             await DeleteRegistrationProgressAsyncWithHttpInfo(registrationId);

        }

        /// <summary>
        /// Reset a registration.  This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationProgressAsyncWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationProgress");

            var localVarPath = "/registrations/{registrationId}/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a registration.  Delete the provided tags for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteRegistrationTags (string registrationId, TagListSchema tags)
        {
             DeleteRegistrationTagsWithHttpInfo(registrationId, tags);
        }

        /// <summary>
        /// Delete tags from a registration.  Delete the provided tags for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRegistrationTagsWithHttpInfo (string registrationId, TagListSchema tags)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling RegistrationApi->DeleteRegistrationTags");

            var localVarPath = "/registrations/{registrationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a registration.  Delete the provided tags for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRegistrationTagsAsync (string registrationId, TagListSchema tags)
        {
             await DeleteRegistrationTagsAsyncWithHttpInfo(registrationId, tags);

        }

        /// <summary>
        /// Delete tags from a registration.  Delete the provided tags for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRegistrationTagsAsyncWithHttpInfo (string registrationId, TagListSchema tags)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->DeleteRegistrationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling RegistrationApi->DeleteRegistrationTags");

            var localVarPath = "/registrations/{registrationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRegistrationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// See if a registration exists.  This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns></returns>
        public void GetRegistration (string registrationId)
        {
             GetRegistrationWithHttpInfo(registrationId);
        }

        /// <summary>
        /// See if a registration exists.  This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetRegistrationWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistration");

            var localVarPath = "/registrations/{registrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// See if a registration exists.  This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetRegistrationAsync (string registrationId)
        {
             await GetRegistrationAsyncWithHttpInfo(registrationId);

        }

        /// <summary>
        /// See if a registration exists.  This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRegistrationAsyncWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistration");

            var localVarPath = "/registrations/{registrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get registration configuration.  Returns all configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetRegistrationConfiguration (string registrationId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetRegistrationConfigurationWithHttpInfo(registrationId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get registration configuration.  Returns all configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetRegistrationConfigurationWithHttpInfo (string registrationId, bool? includeMetadata = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationConfiguration");

            var localVarPath = "/registrations/{registrationId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get registration configuration.  Returns all configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetRegistrationConfigurationAsync (string registrationId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetRegistrationConfigurationAsyncWithHttpInfo(registrationId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get registration configuration.  Returns all configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetRegistrationConfigurationAsyncWithHttpInfo (string registrationId, bool? includeMetadata = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationConfiguration");

            var localVarPath = "/registrations/{registrationId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get configuration for instance of registration.  Returns all configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetRegistrationInstanceConfiguration (string registrationId, int? instanceId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetRegistrationInstanceConfigurationWithHttpInfo(registrationId, instanceId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get configuration for instance of registration.  Returns all configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetRegistrationInstanceConfigurationWithHttpInfo (string registrationId, int? instanceId, bool? includeMetadata = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceConfiguration");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceConfiguration");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get configuration for instance of registration.  Returns all configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetRegistrationInstanceConfigurationAsync (string registrationId, int? instanceId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetRegistrationInstanceConfigurationAsyncWithHttpInfo(registrationId, instanceId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get configuration for instance of registration.  Returns all configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetRegistrationInstanceConfigurationAsyncWithHttpInfo (string registrationId, int? instanceId, bool? includeMetadata = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceConfiguration");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceConfiguration");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get launch history for an instance of a registration.  Returns history of the launches of the specified instance of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>LaunchHistoryListSchema</returns>
        public LaunchHistoryListSchema GetRegistrationInstanceLaunchHistory (string registrationId, int? instanceId, bool? includeHistoryLog = null)
        {
             ApiResponse<LaunchHistoryListSchema> localVarResponse = GetRegistrationInstanceLaunchHistoryWithHttpInfo(registrationId, instanceId, includeHistoryLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get launch history for an instance of a registration.  Returns history of the launches of the specified instance of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>ApiResponse of LaunchHistoryListSchema</returns>
        public ApiResponse< LaunchHistoryListSchema > GetRegistrationInstanceLaunchHistoryWithHttpInfo (string registrationId, int? instanceId, bool? includeHistoryLog = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceLaunchHistory");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceLaunchHistory");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/launchHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (includeHistoryLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistoryLog", includeHistoryLog)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceLaunchHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchHistoryListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchHistoryListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchHistoryListSchema)));
        }

        /// <summary>
        /// Get launch history for an instance of a registration.  Returns history of the launches of the specified instance of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of LaunchHistoryListSchema</returns>
        public async System.Threading.Tasks.Task<LaunchHistoryListSchema> GetRegistrationInstanceLaunchHistoryAsync (string registrationId, int? instanceId, bool? includeHistoryLog = null)
        {
             ApiResponse<LaunchHistoryListSchema> localVarResponse = await GetRegistrationInstanceLaunchHistoryAsyncWithHttpInfo(registrationId, instanceId, includeHistoryLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get launch history for an instance of a registration.  Returns history of the launches of the specified instance of this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of ApiResponse (LaunchHistoryListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchHistoryListSchema>> GetRegistrationInstanceLaunchHistoryAsyncWithHttpInfo (string registrationId, int? instanceId, bool? includeHistoryLog = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceLaunchHistory");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceLaunchHistory");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/launchHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (includeHistoryLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistoryLog", includeHistoryLog)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceLaunchHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchHistoryListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchHistoryListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchHistoryListSchema)));
        }

        /// <summary>
        /// Get details of an instance of a registration.  Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>RegistrationSchema</returns>
        public RegistrationSchema GetRegistrationInstanceProgress (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
             ApiResponse<RegistrationSchema> localVarResponse = GetRegistrationInstanceProgressWithHttpInfo(registrationId, instanceId, includeChildResults, includeInteractionsAndObjectives, includeRuntime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an instance of a registration.  Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>ApiResponse of RegistrationSchema</returns>
        public ApiResponse< RegistrationSchema > GetRegistrationInstanceProgressWithHttpInfo (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceProgress");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceProgress");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationSchema)));
        }

        /// <summary>
        /// Get details of an instance of a registration.  Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of RegistrationSchema</returns>
        public async System.Threading.Tasks.Task<RegistrationSchema> GetRegistrationInstanceProgressAsync (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
             ApiResponse<RegistrationSchema> localVarResponse = await GetRegistrationInstanceProgressAsyncWithHttpInfo(registrationId, instanceId, includeChildResults, includeInteractionsAndObjectives, includeRuntime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of an instance of a registration.  Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistrationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationSchema>> GetRegistrationInstanceProgressAsyncWithHttpInfo (string registrationId, int? instanceId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceProgress");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceProgress");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationSchema)));
        }

        /// <summary>
        /// Get xAPI statements for an instance of a registration.  Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetRegistrationInstanceStatements (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetRegistrationInstanceStatementsWithHttpInfo(registrationId, instanceId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for an instance of a registration.  Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetRegistrationInstanceStatementsWithHttpInfo (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceStatements");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceStatements");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get xAPI statements for an instance of a registration.  Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetRegistrationInstanceStatementsAsync (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetRegistrationInstanceStatementsAsyncWithHttpInfo(registrationId, instanceId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for an instance of a registration.  Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetRegistrationInstanceStatementsAsyncWithHttpInfo (string registrationId, int? instanceId, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstanceStatements");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->GetRegistrationInstanceStatements");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstanceStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get all instances of a registration.  Get all the instances of this the registration specified by the registration ID 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>RegistrationListSchema</returns>
        public RegistrationListSchema GetRegistrationInstances (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
             ApiResponse<RegistrationListSchema> localVarResponse = GetRegistrationInstancesWithHttpInfo(registrationId, until, since, more, includeChildResults, includeInteractionsAndObjectives, includeRuntime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all instances of a registration.  Get all the instances of this the registration specified by the registration ID 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>ApiResponse of RegistrationListSchema</returns>
        public ApiResponse< RegistrationListSchema > GetRegistrationInstancesWithHttpInfo (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstances");

            var localVarPath = "/registrations/{registrationId}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationListSchema)));
        }

        /// <summary>
        /// Get all instances of a registration.  Get all the instances of this the registration specified by the registration ID 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of RegistrationListSchema</returns>
        public async System.Threading.Tasks.Task<RegistrationListSchema> GetRegistrationInstancesAsync (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
             ApiResponse<RegistrationListSchema> localVarResponse = await GetRegistrationInstancesAsyncWithHttpInfo(registrationId, until, since, more, includeChildResults, includeInteractionsAndObjectives, includeRuntime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all instances of a registration.  Get all the instances of this the registration specified by the registration ID 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistrationListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationListSchema>> GetRegistrationInstancesAsyncWithHttpInfo (string registrationId, DateTime? until = null, DateTime? since = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationInstances");

            var localVarPath = "/registrations/{registrationId}/instances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationInstances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationListSchema)));
        }

        /// <summary>
        /// Get launch history for a registration.  Returns history of this registration&#39;s launches. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>LaunchHistoryListSchema</returns>
        public LaunchHistoryListSchema GetRegistrationLaunchHistory (string registrationId, bool? includeHistoryLog = null)
        {
             ApiResponse<LaunchHistoryListSchema> localVarResponse = GetRegistrationLaunchHistoryWithHttpInfo(registrationId, includeHistoryLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get launch history for a registration.  Returns history of this registration&#39;s launches. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>ApiResponse of LaunchHistoryListSchema</returns>
        public ApiResponse< LaunchHistoryListSchema > GetRegistrationLaunchHistoryWithHttpInfo (string registrationId, bool? includeHistoryLog = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationLaunchHistory");

            var localVarPath = "/registrations/{registrationId}/launchHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (includeHistoryLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistoryLog", includeHistoryLog)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationLaunchHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchHistoryListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchHistoryListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchHistoryListSchema)));
        }

        /// <summary>
        /// Get launch history for a registration.  Returns history of this registration&#39;s launches. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of LaunchHistoryListSchema</returns>
        public async System.Threading.Tasks.Task<LaunchHistoryListSchema> GetRegistrationLaunchHistoryAsync (string registrationId, bool? includeHistoryLog = null)
        {
             ApiResponse<LaunchHistoryListSchema> localVarResponse = await GetRegistrationLaunchHistoryAsyncWithHttpInfo(registrationId, includeHistoryLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get launch history for a registration.  Returns history of this registration&#39;s launches. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeHistoryLog">Whether to include the history log in the launch history (optional, default to false)</param>
        /// <returns>Task of ApiResponse (LaunchHistoryListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchHistoryListSchema>> GetRegistrationLaunchHistoryAsyncWithHttpInfo (string registrationId, bool? includeHistoryLog = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationLaunchHistory");

            var localVarPath = "/registrations/{registrationId}/launchHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (includeHistoryLog != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeHistoryLog", includeHistoryLog)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationLaunchHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchHistoryListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchHistoryListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchHistoryListSchema)));
        }

        /// <summary>
        /// Get details of a registration.  Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>RegistrationSchema</returns>
        public RegistrationSchema GetRegistrationProgress (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
             ApiResponse<RegistrationSchema> localVarResponse = GetRegistrationProgressWithHttpInfo(registrationId, includeChildResults, includeInteractionsAndObjectives, includeRuntime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of a registration.  Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>ApiResponse of RegistrationSchema</returns>
        public ApiResponse< RegistrationSchema > GetRegistrationProgressWithHttpInfo (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationProgress");

            var localVarPath = "/registrations/{registrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationSchema)));
        }

        /// <summary>
        /// Get details of a registration.  Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of RegistrationSchema</returns>
        public async System.Threading.Tasks.Task<RegistrationSchema> GetRegistrationProgressAsync (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
             ApiResponse<RegistrationSchema> localVarResponse = await GetRegistrationProgressAsyncWithHttpInfo(registrationId, includeChildResults, includeInteractionsAndObjectives, includeRuntime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of a registration.  Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistrationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationSchema>> GetRegistrationProgressAsyncWithHttpInfo (string registrationId, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationProgress");

            var localVarPath = "/registrations/{registrationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationSchema)));
        }

        /// <summary>
        /// Get xAPI statements for a registration.  Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetRegistrationStatements (string registrationId, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetRegistrationStatementsWithHttpInfo(registrationId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for a registration.  Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetRegistrationStatementsWithHttpInfo (string registrationId, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationStatements");

            var localVarPath = "/registrations/{registrationId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get xAPI statements for a registration.  Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetRegistrationStatementsAsync (string registrationId, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetRegistrationStatementsAsyncWithHttpInfo(registrationId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for a registration.  Get xAPI statements for &#x60;registrationId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetRegistrationStatementsAsyncWithHttpInfo (string registrationId, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationStatements");

            var localVarPath = "/registrations/{registrationId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get tags for a registration.  Get a list of the tags applied to this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetRegistrationTags (string registrationId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetRegistrationTagsWithHttpInfo(registrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags for a registration.  Get a list of the tags applied to this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetRegistrationTagsWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationTags");

            var localVarPath = "/registrations/{registrationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get tags for a registration.  Get a list of the tags applied to this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetRegistrationTagsAsync (string registrationId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetRegistrationTagsAsyncWithHttpInfo(registrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags for a registration.  Get a list of the tags applied to this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetRegistrationTagsAsyncWithHttpInfo (string registrationId)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->GetRegistrationTags");

            var localVarPath = "/registrations/{registrationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get a list of all registrations.  Gets a list of registrations including a summary of the status of each registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>RegistrationListSchema</returns>
        public RegistrationListSchema GetRegistrations (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null)
        {
             ApiResponse<RegistrationListSchema> localVarResponse = GetRegistrationsWithHttpInfo(courseId, learnerId, since, until, more, includeChildResults, includeInteractionsAndObjectives, includeRuntime, tags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all registrations.  Gets a list of registrations including a summary of the status of each registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of RegistrationListSchema</returns>
        public ApiResponse< RegistrationListSchema > GetRegistrationsWithHttpInfo (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null)
        {

            var localVarPath = "/registrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationListSchema)));
        }

        /// <summary>
        /// Get a list of all registrations.  Gets a list of registrations including a summary of the status of each registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of RegistrationListSchema</returns>
        public async System.Threading.Tasks.Task<RegistrationListSchema> GetRegistrationsAsync (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null)
        {
             ApiResponse<RegistrationListSchema> localVarResponse = await GetRegistrationsAsyncWithHttpInfo(courseId, learnerId, since, until, more, includeChildResults, includeInteractionsAndObjectives, includeRuntime, tags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all registrations.  Gets a list of registrations including a summary of the status of each registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Only registrations for the specified course id will be included. (optional)</param>
        /// <param name="learnerId">Only registrations for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="includeChildResults">Include information about each learning object, not just the top level in the results (optional, default to false)</param>
        /// <param name="includeInteractionsAndObjectives">Include interactions and objectives in the results (optional, default to false)</param>
        /// <param name="includeRuntime">Include runtime details in the results (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of ApiResponse (RegistrationListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationListSchema>> GetRegistrationsAsyncWithHttpInfo (string courseId = null, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null, bool? includeChildResults = null, bool? includeInteractionsAndObjectives = null, bool? includeRuntime = null, List<string> tags = null)
        {

            var localVarPath = "/registrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeChildResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeChildResults", includeChildResults)); // query parameter
            if (includeInteractionsAndObjectives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInteractionsAndObjectives", includeInteractionsAndObjectives)); // query parameter
            if (includeRuntime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRuntime", includeRuntime)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRegistrations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationListSchema)));
        }

        /// <summary>
        /// Set tags on a registration.  Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutRegistrationTags (string registrationId, TagListSchema tags)
        {
             PutRegistrationTagsWithHttpInfo(registrationId, tags);
        }

        /// <summary>
        /// Set tags on a registration.  Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutRegistrationTagsWithHttpInfo (string registrationId, TagListSchema tags)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->PutRegistrationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling RegistrationApi->PutRegistrationTags");

            var localVarPath = "/registrations/{registrationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRegistrationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set tags on a registration.  Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutRegistrationTagsAsync (string registrationId, TagListSchema tags)
        {
             await PutRegistrationTagsAsyncWithHttpInfo(registrationId, tags);

        }

        /// <summary>
        /// Set tags on a registration.  Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutRegistrationTagsAsyncWithHttpInfo (string registrationId, TagListSchema tags)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->PutRegistrationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling RegistrationApi->PutRegistrationTags");

            var localVarPath = "/registrations/{registrationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRegistrationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set tags on registrations.  Sets all of the provided tags on all of the provided registrations. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns></returns>
        public void PutRegistrationTagsBatch (BatchTagsSchema batch)
        {
             PutRegistrationTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Set tags on registrations.  Sets all of the provided tags on all of the provided registrations. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutRegistrationTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling RegistrationApi->PutRegistrationTagsBatch");

            var localVarPath = "/registrations/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRegistrationTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set tags on registrations.  Sets all of the provided tags on all of the provided registrations. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutRegistrationTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutRegistrationTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Set tags on registrations.  Sets all of the provided tags on all of the provided registrations. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutRegistrationTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling RegistrationApi->PutRegistrationTagsBatch");

            var localVarPath = "/registrations/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRegistrationTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set registration configuration.  Set configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetRegistrationConfiguration (string registrationId, SettingsPostSchema configurationSettings)
        {
             SetRegistrationConfigurationWithHttpInfo(registrationId, configurationSettings);
        }

        /// <summary>
        /// Set registration configuration.  Set configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetRegistrationConfigurationWithHttpInfo (string registrationId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->SetRegistrationConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling RegistrationApi->SetRegistrationConfiguration");

            var localVarPath = "/registrations/{registrationId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetRegistrationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set registration configuration.  Set configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetRegistrationConfigurationAsync (string registrationId, SettingsPostSchema configurationSettings)
        {
             await SetRegistrationConfigurationAsyncWithHttpInfo(registrationId, configurationSettings);

        }

        /// <summary>
        /// Set registration configuration.  Set configuration settings for this registration. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetRegistrationConfigurationAsyncWithHttpInfo (string registrationId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->SetRegistrationConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling RegistrationApi->SetRegistrationConfiguration");

            var localVarPath = "/registrations/{registrationId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetRegistrationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration for instance of registration.  Set configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetRegistrationInstanceConfiguration (string registrationId, int? instanceId, SettingsPostSchema configurationSettings)
        {
             SetRegistrationInstanceConfigurationWithHttpInfo(registrationId, instanceId, configurationSettings);
        }

        /// <summary>
        /// Set configuration for instance of registration.  Set configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetRegistrationInstanceConfigurationWithHttpInfo (string registrationId, int? instanceId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->SetRegistrationInstanceConfiguration");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->SetRegistrationInstanceConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling RegistrationApi->SetRegistrationInstanceConfiguration");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetRegistrationInstanceConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration for instance of registration.  Set configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetRegistrationInstanceConfigurationAsync (string registrationId, int? instanceId, SettingsPostSchema configurationSettings)
        {
             await SetRegistrationInstanceConfigurationAsyncWithHttpInfo(registrationId, instanceId, configurationSettings);

        }

        /// <summary>
        /// Set configuration for instance of registration.  Set configuration settings for this registration instance. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registrationId">id for this registration</param>
        /// <param name="instanceId">The instance of this registration</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetRegistrationInstanceConfigurationAsyncWithHttpInfo (string registrationId, int? instanceId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'registrationId' is set
            if (registrationId == null)
                throw new ApiException(400, "Missing required parameter 'registrationId' when calling RegistrationApi->SetRegistrationInstanceConfiguration");
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
                throw new ApiException(400, "Missing required parameter 'instanceId' when calling RegistrationApi->SetRegistrationInstanceConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling RegistrationApi->SetRegistrationInstanceConfiguration");

            var localVarPath = "/registrations/{registrationId}/instances/{instanceId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registrationId != null) localVarPathParams.Add("registrationId", this.Configuration.ApiClient.ParameterToString(registrationId)); // path parameter
            if (instanceId != null) localVarPathParams.Add("instanceId", this.Configuration.ApiClient.ParameterToString(instanceId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetRegistrationInstanceConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a test postback with a provided configuration.  This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns></returns>
        public void TestRegistrationPostback (PostBackSchema postBack)
        {
             TestRegistrationPostbackWithHttpInfo(postBack);
        }

        /// <summary>
        /// Send a test postback with a provided configuration.  This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TestRegistrationPostbackWithHttpInfo (PostBackSchema postBack)
        {
            // verify the required parameter 'postBack' is set
            if (postBack == null)
                throw new ApiException(400, "Missing required parameter 'postBack' when calling RegistrationApi->TestRegistrationPostback");

            var localVarPath = "/registrations/postBackTest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postBack != null && postBack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postBack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postBack; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestRegistrationPostback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a test postback with a provided configuration.  This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestRegistrationPostbackAsync (PostBackSchema postBack)
        {
             await TestRegistrationPostbackAsyncWithHttpInfo(postBack);

        }

        /// <summary>
        /// Send a test postback with a provided configuration.  This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBack"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TestRegistrationPostbackAsyncWithHttpInfo (PostBackSchema postBack)
        {
            // verify the required parameter 'postBack' is set
            if (postBack == null)
                throw new ApiException(400, "Missing required parameter 'postBack' when calling RegistrationApi->TestRegistrationPostback");

            var localVarPath = "/registrations/postBackTest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (postBack != null && postBack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(postBack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = postBack; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestRegistrationPostback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
