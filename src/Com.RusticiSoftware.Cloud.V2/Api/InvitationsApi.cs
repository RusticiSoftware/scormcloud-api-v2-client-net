/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a private invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>InvitationSummarySchema</returns>
        InvitationSummarySchema CreatePrivateInvitation (CreatePrivateInvitationSchema privateInvitationRequest);

        /// <summary>
        /// Create a private invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>ApiResponse of InvitationSummarySchema</returns>
        ApiResponse<InvitationSummarySchema> CreatePrivateInvitationWithHttpInfo (CreatePrivateInvitationSchema privateInvitationRequest);
        /// <summary>
        /// Create a publicly accessible invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a publicly accessible invitation to a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>PublicInvitationSchema</returns>
        PublicInvitationSchema CreatePublicInvitation (CreatePublicInvitationSchema publicInvitationRequest);

        /// <summary>
        /// Create a publicly accessible invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a publicly accessible invitation to a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>ApiResponse of PublicInvitationSchema</returns>
        ApiResponse<PublicInvitationSchema> CreatePublicInvitationWithHttpInfo (CreatePublicInvitationSchema publicInvitationRequest);
        /// <summary>
        /// Delete the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Delete the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteInvitationTags (string invitationId, TagListSchema tags);

        /// <summary>
        /// Delete the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Delete the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInvitationTagsWithHttpInfo (string invitationId, TagListSchema tags);
        /// <summary>
        /// Get a list of invitation summaries.
        /// </summary>
        /// <remarks>
        /// Get a summary of all the invitations for an appId, both public and private.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>InvitationSummaryList</returns>
        InvitationSummaryList GetAllInvitations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);

        /// <summary>
        /// Get a list of invitation summaries.
        /// </summary>
        /// <remarks>
        /// Get a summary of all the invitations for an appId, both public and private.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of InvitationSummaryList</returns>
        ApiResponse<InvitationSummaryList> GetAllInvitationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);
        /// <summary>
        /// Get the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Get the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetInvitationTags (string invitationId);

        /// <summary>
        /// Get the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Get the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetInvitationTagsWithHttpInfo (string invitationId);
        /// <summary>
        /// Get a information about a private invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a private invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>PrivateInvitationSchema</returns>
        PrivateInvitationSchema GetPrivateInvitation (string invitationId, bool? includeRegistrationCount = null);

        /// <summary>
        /// Get a information about a private invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a private invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>ApiResponse of PrivateInvitationSchema</returns>
        ApiResponse<PrivateInvitationSchema> GetPrivateInvitationWithHttpInfo (string invitationId, bool? includeRegistrationCount = null);
        /// <summary>
        /// Get the status of an invitation job.
        /// </summary>
        /// <remarks>
        /// Get the status of a job to send out private invitations.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>InvitationJobStatusSchema</returns>
        InvitationJobStatusSchema GetPrivateInvitationJobStatus (string invitationId);

        /// <summary>
        /// Get the status of an invitation job.
        /// </summary>
        /// <remarks>
        /// Get the status of a job to send out private invitations.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>ApiResponse of InvitationJobStatusSchema</returns>
        ApiResponse<InvitationJobStatusSchema> GetPrivateInvitationJobStatusWithHttpInfo (string invitationId);
        /// <summary>
        /// Get a list of all private invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>PrivateInvitationList</returns>
        PrivateInvitationList GetPrivateInvitations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);

        /// <summary>
        /// Get a list of all private invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of PrivateInvitationList</returns>
        ApiResponse<PrivateInvitationList> GetPrivateInvitationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);
        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>UserInvitationList</returns>
        UserInvitationList GetPrivateUserInvitations (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);

        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of UserInvitationList</returns>
        ApiResponse<UserInvitationList> GetPrivateUserInvitationsWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);
        /// <summary>
        /// Get a information about a public invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a public invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>PublicInvitationSchema</returns>
        PublicInvitationSchema GetPublicInvitation (string invitationId, bool? includeRegistrationCount = null);

        /// <summary>
        /// Get a information about a public invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a public invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>ApiResponse of PublicInvitationSchema</returns>
        ApiResponse<PublicInvitationSchema> GetPublicInvitationWithHttpInfo (string invitationId, bool? includeRegistrationCount = null);
        /// <summary>
        /// Get a list of all public invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>PublicInvitationList</returns>
        PublicInvitationList GetPublicInvitations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);

        /// <summary>
        /// Get a list of all public invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of PublicInvitationList</returns>
        ApiResponse<PublicInvitationList> GetPublicInvitationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);
        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>UserInvitationList</returns>
        UserInvitationList GetPublicUserInvitations (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);

        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of UserInvitationList</returns>
        ApiResponse<UserInvitationList> GetPublicUserInvitationsWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);
        /// <summary>
        /// Set the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Set the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutInvitationTags (string invitationId, TagListSchema tags);

        /// <summary>
        /// Set the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Set the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutInvitationTagsWithHttpInfo (string invitationId, TagListSchema tags);
        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns></returns>
        void PutInvitationTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutInvitationTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>PrivateInvitationSchema</returns>
        PrivateInvitationSchema UpdatePrivateInvitation (string invitationId, PrivateInvitationSchema invitationUpdateSchema);

        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>ApiResponse of PrivateInvitationSchema</returns>
        ApiResponse<PrivateInvitationSchema> UpdatePrivateInvitationWithHttpInfo (string invitationId, PrivateInvitationSchema invitationUpdateSchema);
        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>PublicInvitationSchema</returns>
        PublicInvitationSchema UpdatePublicInvitation (string invitationId, PublicInvitationSchema invitationUpdateSchema);

        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>ApiResponse of PublicInvitationSchema</returns>
        ApiResponse<PublicInvitationSchema> UpdatePublicInvitationWithHttpInfo (string invitationId, PublicInvitationSchema invitationUpdateSchema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a private invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>Task of InvitationSummarySchema</returns>
        System.Threading.Tasks.Task<InvitationSummarySchema> CreatePrivateInvitationAsync (CreatePrivateInvitationSchema privateInvitationRequest);

        /// <summary>
        /// Create a private invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>Task of ApiResponse (InvitationSummarySchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationSummarySchema>> CreatePrivateInvitationAsyncWithHttpInfo (CreatePrivateInvitationSchema privateInvitationRequest);
        /// <summary>
        /// Create a publicly accessible invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a publicly accessible invitation to a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>Task of PublicInvitationSchema</returns>
        System.Threading.Tasks.Task<PublicInvitationSchema> CreatePublicInvitationAsync (CreatePublicInvitationSchema publicInvitationRequest);

        /// <summary>
        /// Create a publicly accessible invitation to a course.
        /// </summary>
        /// <remarks>
        /// Create a publicly accessible invitation to a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>Task of ApiResponse (PublicInvitationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicInvitationSchema>> CreatePublicInvitationAsyncWithHttpInfo (CreatePublicInvitationSchema publicInvitationRequest);
        /// <summary>
        /// Delete the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Delete the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInvitationTagsAsync (string invitationId, TagListSchema tags);

        /// <summary>
        /// Delete the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Delete the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvitationTagsAsyncWithHttpInfo (string invitationId, TagListSchema tags);
        /// <summary>
        /// Get a list of invitation summaries.
        /// </summary>
        /// <remarks>
        /// Get a summary of all the invitations for an appId, both public and private.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of InvitationSummaryList</returns>
        System.Threading.Tasks.Task<InvitationSummaryList> GetAllInvitationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);

        /// <summary>
        /// Get a list of invitation summaries.
        /// </summary>
        /// <remarks>
        /// Get a summary of all the invitations for an appId, both public and private.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (InvitationSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationSummaryList>> GetAllInvitationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);
        /// <summary>
        /// Get the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Get the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetInvitationTagsAsync (string invitationId);

        /// <summary>
        /// Get the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Get the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetInvitationTagsAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Get a information about a private invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a private invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of PrivateInvitationSchema</returns>
        System.Threading.Tasks.Task<PrivateInvitationSchema> GetPrivateInvitationAsync (string invitationId, bool? includeRegistrationCount = null);

        /// <summary>
        /// Get a information about a private invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a private invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PrivateInvitationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateInvitationSchema>> GetPrivateInvitationAsyncWithHttpInfo (string invitationId, bool? includeRegistrationCount = null);
        /// <summary>
        /// Get the status of an invitation job.
        /// </summary>
        /// <remarks>
        /// Get the status of a job to send out private invitations.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of InvitationJobStatusSchema</returns>
        System.Threading.Tasks.Task<InvitationJobStatusSchema> GetPrivateInvitationJobStatusAsync (string invitationId);

        /// <summary>
        /// Get the status of an invitation job.
        /// </summary>
        /// <remarks>
        /// Get the status of a job to send out private invitations.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of ApiResponse (InvitationJobStatusSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationJobStatusSchema>> GetPrivateInvitationJobStatusAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Get a list of all private invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of PrivateInvitationList</returns>
        System.Threading.Tasks.Task<PrivateInvitationList> GetPrivateInvitationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);

        /// <summary>
        /// Get a list of all private invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (PrivateInvitationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateInvitationList>> GetPrivateInvitationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);
        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of UserInvitationList</returns>
        System.Threading.Tasks.Task<UserInvitationList> GetPrivateUserInvitationsAsync (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);

        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (UserInvitationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationList>> GetPrivateUserInvitationsAsyncWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);
        /// <summary>
        /// Get a information about a public invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a public invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of PublicInvitationSchema</returns>
        System.Threading.Tasks.Task<PublicInvitationSchema> GetPublicInvitationAsync (string invitationId, bool? includeRegistrationCount = null);

        /// <summary>
        /// Get a information about a public invitation.
        /// </summary>
        /// <remarks>
        /// Get a information about a public invitation.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PublicInvitationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicInvitationSchema>> GetPublicInvitationAsyncWithHttpInfo (string invitationId, bool? includeRegistrationCount = null);
        /// <summary>
        /// Get a list of all public invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of PublicInvitationList</returns>
        System.Threading.Tasks.Task<PublicInvitationList> GetPublicInvitationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);

        /// <summary>
        /// Get a list of all public invitations.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (PublicInvitationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicInvitationList>> GetPublicInvitationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null);
        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of UserInvitationList</returns>
        System.Threading.Tasks.Task<UserInvitationList> GetPublicUserInvitationsAsync (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);

        /// <summary>
        /// Get a list of user invitations.
        /// </summary>
        /// <remarks>
        /// Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (UserInvitationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInvitationList>> GetPublicUserInvitationsAsyncWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null);
        /// <summary>
        /// Set the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Set the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutInvitationTagsAsync (string invitationId, TagListSchema tags);

        /// <summary>
        /// Set the tags for this invitation 
        /// </summary>
        /// <remarks>
        /// Set the tags for this invitation 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutInvitationTagsAsyncWithHttpInfo (string invitationId, TagListSchema tags);
        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutInvitationTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided invitations 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutInvitationTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of PrivateInvitationSchema</returns>
        System.Threading.Tasks.Task<PrivateInvitationSchema> UpdatePrivateInvitationAsync (string invitationId, PrivateInvitationSchema invitationUpdateSchema);

        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of ApiResponse (PrivateInvitationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrivateInvitationSchema>> UpdatePrivateInvitationAsyncWithHttpInfo (string invitationId, PrivateInvitationSchema invitationUpdateSchema);
        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of PublicInvitationSchema</returns>
        System.Threading.Tasks.Task<PublicInvitationSchema> UpdatePublicInvitationAsync (string invitationId, PublicInvitationSchema invitationUpdateSchema);

        /// <summary>
        /// Update attributes of this invitation.
        /// </summary>
        /// <remarks>
        /// Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of ApiResponse (PublicInvitationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicInvitationSchema>> UpdatePublicInvitationAsyncWithHttpInfo (string invitationId, PublicInvitationSchema invitationUpdateSchema);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationsApi : IInvitationsApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationsApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationsApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a private invitation to a course. Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>InvitationSummarySchema</returns>
        public InvitationSummarySchema CreatePrivateInvitation (CreatePrivateInvitationSchema privateInvitationRequest)
        {
             ApiResponse<InvitationSummarySchema> localVarResponse = CreatePrivateInvitationWithHttpInfo(privateInvitationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a private invitation to a course. Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>ApiResponse of InvitationSummarySchema</returns>
        public ApiResponse< InvitationSummarySchema > CreatePrivateInvitationWithHttpInfo (CreatePrivateInvitationSchema privateInvitationRequest)
        {
            // verify the required parameter 'privateInvitationRequest' is set
            if (privateInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'privateInvitationRequest' when calling InvitationsApi->CreatePrivateInvitation");

            var localVarPath = "/invitations/private";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (privateInvitationRequest != null && privateInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(privateInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = privateInvitationRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrivateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationSummarySchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationSummarySchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationSummarySchema)));
        }

        /// <summary>
        /// Create a private invitation to a course. Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>Task of InvitationSummarySchema</returns>
        public async System.Threading.Tasks.Task<InvitationSummarySchema> CreatePrivateInvitationAsync (CreatePrivateInvitationSchema privateInvitationRequest)
        {
             ApiResponse<InvitationSummarySchema> localVarResponse = await CreatePrivateInvitationAsyncWithHttpInfo(privateInvitationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a private invitation to a course. Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="privateInvitationRequest"></param>
        /// <returns>Task of ApiResponse (InvitationSummarySchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationSummarySchema>> CreatePrivateInvitationAsyncWithHttpInfo (CreatePrivateInvitationSchema privateInvitationRequest)
        {
            // verify the required parameter 'privateInvitationRequest' is set
            if (privateInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'privateInvitationRequest' when calling InvitationsApi->CreatePrivateInvitation");

            var localVarPath = "/invitations/private";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (privateInvitationRequest != null && privateInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(privateInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = privateInvitationRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrivateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationSummarySchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationSummarySchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationSummarySchema)));
        }

        /// <summary>
        /// Create a publicly accessible invitation to a course. Create a publicly accessible invitation to a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>PublicInvitationSchema</returns>
        public PublicInvitationSchema CreatePublicInvitation (CreatePublicInvitationSchema publicInvitationRequest)
        {
             ApiResponse<PublicInvitationSchema> localVarResponse = CreatePublicInvitationWithHttpInfo(publicInvitationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a publicly accessible invitation to a course. Create a publicly accessible invitation to a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>ApiResponse of PublicInvitationSchema</returns>
        public ApiResponse< PublicInvitationSchema > CreatePublicInvitationWithHttpInfo (CreatePublicInvitationSchema publicInvitationRequest)
        {
            // verify the required parameter 'publicInvitationRequest' is set
            if (publicInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'publicInvitationRequest' when calling InvitationsApi->CreatePublicInvitation");

            var localVarPath = "/invitations/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicInvitationRequest != null && publicInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(publicInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publicInvitationRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePublicInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationSchema)));
        }

        /// <summary>
        /// Create a publicly accessible invitation to a course. Create a publicly accessible invitation to a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>Task of PublicInvitationSchema</returns>
        public async System.Threading.Tasks.Task<PublicInvitationSchema> CreatePublicInvitationAsync (CreatePublicInvitationSchema publicInvitationRequest)
        {
             ApiResponse<PublicInvitationSchema> localVarResponse = await CreatePublicInvitationAsyncWithHttpInfo(publicInvitationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a publicly accessible invitation to a course. Create a publicly accessible invitation to a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicInvitationRequest">A description of the public invitation to be created.</param>
        /// <returns>Task of ApiResponse (PublicInvitationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicInvitationSchema>> CreatePublicInvitationAsyncWithHttpInfo (CreatePublicInvitationSchema publicInvitationRequest)
        {
            // verify the required parameter 'publicInvitationRequest' is set
            if (publicInvitationRequest == null)
                throw new ApiException(400, "Missing required parameter 'publicInvitationRequest' when calling InvitationsApi->CreatePublicInvitation");

            var localVarPath = "/invitations/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicInvitationRequest != null && publicInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(publicInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publicInvitationRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePublicInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationSchema)));
        }

        /// <summary>
        /// Delete the tags for this invitation  Delete the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteInvitationTags (string invitationId, TagListSchema tags)
        {
             DeleteInvitationTagsWithHttpInfo(invitationId, tags);
        }

        /// <summary>
        /// Delete the tags for this invitation  Delete the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInvitationTagsWithHttpInfo (string invitationId, TagListSchema tags)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->DeleteInvitationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling InvitationsApi->DeleteInvitationTags");

            var localVarPath = "/invitations/{invitationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvitationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the tags for this invitation  Delete the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInvitationTagsAsync (string invitationId, TagListSchema tags)
        {
             await DeleteInvitationTagsAsyncWithHttpInfo(invitationId, tags);

        }

        /// <summary>
        /// Delete the tags for this invitation  Delete the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInvitationTagsAsyncWithHttpInfo (string invitationId, TagListSchema tags)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->DeleteInvitationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling InvitationsApi->DeleteInvitationTags");

            var localVarPath = "/invitations/{invitationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInvitationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of invitation summaries. Get a summary of all the invitations for an appId, both public and private.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>InvitationSummaryList</returns>
        public InvitationSummaryList GetAllInvitations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {
             ApiResponse<InvitationSummaryList> localVarResponse = GetAllInvitationsWithHttpInfo(courseId, since, until, datetimeFilter, tags, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of invitation summaries. Get a summary of all the invitations for an appId, both public and private.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of InvitationSummaryList</returns>
        public ApiResponse< InvitationSummaryList > GetAllInvitationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {

            var localVarPath = "/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationSummaryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationSummaryList)));
        }

        /// <summary>
        /// Get a list of invitation summaries. Get a summary of all the invitations for an appId, both public and private.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of InvitationSummaryList</returns>
        public async System.Threading.Tasks.Task<InvitationSummaryList> GetAllInvitationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {
             ApiResponse<InvitationSummaryList> localVarResponse = await GetAllInvitationsAsyncWithHttpInfo(courseId, since, until, datetimeFilter, tags, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of invitation summaries. Get a summary of all the invitations for an appId, both public and private.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (InvitationSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationSummaryList>> GetAllInvitationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {

            var localVarPath = "/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationSummaryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationSummaryList)));
        }

        /// <summary>
        /// Get the tags for this invitation  Get the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetInvitationTags (string invitationId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetInvitationTagsWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the tags for this invitation  Get the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetInvitationTagsWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetInvitationTags");

            var localVarPath = "/invitations/{invitationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get the tags for this invitation  Get the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetInvitationTagsAsync (string invitationId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetInvitationTagsAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the tags for this invitation  Get the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetInvitationTagsAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetInvitationTags");

            var localVarPath = "/invitations/{invitationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get a information about a private invitation. Get a information about a private invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>PrivateInvitationSchema</returns>
        public PrivateInvitationSchema GetPrivateInvitation (string invitationId, bool? includeRegistrationCount = null)
        {
             ApiResponse<PrivateInvitationSchema> localVarResponse = GetPrivateInvitationWithHttpInfo(invitationId, includeRegistrationCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a information about a private invitation. Get a information about a private invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>ApiResponse of PrivateInvitationSchema</returns>
        public ApiResponse< PrivateInvitationSchema > GetPrivateInvitationWithHttpInfo (string invitationId, bool? includeRegistrationCount = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPrivateInvitation");

            var localVarPath = "/invitations/private/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateInvitationSchema)));
        }

        /// <summary>
        /// Get a information about a private invitation. Get a information about a private invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of PrivateInvitationSchema</returns>
        public async System.Threading.Tasks.Task<PrivateInvitationSchema> GetPrivateInvitationAsync (string invitationId, bool? includeRegistrationCount = null)
        {
             ApiResponse<PrivateInvitationSchema> localVarResponse = await GetPrivateInvitationAsyncWithHttpInfo(invitationId, includeRegistrationCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a information about a private invitation. Get a information about a private invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PrivateInvitationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateInvitationSchema>> GetPrivateInvitationAsyncWithHttpInfo (string invitationId, bool? includeRegistrationCount = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPrivateInvitation");

            var localVarPath = "/invitations/private/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateInvitationSchema)));
        }

        /// <summary>
        /// Get the status of an invitation job. Get the status of a job to send out private invitations.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>InvitationJobStatusSchema</returns>
        public InvitationJobStatusSchema GetPrivateInvitationJobStatus (string invitationId)
        {
             ApiResponse<InvitationJobStatusSchema> localVarResponse = GetPrivateInvitationJobStatusWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status of an invitation job. Get the status of a job to send out private invitations.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>ApiResponse of InvitationJobStatusSchema</returns>
        public ApiResponse< InvitationJobStatusSchema > GetPrivateInvitationJobStatusWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPrivateInvitationJobStatus");

            var localVarPath = "/invitations/private/{invitationId}/jobStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateInvitationJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationJobStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationJobStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationJobStatusSchema)));
        }

        /// <summary>
        /// Get the status of an invitation job. Get the status of a job to send out private invitations.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of InvitationJobStatusSchema</returns>
        public async System.Threading.Tasks.Task<InvitationJobStatusSchema> GetPrivateInvitationJobStatusAsync (string invitationId)
        {
             ApiResponse<InvitationJobStatusSchema> localVarResponse = await GetPrivateInvitationJobStatusAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the status of an invitation job. Get the status of a job to send out private invitations.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <returns>Task of ApiResponse (InvitationJobStatusSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationJobStatusSchema>> GetPrivateInvitationJobStatusAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPrivateInvitationJobStatus");

            var localVarPath = "/invitations/private/{invitationId}/jobStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateInvitationJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationJobStatusSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationJobStatusSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationJobStatusSchema)));
        }

        /// <summary>
        /// Get a list of all private invitations. Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>PrivateInvitationList</returns>
        public PrivateInvitationList GetPrivateInvitations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {
             ApiResponse<PrivateInvitationList> localVarResponse = GetPrivateInvitationsWithHttpInfo(courseId, since, until, datetimeFilter, tags, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all private invitations. Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of PrivateInvitationList</returns>
        public ApiResponse< PrivateInvitationList > GetPrivateInvitationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {

            var localVarPath = "/invitations/private";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateInvitationList)));
        }

        /// <summary>
        /// Get a list of all private invitations. Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of PrivateInvitationList</returns>
        public async System.Threading.Tasks.Task<PrivateInvitationList> GetPrivateInvitationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {
             ApiResponse<PrivateInvitationList> localVarResponse = await GetPrivateInvitationsAsyncWithHttpInfo(courseId, since, until, datetimeFilter, tags, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all private invitations. Retrieves a list of all private invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (PrivateInvitationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateInvitationList>> GetPrivateInvitationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {

            var localVarPath = "/invitations/private";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateInvitationList)));
        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>UserInvitationList</returns>
        public UserInvitationList GetPrivateUserInvitations (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
             ApiResponse<UserInvitationList> localVarResponse = GetPrivateUserInvitationsWithHttpInfo(invitationId, since, until, includeRegistrationReport, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of UserInvitationList</returns>
        public ApiResponse< UserInvitationList > GetPrivateUserInvitationsWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPrivateUserInvitations");

            var localVarPath = "/invitations/private/{invitationId}/userInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationReport", includeRegistrationReport)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateUserInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationList)));
        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of UserInvitationList</returns>
        public async System.Threading.Tasks.Task<UserInvitationList> GetPrivateUserInvitationsAsync (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
             ApiResponse<UserInvitationList> localVarResponse = await GetPrivateUserInvitationsAsyncWithHttpInfo(invitationId, since, until, includeRegistrationReport, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user to whom this invitation was sent.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (UserInvitationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationList>> GetPrivateUserInvitationsAsyncWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPrivateUserInvitations");

            var localVarPath = "/invitations/private/{invitationId}/userInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationReport", includeRegistrationReport)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrivateUserInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationList)));
        }

        /// <summary>
        /// Get a information about a public invitation. Get a information about a public invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>PublicInvitationSchema</returns>
        public PublicInvitationSchema GetPublicInvitation (string invitationId, bool? includeRegistrationCount = null)
        {
             ApiResponse<PublicInvitationSchema> localVarResponse = GetPublicInvitationWithHttpInfo(invitationId, includeRegistrationCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a information about a public invitation. Get a information about a public invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>ApiResponse of PublicInvitationSchema</returns>
        public ApiResponse< PublicInvitationSchema > GetPublicInvitationWithHttpInfo (string invitationId, bool? includeRegistrationCount = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPublicInvitation");

            var localVarPath = "/invitations/public/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationSchema)));
        }

        /// <summary>
        /// Get a information about a public invitation. Get a information about a public invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of PublicInvitationSchema</returns>
        public async System.Threading.Tasks.Task<PublicInvitationSchema> GetPublicInvitationAsync (string invitationId, bool? includeRegistrationCount = null)
        {
             ApiResponse<PublicInvitationSchema> localVarResponse = await GetPublicInvitationAsyncWithHttpInfo(invitationId, includeRegistrationCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a information about a public invitation. Get a information about a public invitation.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <returns>Task of ApiResponse (PublicInvitationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicInvitationSchema>> GetPublicInvitationAsyncWithHttpInfo (string invitationId, bool? includeRegistrationCount = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPublicInvitation");

            var localVarPath = "/invitations/public/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationSchema)));
        }

        /// <summary>
        /// Get a list of all public invitations. Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>PublicInvitationList</returns>
        public PublicInvitationList GetPublicInvitations (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {
             ApiResponse<PublicInvitationList> localVarResponse = GetPublicInvitationsWithHttpInfo(courseId, since, until, datetimeFilter, tags, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all public invitations. Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of PublicInvitationList</returns>
        public ApiResponse< PublicInvitationList > GetPublicInvitationsWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {

            var localVarPath = "/invitations/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationList)));
        }

        /// <summary>
        /// Get a list of all public invitations. Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of PublicInvitationList</returns>
        public async System.Threading.Tasks.Task<PublicInvitationList> GetPublicInvitationsAsync (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {
             ApiResponse<PublicInvitationList> localVarResponse = await GetPublicInvitationsAsyncWithHttpInfo(courseId, since, until, datetimeFilter, tags, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all public invitations. Retrieves a list of all public invitations, optionally filtered by the given parameters.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">Limit the results to invitations with courseIds that match the filter. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="datetimeFilter">A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (optional, default to updated)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (PublicInvitationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicInvitationList>> GetPublicInvitationsAsyncWithHttpInfo (string courseId = null, DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string more = null)
        {

            var localVarPath = "/invitations/public";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationList)));
        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>UserInvitationList</returns>
        public UserInvitationList GetPublicUserInvitations (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
             ApiResponse<UserInvitationList> localVarResponse = GetPublicUserInvitationsWithHttpInfo(invitationId, since, until, includeRegistrationReport, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of UserInvitationList</returns>
        public ApiResponse< UserInvitationList > GetPublicUserInvitationsWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPublicUserInvitations");

            var localVarPath = "/invitations/public/{invitationId}/userInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationReport", includeRegistrationReport)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicUserInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationList)));
        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of UserInvitationList</returns>
        public async System.Threading.Tasks.Task<UserInvitationList> GetPublicUserInvitationsAsync (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
             ApiResponse<UserInvitationList> localVarResponse = await GetPublicUserInvitationsAsyncWithHttpInfo(invitationId, since, until, includeRegistrationReport, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of user invitations. Get a list of objects which contain the specific information about each user who visited the invitation link.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationReport"> (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (UserInvitationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInvitationList>> GetPublicUserInvitationsAsyncWithHttpInfo (string invitationId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationReport = null, string more = null)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->GetPublicUserInvitations");

            var localVarPath = "/invitations/public/{invitationId}/userInvitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationReport != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationReport", includeRegistrationReport)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicUserInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInvitationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInvitationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInvitationList)));
        }

        /// <summary>
        /// Set the tags for this invitation  Set the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutInvitationTags (string invitationId, TagListSchema tags)
        {
             PutInvitationTagsWithHttpInfo(invitationId, tags);
        }

        /// <summary>
        /// Set the tags for this invitation  Set the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutInvitationTagsWithHttpInfo (string invitationId, TagListSchema tags)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->PutInvitationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling InvitationsApi->PutInvitationTags");

            var localVarPath = "/invitations/{invitationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutInvitationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the tags for this invitation  Set the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutInvitationTagsAsync (string invitationId, TagListSchema tags)
        {
             await PutInvitationTagsAsyncWithHttpInfo(invitationId, tags);

        }

        /// <summary>
        /// Set the tags for this invitation  Set the tags for this invitation 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutInvitationTagsAsyncWithHttpInfo (string invitationId, TagListSchema tags)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->PutInvitationTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling InvitationsApi->PutInvitationTags");

            var localVarPath = "/invitations/{invitationId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutInvitationTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations  Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns></returns>
        public void PutInvitationTagsBatch (BatchTagsSchema batch)
        {
             PutInvitationTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations  Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutInvitationTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling InvitationsApi->PutInvitationTagsBatch");

            var localVarPath = "/invitations/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutInvitationTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations  Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutInvitationTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutInvitationTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Sets all of the provided tags on all of the provided invitations  Sets all of the provided tags on all of the provided invitations 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutInvitationTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling InvitationsApi->PutInvitationTagsBatch");

            var localVarPath = "/invitations/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutInvitationTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>PrivateInvitationSchema</returns>
        public PrivateInvitationSchema UpdatePrivateInvitation (string invitationId, PrivateInvitationSchema invitationUpdateSchema)
        {
             ApiResponse<PrivateInvitationSchema> localVarResponse = UpdatePrivateInvitationWithHttpInfo(invitationId, invitationUpdateSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>ApiResponse of PrivateInvitationSchema</returns>
        public ApiResponse< PrivateInvitationSchema > UpdatePrivateInvitationWithHttpInfo (string invitationId, PrivateInvitationSchema invitationUpdateSchema)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->UpdatePrivateInvitation");
            // verify the required parameter 'invitationUpdateSchema' is set
            if (invitationUpdateSchema == null)
                throw new ApiException(400, "Missing required parameter 'invitationUpdateSchema' when calling InvitationsApi->UpdatePrivateInvitation");

            var localVarPath = "/invitations/private/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (invitationUpdateSchema != null && invitationUpdateSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invitationUpdateSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invitationUpdateSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrivateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateInvitationSchema)));
        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of PrivateInvitationSchema</returns>
        public async System.Threading.Tasks.Task<PrivateInvitationSchema> UpdatePrivateInvitationAsync (string invitationId, PrivateInvitationSchema invitationUpdateSchema)
        {
             ApiResponse<PrivateInvitationSchema> localVarResponse = await UpdatePrivateInvitationAsyncWithHttpInfo(invitationId, invitationUpdateSchema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of ApiResponse (PrivateInvitationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrivateInvitationSchema>> UpdatePrivateInvitationAsyncWithHttpInfo (string invitationId, PrivateInvitationSchema invitationUpdateSchema)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->UpdatePrivateInvitation");
            // verify the required parameter 'invitationUpdateSchema' is set
            if (invitationUpdateSchema == null)
                throw new ApiException(400, "Missing required parameter 'invitationUpdateSchema' when calling InvitationsApi->UpdatePrivateInvitation");

            var localVarPath = "/invitations/private/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (invitationUpdateSchema != null && invitationUpdateSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invitationUpdateSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invitationUpdateSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrivateInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrivateInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrivateInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrivateInvitationSchema)));
        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>PublicInvitationSchema</returns>
        public PublicInvitationSchema UpdatePublicInvitation (string invitationId, PublicInvitationSchema invitationUpdateSchema)
        {
             ApiResponse<PublicInvitationSchema> localVarResponse = UpdatePublicInvitationWithHttpInfo(invitationId, invitationUpdateSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>ApiResponse of PublicInvitationSchema</returns>
        public ApiResponse< PublicInvitationSchema > UpdatePublicInvitationWithHttpInfo (string invitationId, PublicInvitationSchema invitationUpdateSchema)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->UpdatePublicInvitation");
            // verify the required parameter 'invitationUpdateSchema' is set
            if (invitationUpdateSchema == null)
                throw new ApiException(400, "Missing required parameter 'invitationUpdateSchema' when calling InvitationsApi->UpdatePublicInvitation");

            var localVarPath = "/invitations/public/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (invitationUpdateSchema != null && invitationUpdateSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invitationUpdateSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invitationUpdateSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePublicInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationSchema)));
        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of PublicInvitationSchema</returns>
        public async System.Threading.Tasks.Task<PublicInvitationSchema> UpdatePublicInvitationAsync (string invitationId, PublicInvitationSchema invitationUpdateSchema)
        {
             ApiResponse<PublicInvitationSchema> localVarResponse = await UpdatePublicInvitationAsyncWithHttpInfo(invitationId, invitationUpdateSchema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update attributes of this invitation. Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">invitation id</param>
        /// <param name="invitationUpdateSchema">A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.</param>
        /// <returns>Task of ApiResponse (PublicInvitationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicInvitationSchema>> UpdatePublicInvitationAsyncWithHttpInfo (string invitationId, PublicInvitationSchema invitationUpdateSchema)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationsApi->UpdatePublicInvitation");
            // verify the required parameter 'invitationUpdateSchema' is set
            if (invitationUpdateSchema == null)
                throw new ApiException(400, "Missing required parameter 'invitationUpdateSchema' when calling InvitationsApi->UpdatePublicInvitation");

            var localVarPath = "/invitations/public/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (invitationUpdateSchema != null && invitationUpdateSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invitationUpdateSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invitationUpdateSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePublicInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicInvitationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicInvitationSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicInvitationSchema)));
        }

    }
}
