/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>ApplicationSchema</returns>
        ApplicationSchema CreateApplication (string applicationName);

        /// <summary>
        /// Create a new application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>ApiResponse of ApplicationSchema</returns>
        ApiResponse<ApplicationSchema> CreateApplicationWithHttpInfo (string applicationName);
        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>CredentialCreatedSchema</returns>
        CredentialCreatedSchema CreateCredential (string childAppId, CredentialRequestSchema credentialRequest);

        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>ApiResponse of CredentialCreatedSchema</returns>
        ApiResponse<CredentialCreatedSchema> CreateCredentialWithHttpInfo (string childAppId, CredentialRequestSchema credentialRequest);
        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateToken (TokenRequestSchema tokenRequest);

        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateTokenWithHttpInfo (TokenRequestSchema tokenRequest);
        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns></returns>
        void DeleteApplication (string childAppId);

        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationWithHttpInfo (string childAppId);
        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns></returns>
        void DeleteCredential (string childAppId, string credentialId);

        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCredentialWithHttpInfo (string childAppId, string credentialId);
        /// <summary>
        /// Returns all configuration settings for this level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetApplicationConfiguration (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null);

        /// <summary>
        /// Returns all configuration settings for this level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetApplicationConfigurationWithHttpInfo (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null);
        /// <summary>
        /// Get list of all applications in this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApplicationListSchema</returns>
        ApplicationListSchema GetApplicationList ();

        /// <summary>
        /// Get list of all applications in this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApplicationListSchema</returns>
        ApiResponse<ApplicationListSchema> GetApplicationListWithHttpInfo ();
        /// <summary>
        /// List of credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>CredentialListSchema</returns>
        CredentialListSchema GetCredentials (string childAppId);

        /// <summary>
        /// List of credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>ApiResponse of CredentialListSchema</returns>
        ApiResponse<CredentialListSchema> GetCredentialsWithHttpInfo (string childAppId);
        /// <summary>
        /// Set configuration settings for this level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns></returns>
        void SetApplicationConfiguration (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null);

        /// <summary>
        /// Set configuration settings for this level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetApplicationConfigurationWithHttpInfo (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null);
        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns></returns>
        void UpdateCredential (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate);

        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCredentialWithHttpInfo (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>Task of ApplicationSchema</returns>
        System.Threading.Tasks.Task<ApplicationSchema> CreateApplicationAsync (string applicationName);

        /// <summary>
        /// Create a new application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>Task of ApiResponse (ApplicationSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationSchema>> CreateApplicationAsyncWithHttpInfo (string applicationName);
        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>Task of CredentialCreatedSchema</returns>
        System.Threading.Tasks.Task<CredentialCreatedSchema> CreateCredentialAsync (string childAppId, CredentialRequestSchema credentialRequest);

        /// <summary>
        /// Create credential
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>Task of ApiResponse (CredentialCreatedSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialCreatedSchema>> CreateCredentialAsyncWithHttpInfo (string childAppId, CredentialRequestSchema credentialRequest);
        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateTokenAsync (TokenRequestSchema tokenRequest);

        /// <summary>
        /// Create token
        /// </summary>
        /// <remarks>
        /// Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateTokenAsyncWithHttpInfo (TokenRequestSchema tokenRequest);
        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationAsync (string childAppId);

        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfo (string childAppId);
        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCredentialAsync (string childAppId, string credentialId);

        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialAsyncWithHttpInfo (string childAppId, string credentialId);
        /// <summary>
        /// Returns all configuration settings for this level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetApplicationConfigurationAsync (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null);

        /// <summary>
        /// Returns all configuration settings for this level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetApplicationConfigurationAsyncWithHttpInfo (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null);
        /// <summary>
        /// Get list of all applications in this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApplicationListSchema</returns>
        System.Threading.Tasks.Task<ApplicationListSchema> GetApplicationListAsync ();

        /// <summary>
        /// Get list of all applications in this realm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApplicationListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationListSchema>> GetApplicationListAsyncWithHttpInfo ();
        /// <summary>
        /// List of credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of CredentialListSchema</returns>
        System.Threading.Tasks.Task<CredentialListSchema> GetCredentialsAsync (string childAppId);

        /// <summary>
        /// List of credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of ApiResponse (CredentialListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CredentialListSchema>> GetCredentialsAsyncWithHttpInfo (string childAppId);
        /// <summary>
        /// Set configuration settings for this level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetApplicationConfigurationAsync (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null);

        /// <summary>
        /// Set configuration settings for this level.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetApplicationConfigurationAsyncWithHttpInfo (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null);
        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCredentialAsync (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate);

        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCredentialAsyncWithHttpInfo (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationManagementApi : IApplicationManagementApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationManagementApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationManagementApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new application 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>ApplicationSchema</returns>
        public ApplicationSchema CreateApplication (string applicationName)
        {
             ApiResponse<ApplicationSchema> localVarResponse = CreateApplicationWithHttpInfo(applicationName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new application 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>ApiResponse of ApplicationSchema</returns>
        public ApiResponse< ApplicationSchema > CreateApplicationWithHttpInfo (string applicationName)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
                throw new ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationManagementApi->CreateApplication");

            var localVarPath = "/appManagement/applications/{applicationName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationName != null) localVarPathParams.Add("applicationName", Configuration.ApiClient.ParameterToString(applicationName)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationSchema)));
            
        }

        /// <summary>
        /// Create a new application 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>Task of ApplicationSchema</returns>
        public async System.Threading.Tasks.Task<ApplicationSchema> CreateApplicationAsync (string applicationName)
        {
             ApiResponse<ApplicationSchema> localVarResponse = await CreateApplicationAsyncWithHttpInfo(applicationName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new application 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationName"></param>
        /// <returns>Task of ApiResponse (ApplicationSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationSchema>> CreateApplicationAsyncWithHttpInfo (string applicationName)
        {
            // verify the required parameter 'applicationName' is set
            if (applicationName == null)
                throw new ApiException(400, "Missing required parameter 'applicationName' when calling ApplicationManagementApi->CreateApplication");

            var localVarPath = "/appManagement/applications/{applicationName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationName != null) localVarPathParams.Add("applicationName", Configuration.ApiClient.ParameterToString(applicationName)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationSchema)));
            
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>CredentialCreatedSchema</returns>
        public CredentialCreatedSchema CreateCredential (string childAppId, CredentialRequestSchema credentialRequest)
        {
             ApiResponse<CredentialCreatedSchema> localVarResponse = CreateCredentialWithHttpInfo(childAppId, credentialRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>ApiResponse of CredentialCreatedSchema</returns>
        public ApiResponse< CredentialCreatedSchema > CreateCredentialWithHttpInfo (string childAppId, CredentialRequestSchema credentialRequest)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->CreateCredential");
            // verify the required parameter 'credentialRequest' is set
            if (credentialRequest == null)
                throw new ApiException(400, "Missing required parameter 'credentialRequest' when calling ApplicationManagementApi->CreateCredential");

            var localVarPath = "/appManagement/{childAppId}/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter
            if (credentialRequest != null && credentialRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentialRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentialRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialCreatedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CredentialCreatedSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialCreatedSchema)));
            
        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>Task of CredentialCreatedSchema</returns>
        public async System.Threading.Tasks.Task<CredentialCreatedSchema> CreateCredentialAsync (string childAppId, CredentialRequestSchema credentialRequest)
        {
             ApiResponse<CredentialCreatedSchema> localVarResponse = await CreateCredentialAsyncWithHttpInfo(childAppId, credentialRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create credential 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialRequest"></param>
        /// <returns>Task of ApiResponse (CredentialCreatedSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CredentialCreatedSchema>> CreateCredentialAsyncWithHttpInfo (string childAppId, CredentialRequestSchema credentialRequest)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->CreateCredential");
            // verify the required parameter 'credentialRequest' is set
            if (credentialRequest == null)
                throw new ApiException(400, "Missing required parameter 'credentialRequest' when calling ApplicationManagementApi->CreateCredential");

            var localVarPath = "/appManagement/{childAppId}/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter
            if (credentialRequest != null && credentialRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentialRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentialRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialCreatedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CredentialCreatedSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialCreatedSchema)));
            
        }

        /// <summary>
        /// Create token Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateToken (TokenRequestSchema tokenRequest)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateTokenWithHttpInfo(tokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create token Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateTokenWithHttpInfo (TokenRequestSchema tokenRequest)
        {
            // verify the required parameter 'tokenRequest' is set
            if (tokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenRequest' when calling ApplicationManagementApi->CreateToken");

            var localVarPath = "/appManagement/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tokenRequest != null && tokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
            
        }

        /// <summary>
        /// Create token Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateTokenAsync (TokenRequestSchema tokenRequest)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateTokenAsyncWithHttpInfo(tokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create token Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateTokenAsyncWithHttpInfo (TokenRequestSchema tokenRequest)
        {
            // verify the required parameter 'tokenRequest' is set
            if (tokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenRequest' when calling ApplicationManagementApi->CreateToken");

            var localVarPath = "/appManagement/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tokenRequest != null && tokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
            
        }

        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns></returns>
        public void DeleteApplication (string childAppId)
        {
             DeleteApplicationWithHttpInfo(childAppId);
        }

        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationWithHttpInfo (string childAppId)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->DeleteApplication");

            var localVarPath = "/appManagement/applications/{childAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationAsync (string childAppId)
        {
             await DeleteApplicationAsyncWithHttpInfo(childAppId);

        }

        /// <summary>
        /// Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfo (string childAppId)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->DeleteApplication");

            var localVarPath = "/appManagement/applications/{childAppId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns></returns>
        public void DeleteCredential (string childAppId, string credentialId)
        {
             DeleteCredentialWithHttpInfo(childAppId, credentialId);
        }

        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCredentialWithHttpInfo (string childAppId, string credentialId)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->DeleteCredential");
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ApplicationManagementApi->DeleteCredential");

            var localVarPath = "/appManagement/{childAppId}/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter
            if (credentialId != null) localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCredentialAsync (string childAppId, string credentialId)
        {
             await DeleteCredentialAsyncWithHttpInfo(childAppId, credentialId);

        }

        /// <summary>
        /// Removes &#x60;credentialId&#x60; credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCredentialAsyncWithHttpInfo (string childAppId, string credentialId)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->DeleteCredential");
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ApplicationManagementApi->DeleteCredential");

            var localVarPath = "/appManagement/{childAppId}/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter
            if (credentialId != null) localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all configuration settings for this level 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetApplicationConfiguration (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetApplicationConfigurationWithHttpInfo(learningStandard, singleSco, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all configuration settings for this level 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetApplicationConfigurationWithHttpInfo (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null)
        {

            var localVarPath = "/appManagement/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (learningStandard != null) localVarQueryParams.Add("learningStandard", Configuration.ApiClient.ParameterToString(learningStandard)); // query parameter
            if (singleSco != null) localVarQueryParams.Add("singleSco", Configuration.ApiClient.ParameterToString(singleSco)); // query parameter
            if (includeMetadata != null) localVarQueryParams.Add("includeMetadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
            
        }

        /// <summary>
        /// Returns all configuration settings for this level 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetApplicationConfigurationAsync (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetApplicationConfigurationAsyncWithHttpInfo(learningStandard, singleSco, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all configuration settings for this level 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetApplicationConfigurationAsyncWithHttpInfo (string learningStandard = null, bool? singleSco = null, bool? includeMetadata = null)
        {

            var localVarPath = "/appManagement/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (learningStandard != null) localVarQueryParams.Add("learningStandard", Configuration.ApiClient.ParameterToString(learningStandard)); // query parameter
            if (singleSco != null) localVarQueryParams.Add("singleSco", Configuration.ApiClient.ParameterToString(singleSco)); // query parameter
            if (includeMetadata != null) localVarQueryParams.Add("includeMetadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
            
        }

        /// <summary>
        /// Get list of all applications in this realm. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApplicationListSchema</returns>
        public ApplicationListSchema GetApplicationList ()
        {
             ApiResponse<ApplicationListSchema> localVarResponse = GetApplicationListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all applications in this realm. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApplicationListSchema</returns>
        public ApiResponse< ApplicationListSchema > GetApplicationListWithHttpInfo ()
        {

            var localVarPath = "/appManagement/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationListSchema)));
            
        }

        /// <summary>
        /// Get list of all applications in this realm. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApplicationListSchema</returns>
        public async System.Threading.Tasks.Task<ApplicationListSchema> GetApplicationListAsync ()
        {
             ApiResponse<ApplicationListSchema> localVarResponse = await GetApplicationListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of all applications in this realm. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApplicationListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationListSchema>> GetApplicationListAsyncWithHttpInfo ()
        {

            var localVarPath = "/appManagement/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationListSchema)));
            
        }

        /// <summary>
        /// List of credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>CredentialListSchema</returns>
        public CredentialListSchema GetCredentials (string childAppId)
        {
             ApiResponse<CredentialListSchema> localVarResponse = GetCredentialsWithHttpInfo(childAppId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>ApiResponse of CredentialListSchema</returns>
        public ApiResponse< CredentialListSchema > GetCredentialsWithHttpInfo (string childAppId)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->GetCredentials");

            var localVarPath = "/appManagement/{childAppId}/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CredentialListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialListSchema)));
            
        }

        /// <summary>
        /// List of credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of CredentialListSchema</returns>
        public async System.Threading.Tasks.Task<CredentialListSchema> GetCredentialsAsync (string childAppId)
        {
             ApiResponse<CredentialListSchema> localVarResponse = await GetCredentialsAsyncWithHttpInfo(childAppId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of credentials 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <returns>Task of ApiResponse (CredentialListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CredentialListSchema>> GetCredentialsAsyncWithHttpInfo (string childAppId)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->GetCredentials");

            var localVarPath = "/appManagement/{childAppId}/credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CredentialListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CredentialListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CredentialListSchema)));
            
        }

        /// <summary>
        /// Set configuration settings for this level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns></returns>
        public void SetApplicationConfiguration (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null)
        {
             SetApplicationConfigurationWithHttpInfo(configurationSettings, learningStandard, singleSco);
        }

        /// <summary>
        /// Set configuration settings for this level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetApplicationConfigurationWithHttpInfo (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null)
        {
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling ApplicationManagementApi->SetApplicationConfiguration");

            var localVarPath = "/appManagement/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (learningStandard != null) localVarQueryParams.Add("learningStandard", Configuration.ApiClient.ParameterToString(learningStandard)); // query parameter
            if (singleSco != null) localVarQueryParams.Add("singleSco", Configuration.ApiClient.ParameterToString(singleSco)); // query parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetApplicationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration settings for this level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetApplicationConfigurationAsync (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null)
        {
             await SetApplicationConfigurationAsyncWithHttpInfo(configurationSettings, learningStandard, singleSco);

        }

        /// <summary>
        /// Set configuration settings for this level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationSettings"></param>
        /// <param name="learningStandard">If specified, the request will be scoped to the provided learning standard. (optional)</param>
        /// <param name="singleSco">Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetApplicationConfigurationAsyncWithHttpInfo (SettingsPostSchema configurationSettings, string learningStandard = null, bool? singleSco = null)
        {
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling ApplicationManagementApi->SetApplicationConfiguration");

            var localVarPath = "/appManagement/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (learningStandard != null) localVarQueryParams.Add("learningStandard", Configuration.ApiClient.ParameterToString(learningStandard)); // query parameter
            if (singleSco != null) localVarQueryParams.Add("singleSco", Configuration.ApiClient.ParameterToString(singleSco)); // query parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetApplicationConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns></returns>
        public void UpdateCredential (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate)
        {
             UpdateCredentialWithHttpInfo(childAppId, credentialId, credentialUpdate);
        }

        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCredentialWithHttpInfo (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->UpdateCredential");
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ApplicationManagementApi->UpdateCredential");
            // verify the required parameter 'credentialUpdate' is set
            if (credentialUpdate == null)
                throw new ApiException(400, "Missing required parameter 'credentialUpdate' when calling ApplicationManagementApi->UpdateCredential");

            var localVarPath = "/appManagement/{childAppId}/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter
            if (credentialId != null) localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId)); // path parameter
            if (credentialUpdate != null && credentialUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentialUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentialUpdate; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCredentialAsync (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate)
        {
             await UpdateCredentialAsyncWithHttpInfo(childAppId, credentialId, credentialUpdate);

        }

        /// <summary>
        /// Update the name or status associated with &#x60;credentialId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAppId"></param>
        /// <param name="credentialId"></param>
        /// <param name="credentialUpdate"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCredentialAsyncWithHttpInfo (string childAppId, string credentialId, CredentialRequestSchema credentialUpdate)
        {
            // verify the required parameter 'childAppId' is set
            if (childAppId == null)
                throw new ApiException(400, "Missing required parameter 'childAppId' when calling ApplicationManagementApi->UpdateCredential");
            // verify the required parameter 'credentialId' is set
            if (credentialId == null)
                throw new ApiException(400, "Missing required parameter 'credentialId' when calling ApplicationManagementApi->UpdateCredential");
            // verify the required parameter 'credentialUpdate' is set
            if (credentialUpdate == null)
                throw new ApiException(400, "Missing required parameter 'credentialUpdate' when calling ApplicationManagementApi->UpdateCredential");

            var localVarPath = "/appManagement/{childAppId}/credentials/{credentialId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (childAppId != null) localVarPathParams.Add("childAppId", Configuration.ApiClient.ParameterToString(childAppId)); // path parameter
            if (credentialId != null) localVarPathParams.Add("credentialId", Configuration.ApiClient.ParameterToString(credentialId)); // path parameter
            if (credentialUpdate != null && credentialUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentialUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentialUpdate; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCredential", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
