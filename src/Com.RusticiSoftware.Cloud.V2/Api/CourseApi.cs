/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICourseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a link to preview a course. 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildCoursePreviewLaunchLink (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);

        /// <summary>
        /// Get a link to preview a course. 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);
        /// <summary>
        /// Get a link to preview a particular course version. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to preview a particular version of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildCoursePreviewLaunchLinkWithVersion (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get a link to preview a particular course version. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to preview a particular version of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Fetch and import a course. 
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateFetchAndImportCourseJob (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Fetch and import a course. 
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateFetchAndImportCourseJobWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Upload and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateUploadAndImportCourseJob (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null);

        /// <summary>
        /// Upload and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateUploadAndImportCourseJobWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null);
        /// <summary>
        /// Delete a course. 
        /// </summary>
        /// <remarks>
        /// Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns></returns>
        void DeleteCourse (string courseId);

        /// <summary>
        /// Delete a course. 
        /// </summary>
        /// <remarks>
        /// Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseWithHttpInfo (string courseId);
        /// <summary>
        /// Clear a course configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteCourseConfigurationSetting (string courseId, string settingId);

        /// <summary>
        /// Clear a course configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseConfigurationSettingWithHttpInfo (string courseId, string settingId);
        /// <summary>
        /// Delete course tags. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags from this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteCourseTags (string courseId, TagListSchema tags);

        /// <summary>
        /// Delete course tags. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags from this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseTagsWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Delete a course version. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns></returns>
        void DeleteCourseVersion (string courseId, int? versionId);

        /// <summary>
        /// Delete a course version. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Clear a configuration setting for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteCourseVersionConfigurationSetting (string courseId, int? versionId, string settingId);

        /// <summary>
        /// Clear a configuration setting for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionConfigurationSettingWithHttpInfo (string courseId, int? versionId, string settingId);
        /// <summary>
        /// Get course details. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        CourseSchema GetCourse (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get course details. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        ApiResponse<CourseSchema> GetCourseWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get course configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetCourseConfiguration (string courseId, bool? includeMetadata = null);

        /// <summary>
        /// Get course configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetCourseConfigurationWithHttpInfo (string courseId, bool? includeMetadata = null);
        /// <summary>
        /// Get course xAPI statements. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;courseId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetCourseStatements (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get course xAPI statements. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;courseId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetCourseStatementsWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get course tags. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags for this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetCourseTags (string courseId);

        /// <summary>
        /// Get course tags. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags for this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetCourseTagsWithHttpInfo (string courseId);
        /// <summary>
        /// Get configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetCourseVersionConfiguration (string courseId, int? versionId, bool? includeMetadata = null);

        /// <summary>
        /// Get configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null);
        /// <summary>
        /// Get details on a course version. 
        /// </summary>
        /// <remarks>
        /// Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        CourseSchema GetCourseVersionInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get details on a course version. 
        /// </summary>
        /// <remarks>
        /// Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        ApiResponse<CourseSchema> GetCourseVersionInfoWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get xAPI statements for a course version. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetCourseVersionStatements (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a course version. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetCourseVersionStatementsWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get details on a course&#39;s versions. 
        /// </summary>
        /// <remarks>
        /// Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseListNonPagedSchema</returns>
        CourseListNonPagedSchema GetCourseVersions (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get details on a course&#39;s versions. 
        /// </summary>
        /// <remarks>
        /// Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListNonPagedSchema</returns>
        ApiResponse<CourseListNonPagedSchema> GetCourseVersionsWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get all courses. 
        /// </summary>
        /// <remarks>
        /// Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>CourseListSchema</returns>
        CourseListSchema GetCourses (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);

        /// <summary>
        /// Get all courses. 
        /// </summary>
        /// <remarks>
        /// Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of CourseListSchema</returns>
        ApiResponse<CourseListSchema> GetCoursesWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);
        /// <summary>
        /// Get course import job status. 
        /// </summary>
        /// <remarks>
        /// Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ImportJobResultSchema</returns>
        ImportJobResultSchema GetImportJobStatus (string importJobId);

        /// <summary>
        /// Get course import job status. 
        /// </summary>
        /// <remarks>
        /// Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ApiResponse of ImportJobResultSchema</returns>
        ApiResponse<ImportJobResultSchema> GetImportJobStatusWithHttpInfo (string importJobId);
        /// <summary>
        /// Set course tags. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutCourseTags (string courseId, TagListSchema tags);

        /// <summary>
        /// Set course tags. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCourseTagsWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Set tags on courses. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided courses. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns></returns>
        void PutCourseTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Set tags on courses. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided courses. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCourseTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Set course configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetCourseConfiguration (string courseId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set course configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseConfigurationWithHttpInfo (string courseId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Set the title of a course. 
        /// </summary>
        /// <remarks>
        /// Sets the course title for the provided courseId. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        void SetCourseTitle (string courseId, TitleSchema title);

        /// <summary>
        /// Set the title of a course. 
        /// </summary>
        /// <remarks>
        /// Sets the course title for the provided courseId. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseTitleWithHttpInfo (string courseId, TitleSchema title);
        /// <summary>
        /// Set configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetCourseVersionConfiguration (string courseId, int? versionId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a link to preview a course. 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkAsync (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);

        /// <summary>
        /// Get a link to preview a course. 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkAsyncWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);
        /// <summary>
        /// Get a link to preview a particular course version. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to preview a particular version of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionAsync (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get a link to preview a particular course version. 
        /// </summary>
        /// <remarks>
        /// Returns the link to use to preview a particular version of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Fetch and import a course. 
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateFetchAndImportCourseJobAsync (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Fetch and import a course. 
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateFetchAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Upload and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateUploadAndImportCourseJobAsync (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null);

        /// <summary>
        /// Upload and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null);
        /// <summary>
        /// Delete a course. 
        /// </summary>
        /// <remarks>
        /// Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseAsync (string courseId);

        /// <summary>
        /// Delete a course. 
        /// </summary>
        /// <remarks>
        /// Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Clear a course configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseConfigurationSettingAsync (string courseId, string settingId);

        /// <summary>
        /// Clear a course configuration. 
        /// </summary>
        /// <remarks>
        /// Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseConfigurationSettingAsyncWithHttpInfo (string courseId, string settingId);
        /// <summary>
        /// Delete course tags. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags from this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseTagsAsync (string courseId, TagListSchema tags);

        /// <summary>
        /// Delete course tags. 
        /// </summary>
        /// <remarks>
        /// Delete the provided tags from this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Delete a course version. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionAsync (string courseId, int? versionId);

        /// <summary>
        /// Delete a course version. 
        /// </summary>
        /// <remarks>
        /// Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Clear a configuration setting for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionConfigurationSettingAsync (string courseId, int? versionId, string settingId);

        /// <summary>
        /// Clear a configuration setting for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo (string courseId, int? versionId, string settingId);
        /// <summary>
        /// Get course details. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        System.Threading.Tasks.Task<CourseSchema> GetCourseAsync (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get course details. 
        /// </summary>
        /// <remarks>
        /// Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseAsyncWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get course configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetCourseConfigurationAsync (string courseId, bool? includeMetadata = null);

        /// <summary>
        /// Get course configuration. 
        /// </summary>
        /// <remarks>
        /// Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseConfigurationAsyncWithHttpInfo (string courseId, bool? includeMetadata = null);
        /// <summary>
        /// Get course xAPI statements. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;courseId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetCourseStatementsAsync (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get course xAPI statements. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for &#x60;courseId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseStatementsAsyncWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get course tags. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags for this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetCourseTagsAsync (string courseId);

        /// <summary>
        /// Get course tags. 
        /// </summary>
        /// <remarks>
        /// Get a list of the tags for this course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetCourseTagsAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Get configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetCourseVersionConfigurationAsync (string courseId, int? versionId, bool? includeMetadata = null);

        /// <summary>
        /// Get configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Returns all configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null);
        /// <summary>
        /// Get details on a course version. 
        /// </summary>
        /// <remarks>
        /// Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        System.Threading.Tasks.Task<CourseSchema> GetCourseVersionInfoAsync (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get details on a course version. 
        /// </summary>
        /// <remarks>
        /// Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseVersionInfoAsyncWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get xAPI statements for a course version. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetCourseVersionStatementsAsync (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a course version. 
        /// </summary>
        /// <remarks>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseVersionStatementsAsyncWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get details on a course&#39;s versions. 
        /// </summary>
        /// <remarks>
        /// Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseListNonPagedSchema</returns>
        System.Threading.Tasks.Task<CourseListNonPagedSchema> GetCourseVersionsAsync (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get details on a course&#39;s versions. 
        /// </summary>
        /// <remarks>
        /// Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListNonPagedSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseListNonPagedSchema>> GetCourseVersionsAsyncWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get all courses. 
        /// </summary>
        /// <remarks>
        /// Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of CourseListSchema</returns>
        System.Threading.Tasks.Task<CourseListSchema> GetCoursesAsync (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);

        /// <summary>
        /// Get all courses. 
        /// </summary>
        /// <remarks>
        /// Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of ApiResponse (CourseListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseListSchema>> GetCoursesAsyncWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);
        /// <summary>
        /// Get course import job status. 
        /// </summary>
        /// <remarks>
        /// Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ImportJobResultSchema</returns>
        System.Threading.Tasks.Task<ImportJobResultSchema> GetImportJobStatusAsync (string importJobId);

        /// <summary>
        /// Get course import job status. 
        /// </summary>
        /// <remarks>
        /// Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ApiResponse (ImportJobResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportJobResultSchema>> GetImportJobStatusAsyncWithHttpInfo (string importJobId);
        /// <summary>
        /// Set course tags. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCourseTagsAsync (string courseId, TagListSchema tags);

        /// <summary>
        /// Set course tags. 
        /// </summary>
        /// <remarks>
        /// Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Set tags on courses. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided courses. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCourseTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Set tags on courses. 
        /// </summary>
        /// <remarks>
        /// Sets all of the provided tags on all of the provided courses. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Set course configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseConfigurationAsync (string courseId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set course configuration. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseConfigurationAsyncWithHttpInfo (string courseId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Set the title of a course. 
        /// </summary>
        /// <remarks>
        /// Sets the course title for the provided courseId. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseTitleAsync (string courseId, TitleSchema title);

        /// <summary>
        /// Set the title of a course. 
        /// </summary>
        /// <remarks>
        /// Sets the course title for the provided courseId. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseTitleAsyncWithHttpInfo (string courseId, TitleSchema title);
        /// <summary>
        /// Set configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseVersionConfigurationAsync (string courseId, int? versionId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration for a version of a course. 
        /// </summary>
        /// <remarks>
        /// Set configuration settings for this course and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CourseApi : ICourseApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CourseApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CourseApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a link to preview a course.  Returns the launch link to use to preview this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildCoursePreviewLaunchLink (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildCoursePreviewLaunchLinkWithHttpInfo(courseId, launchLinkRequest, cssUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a link to preview a course.  Returns the launch link to use to preview this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildCoursePreviewLaunchLinkWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLink");

            var localVarPath = "/courses/{courseId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (cssUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cssUrl", cssUrl)); // query parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get a link to preview a course.  Returns the launch link to use to preview this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkAsync (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildCoursePreviewLaunchLinkAsyncWithHttpInfo(courseId, launchLinkRequest, cssUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a link to preview a course.  Returns the launch link to use to preview this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkAsyncWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLink");

            var localVarPath = "/courses/{courseId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (cssUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cssUrl", cssUrl)); // query parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get a link to preview a particular course version.  Returns the link to use to preview a particular version of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildCoursePreviewLaunchLinkWithVersion (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo(courseId, versionId, launchLinkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a link to preview a particular course version.  Returns the link to use to preview a particular version of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLinkWithVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get a link to preview a particular course version.  Returns the link to use to preview a particular version of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionAsync (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo(courseId, versionId, launchLinkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a link to preview a particular course version.  Returns the link to use to preview a particular version of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLinkWithVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Fetch and import a course.  An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateFetchAndImportCourseJob (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateFetchAndImportCourseJobWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch and import a course.  An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateFetchAndImportCourseJobWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateFetchAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateFetchAndImportCourseJob");

            var localVarPath = "/courses/importJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFetchAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Fetch and import a course.  An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateFetchAndImportCourseJobAsync (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateFetchAndImportCourseJobAsyncWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch and import a course.  An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateFetchAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateFetchAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateFetchAndImportCourseJob");

            var localVarPath = "/courses/importJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFetchAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Upload and import a course. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateUploadAndImportCourseJob (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateUploadAndImportCourseJobWithHttpInfo(courseId, mayCreateNewVersion, postbackUrl, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload and import a course. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateUploadAndImportCourseJobWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Upload and import a course. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateUploadAndImportCourseJobAsync (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateUploadAndImportCourseJobAsyncWithHttpInfo(courseId, mayCreateNewVersion, postbackUrl, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload and import a course. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, System.IO.Stream _file = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Delete a course.  Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns></returns>
        public void DeleteCourse (string courseId)
        {
             DeleteCourseWithHttpInfo(courseId);
        }

        /// <summary>
        /// Delete a course.  Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a course.  Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseAsync (string courseId)
        {
             await DeleteCourseAsyncWithHttpInfo(courseId);

        }

        /// <summary>
        /// Delete a course.  Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a course configuration.  Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteCourseConfigurationSetting (string courseId, string settingId)
        {
             DeleteCourseConfigurationSettingWithHttpInfo(courseId, settingId);
        }

        /// <summary>
        /// Clear a course configuration.  Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseConfigurationSettingWithHttpInfo (string courseId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseConfigurationSetting");

            var localVarPath = "/courses/{courseId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a course configuration.  Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseConfigurationSettingAsync (string courseId, string settingId)
        {
             await DeleteCourseConfigurationSettingAsyncWithHttpInfo(courseId, settingId);

        }

        /// <summary>
        /// Clear a course configuration.  Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseConfigurationSettingAsyncWithHttpInfo (string courseId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseConfigurationSetting");

            var localVarPath = "/courses/{courseId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete course tags.  Delete the provided tags from this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteCourseTags (string courseId, TagListSchema tags)
        {
             DeleteCourseTagsWithHttpInfo(courseId, tags);
        }

        /// <summary>
        /// Delete course tags.  Delete the provided tags from this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseTagsWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->DeleteCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete course tags.  Delete the provided tags from this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseTagsAsync (string courseId, TagListSchema tags)
        {
             await DeleteCourseTagsAsyncWithHttpInfo(courseId, tags);

        }

        /// <summary>
        /// Delete course tags.  Delete the provided tags from this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->DeleteCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a course version.  Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns></returns>
        public void DeleteCourseVersion (string courseId, int? versionId)
        {
             DeleteCourseVersionWithHttpInfo(courseId, versionId);
        }

        /// <summary>
        /// Delete a course version.  Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a course version.  Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionAsync (string courseId, int? versionId)
        {
             await DeleteCourseVersionAsyncWithHttpInfo(courseId, versionId);

        }

        /// <summary>
        /// Delete a course version.  Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a configuration setting for a version of a course.  Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteCourseVersionConfigurationSetting (string courseId, int? versionId, string settingId)
        {
             DeleteCourseVersionConfigurationSettingWithHttpInfo(courseId, versionId, settingId);
        }

        /// <summary>
        /// Clear a configuration setting for a version of a course.  Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionConfigurationSettingWithHttpInfo (string courseId, int? versionId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear a configuration setting for a version of a course.  Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionConfigurationSettingAsync (string courseId, int? versionId, string settingId)
        {
             await DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo(courseId, versionId, settingId);

        }

        /// <summary>
        /// Clear a configuration setting for a version of a course.  Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo (string courseId, int? versionId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get course details.  Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        public CourseSchema GetCourse (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = GetCourseWithHttpInfo(courseId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get course details.  Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        public ApiResponse< CourseSchema > GetCourseWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get course details.  Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        public async System.Threading.Tasks.Task<CourseSchema> GetCourseAsync (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = await GetCourseAsyncWithHttpInfo(courseId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get course details.  Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseAsyncWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get course configuration.  Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetCourseConfiguration (string courseId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetCourseConfigurationWithHttpInfo(courseId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get course configuration.  Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetCourseConfigurationWithHttpInfo (string courseId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get course configuration.  Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetCourseConfigurationAsync (string courseId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetCourseConfigurationAsyncWithHttpInfo(courseId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get course configuration.  Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseConfigurationAsyncWithHttpInfo (string courseId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get course xAPI statements.  Get xAPI statements for &#x60;courseId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetCourseStatements (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetCourseStatementsWithHttpInfo(courseId, learnerId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get course xAPI statements.  Get xAPI statements for &#x60;courseId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetCourseStatementsWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseStatements");

            var localVarPath = "/courses/{courseId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get course xAPI statements.  Get xAPI statements for &#x60;courseId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetCourseStatementsAsync (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetCourseStatementsAsyncWithHttpInfo(courseId, learnerId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get course xAPI statements.  Get xAPI statements for &#x60;courseId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseStatementsAsyncWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseStatements");

            var localVarPath = "/courses/{courseId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get course tags.  Get a list of the tags for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetCourseTags (string courseId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetCourseTagsWithHttpInfo(courseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get course tags.  Get a list of the tags for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetCourseTagsWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get course tags.  Get a list of the tags for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetCourseTagsAsync (string courseId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetCourseTagsAsyncWithHttpInfo(courseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get course tags.  Get a list of the tags for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetCourseTagsAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get configuration for a version of a course.  Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetCourseVersionConfiguration (string courseId, int? versionId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetCourseVersionConfigurationWithHttpInfo(courseId, versionId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get configuration for a version of a course.  Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get configuration for a version of a course.  Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetCourseVersionConfigurationAsync (string courseId, int? versionId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetCourseVersionConfigurationAsyncWithHttpInfo(courseId, versionId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get configuration for a version of a course.  Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get details on a course version.  Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        public CourseSchema GetCourseVersionInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = GetCourseVersionInfoWithHttpInfo(courseId, versionId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details on a course version.  Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        public ApiResponse< CourseSchema > GetCourseVersionInfoWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionInfo");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionInfo");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get details on a course version.  Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        public async System.Threading.Tasks.Task<CourseSchema> GetCourseVersionInfoAsync (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = await GetCourseVersionInfoAsyncWithHttpInfo(courseId, versionId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details on a course version.  Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseVersionInfoAsyncWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionInfo");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionInfo");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get xAPI statements for a course version.  Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetCourseVersionStatements (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetCourseVersionStatementsWithHttpInfo(courseId, versionId, learnerId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for a course version.  Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetCourseVersionStatementsWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionStatements");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionStatements");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get xAPI statements for a course version.  Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetCourseVersionStatementsAsync (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetCourseVersionStatementsAsyncWithHttpInfo(courseId, versionId, learnerId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for a course version.  Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseVersionStatementsAsyncWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionStatements");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionStatements");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get details on a course&#39;s versions.  Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseListNonPagedSchema</returns>
        public CourseListNonPagedSchema GetCourseVersions (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseListNonPagedSchema> localVarResponse = GetCourseVersionsWithHttpInfo(courseId, since, until, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details on a course&#39;s versions.  Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListNonPagedSchema</returns>
        public ApiResponse< CourseListNonPagedSchema > GetCourseVersionsWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersions");

            var localVarPath = "/courses/{courseId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListNonPagedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListNonPagedSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListNonPagedSchema)));
        }

        /// <summary>
        /// Get details on a course&#39;s versions.  Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseListNonPagedSchema</returns>
        public async System.Threading.Tasks.Task<CourseListNonPagedSchema> GetCourseVersionsAsync (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseListNonPagedSchema> localVarResponse = await GetCourseVersionsAsyncWithHttpInfo(courseId, since, until, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details on a course&#39;s versions.  Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListNonPagedSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseListNonPagedSchema>> GetCourseVersionsAsyncWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersions");

            var localVarPath = "/courses/{courseId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListNonPagedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListNonPagedSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListNonPagedSchema)));
        }

        /// <summary>
        /// Get all courses.  Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>CourseListSchema</returns>
        public CourseListSchema GetCourses (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {
             ApiResponse<CourseListSchema> localVarResponse = GetCoursesWithHttpInfo(more, since, until, filter, filterBy, orderBy, includeRegistrationCount, includeCourseMetadata, tags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all courses.  Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of CourseListSchema</returns>
        public ApiResponse< CourseListSchema > GetCoursesWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListSchema)));
        }

        /// <summary>
        /// Get all courses.  Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of CourseListSchema</returns>
        public async System.Threading.Tasks.Task<CourseListSchema> GetCoursesAsync (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {
             ApiResponse<CourseListSchema> localVarResponse = await GetCoursesAsyncWithHttpInfo(more, since, until, filter, filterBy, orderBy, includeRegistrationCount, includeCourseMetadata, tags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all courses.  Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of ApiResponse (CourseListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseListSchema>> GetCoursesAsyncWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListSchema)));
        }

        /// <summary>
        /// Get course import job status.  Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ImportJobResultSchema</returns>
        public ImportJobResultSchema GetImportJobStatus (string importJobId)
        {
             ApiResponse<ImportJobResultSchema> localVarResponse = GetImportJobStatusWithHttpInfo(importJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get course import job status.  Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ApiResponse of ImportJobResultSchema</returns>
        public ApiResponse< ImportJobResultSchema > GetImportJobStatusWithHttpInfo (string importJobId)
        {
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling CourseApi->GetImportJobStatus");

            var localVarPath = "/courses/importJobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResultSchema)));
        }

        /// <summary>
        /// Get course import job status.  Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ImportJobResultSchema</returns>
        public async System.Threading.Tasks.Task<ImportJobResultSchema> GetImportJobStatusAsync (string importJobId)
        {
             ApiResponse<ImportJobResultSchema> localVarResponse = await GetImportJobStatusAsyncWithHttpInfo(importJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get course import job status.  Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ApiResponse (ImportJobResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportJobResultSchema>> GetImportJobStatusAsyncWithHttpInfo (string importJobId)
        {
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling CourseApi->GetImportJobStatus");

            var localVarPath = "/courses/importJobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResultSchema)));
        }

        /// <summary>
        /// Set course tags.  Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutCourseTags (string courseId, TagListSchema tags)
        {
             PutCourseTagsWithHttpInfo(courseId, tags);
        }

        /// <summary>
        /// Set course tags.  Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCourseTagsWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->PutCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->PutCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set course tags.  Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCourseTagsAsync (string courseId, TagListSchema tags)
        {
             await PutCourseTagsAsyncWithHttpInfo(courseId, tags);

        }

        /// <summary>
        /// Set course tags.  Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->PutCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->PutCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set tags on courses.  Sets all of the provided tags on all of the provided courses. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns></returns>
        public void PutCourseTagsBatch (BatchTagsSchema batch)
        {
             PutCourseTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Set tags on courses.  Sets all of the provided tags on all of the provided courses. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCourseTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling CourseApi->PutCourseTagsBatch");

            var localVarPath = "/courses/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set tags on courses.  Sets all of the provided tags on all of the provided courses. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCourseTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutCourseTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Set tags on courses.  Sets all of the provided tags on all of the provided courses. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Object representing an array of ids to apply an array of tags to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling CourseApi->PutCourseTagsBatch");

            var localVarPath = "/courses/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set course configuration.  Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetCourseConfiguration (string courseId, SettingsPostSchema configurationSettings)
        {
             SetCourseConfigurationWithHttpInfo(courseId, configurationSettings);
        }

        /// <summary>
        /// Set course configuration.  Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseConfigurationWithHttpInfo (string courseId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set course configuration.  Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseConfigurationAsync (string courseId, SettingsPostSchema configurationSettings)
        {
             await SetCourseConfigurationAsyncWithHttpInfo(courseId, configurationSettings);

        }

        /// <summary>
        /// Set course configuration.  Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseConfigurationAsyncWithHttpInfo (string courseId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the title of a course.  Sets the course title for the provided courseId. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        public void SetCourseTitle (string courseId, TitleSchema title)
        {
             SetCourseTitleWithHttpInfo(courseId, title);
        }

        /// <summary>
        /// Set the title of a course.  Sets the course title for the provided courseId. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseTitleWithHttpInfo (string courseId, TitleSchema title)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseTitle");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling CourseApi->SetCourseTitle");

            var localVarPath = "/courses/{courseId}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the title of a course.  Sets the course title for the provided courseId. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseTitleAsync (string courseId, TitleSchema title)
        {
             await SetCourseTitleAsyncWithHttpInfo(courseId, title);

        }

        /// <summary>
        /// Set the title of a course.  Sets the course title for the provided courseId. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseTitleAsyncWithHttpInfo (string courseId, TitleSchema title)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseTitle");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling CourseApi->SetCourseTitle");

            var localVarPath = "/courses/{courseId}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration for a version of a course.  Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetCourseVersionConfiguration (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
             SetCourseVersionConfigurationWithHttpInfo(courseId, versionId, configurationSettings);
        }

        /// <summary>
        /// Set configuration for a version of a course.  Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration for a version of a course.  Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseVersionConfigurationAsync (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
             await SetCourseVersionConfigurationAsyncWithHttpInfo(courseId, versionId, configurationSettings);

        }

        /// <summary>
        /// Set configuration for a version of a course.  Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
