/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICourseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the launch link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildCoursePreviewLaunchLink (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);

        /// <summary>
        /// Returns the launch link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);
        /// <summary>
        /// Returns the link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildCoursePreviewLaunchLinkWithVersion (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Returns the link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Start a job to fetch and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateFetchAndImportCourseJob (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Start a job to fetch and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateFetchAndImportCourseJobWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Upload a course and start an import job for it.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateUploadAndImportCourseJob (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null);

        /// <summary>
        /// Upload a course and start an import job for it.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateUploadAndImportCourseJobWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null);
        /// <summary>
        /// Delete &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns></returns>
        void DeleteCourse (string courseId);

        /// <summary>
        /// Delete &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseWithHttpInfo (string courseId);
        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteCourseConfigurationSetting (string courseId, string settingId);

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseConfigurationSettingWithHttpInfo (string courseId, string settingId);
        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns></returns>
        void DeleteCourseVersion (string courseId, int? versionId);

        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteCourseVersionConfigurationSetting (string courseId, int? versionId, string settingId);

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionConfigurationSettingWithHttpInfo (string courseId, int? versionId, string settingId);
        /// <summary>
        /// Get information about &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        CourseSchema GetCourse (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get information about &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        ApiResponse<CourseSchema> GetCourseWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Returns all configuration settings for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetCourseConfiguration (string courseId, bool? includeMetadata = null);

        /// <summary>
        /// Returns all configuration settings for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetCourseConfigurationWithHttpInfo (string courseId, bool? includeMetadata = null);
        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetCourseStatements (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetCourseStatementsWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Returns all configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetCourseVersionConfiguration (string courseId, int? versionId, bool? includeMetadata = null);

        /// <summary>
        /// Returns all configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null);
        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        CourseSchema GetCourseVersionInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        ApiResponse<CourseSchema> GetCourseVersionInfoWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetCourseVersionStatements (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetCourseVersionStatementsWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get all versions of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseListNonPagedSchema</returns>
        CourseListNonPagedSchema GetCourseVersions (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get all versions of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListNonPagedSchema</returns>
        ApiResponse<CourseListNonPagedSchema> GetCourseVersionsWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get all courses for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>CourseListSchema</returns>
        CourseListSchema GetCourses (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);

        /// <summary>
        /// Get all courses for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of CourseListSchema</returns>
        ApiResponse<CourseListSchema> GetCoursesWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);
        /// <summary>
        /// Check the status of an import job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ImportResultSchema</returns>
        ImportResultSchema GetImportJobStatus (string importJobId);

        /// <summary>
        /// Check the status of an import job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ApiResponse of ImportResultSchema</returns>
        ApiResponse<ImportResultSchema> GetImportJobStatusWithHttpInfo (string importJobId);
        /// <summary>
        /// Set configuration settings for this course.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetCourseConfiguration (string courseId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration settings for this course.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseConfigurationWithHttpInfo (string courseId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>string</returns>
        string SetCourseTitle (string courseId, TitleSchema title);

        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SetCourseTitleWithHttpInfo (string courseId, TitleSchema title);
        /// <summary>
        /// Set configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetCourseVersionConfiguration (string courseId, int? versionId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the launch link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkAsync (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);

        /// <summary>
        /// Returns the launch link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkAsyncWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null);
        /// <summary>
        /// Returns the link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionAsync (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Returns the link to use to preview this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Start a job to fetch and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateFetchAndImportCourseJobAsync (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Start a job to fetch and import a course.
        /// </summary>
        /// <remarks>
        /// An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateFetchAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Upload a course and start an import job for it.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateUploadAndImportCourseJobAsync (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null);

        /// <summary>
        /// Upload a course and start an import job for it.
        /// </summary>
        /// <remarks>
        /// An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null);
        /// <summary>
        /// Delete &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseAsync (string courseId);

        /// <summary>
        /// Delete &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseConfigurationSettingAsync (string courseId, string settingId);

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseConfigurationSettingAsyncWithHttpInfo (string courseId, string settingId);
        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionAsync (string courseId, int? versionId);

        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionConfigurationSettingAsync (string courseId, int? versionId, string settingId);

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo (string courseId, int? versionId, string settingId);
        /// <summary>
        /// Get information about &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        System.Threading.Tasks.Task<CourseSchema> GetCourseAsync (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get information about &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseAsyncWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Returns all configuration settings for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetCourseConfigurationAsync (string courseId, bool? includeMetadata = null);

        /// <summary>
        /// Returns all configuration settings for this course
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseConfigurationAsyncWithHttpInfo (string courseId, bool? includeMetadata = null);
        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetCourseStatementsAsync (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseStatementsAsyncWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Returns all configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetCourseVersionConfigurationAsync (string courseId, int? versionId, bool? includeMetadata = null);

        /// <summary>
        /// Returns all configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null);
        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        System.Threading.Tasks.Task<CourseSchema> GetCourseVersionInfoAsync (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseVersionInfoAsyncWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetCourseVersionStatementsAsync (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseVersionStatementsAsyncWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get all versions of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseListNonPagedSchema</returns>
        System.Threading.Tasks.Task<CourseListNonPagedSchema> GetCourseVersionsAsync (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get all versions of &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListNonPagedSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseListNonPagedSchema>> GetCourseVersionsAsyncWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get all courses for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of CourseListSchema</returns>
        System.Threading.Tasks.Task<CourseListSchema> GetCoursesAsync (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);

        /// <summary>
        /// Get all courses for &#x60;appId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of ApiResponse (CourseListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseListSchema>> GetCoursesAsyncWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null);
        /// <summary>
        /// Check the status of an import job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ImportResultSchema</returns>
        System.Threading.Tasks.Task<ImportResultSchema> GetImportJobStatusAsync (string importJobId);

        /// <summary>
        /// Check the status of an import job.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ApiResponse (ImportResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportResultSchema>> GetImportJobStatusAsyncWithHttpInfo (string importJobId);
        /// <summary>
        /// Set configuration settings for this course.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseConfigurationAsync (string courseId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration settings for this course.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseConfigurationAsyncWithHttpInfo (string courseId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SetCourseTitleAsync (string courseId, TitleSchema title);

        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SetCourseTitleAsyncWithHttpInfo (string courseId, TitleSchema title);
        /// <summary>
        /// Set configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseVersionConfigurationAsync (string courseId, int? versionId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Set configuration settings for this course and version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CourseApi : ICourseApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CourseApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CourseApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the launch link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildCoursePreviewLaunchLink (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildCoursePreviewLaunchLinkWithHttpInfo(courseId, launchLinkRequest, cssUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the launch link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildCoursePreviewLaunchLinkWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLink");

            var localVarPath = "/courses/{courseId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (cssUrl != null) localVarQueryParams.Add("cssUrl", Configuration.ApiClient.ParameterToString(cssUrl)); // query parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
            
        }

        /// <summary>
        /// Returns the launch link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkAsync (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildCoursePreviewLaunchLinkAsyncWithHttpInfo(courseId, launchLinkRequest, cssUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the launch link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <param name="cssUrl"> (optional)</param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkAsyncWithHttpInfo (string courseId, LaunchLinkRequestSchema launchLinkRequest, string cssUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLink");

            var localVarPath = "/courses/{courseId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (cssUrl != null) localVarQueryParams.Add("cssUrl", Configuration.ApiClient.ParameterToString(cssUrl)); // query parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
            
        }

        /// <summary>
        /// Returns the link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildCoursePreviewLaunchLinkWithVersion (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo(courseId, versionId, launchLinkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLinkWithVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
            
        }

        /// <summary>
        /// Returns the link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionAsync (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo(courseId, versionId, launchLinkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the link to use to preview this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo (string courseId, int? versionId, LaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLinkWithVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
            
        }

        /// <summary>
        /// Start a job to fetch and import a course. An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateFetchAndImportCourseJob (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateFetchAndImportCourseJobWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a job to fetch and import a course. An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateFetchAndImportCourseJobWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateFetchAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateFetchAndImportCourseJob");

            var localVarPath = "/courses/importJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarQueryParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.Add("mayCreateNewVersion", Configuration.ApiClient.ParameterToString(mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.Add("postbackUrl", Configuration.ApiClient.ParameterToString(postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFetchAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
            
        }

        /// <summary>
        /// Start a job to fetch and import a course. An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateFetchAndImportCourseJobAsync (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateFetchAndImportCourseJobAsyncWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a job to fetch and import a course. An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.\&quot;
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateFetchAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateFetchAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateFetchAndImportCourseJob");

            var localVarPath = "/courses/importJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarQueryParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.Add("mayCreateNewVersion", Configuration.ApiClient.ParameterToString(mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.Add("postbackUrl", Configuration.ApiClient.ParameterToString(postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFetchAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
            
        }

        /// <summary>
        /// Upload a course and start an import job for it. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateUploadAndImportCourseJob (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateUploadAndImportCourseJobWithHttpInfo(courseId, mayCreateNewVersion, file, postbackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a course and start an import job for it. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateUploadAndImportCourseJobWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarQueryParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.Add("mayCreateNewVersion", Configuration.ApiClient.ParameterToString(mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.Add("postbackUrl", Configuration.ApiClient.ParameterToString(postbackUrl)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
            
        }

        /// <summary>
        /// Upload a course and start an import job for it. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateUploadAndImportCourseJobAsync (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateUploadAndImportCourseJobAsyncWithHttpInfo(courseId, mayCreateNewVersion, file, postbackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a course and start an import job for it. An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="file">The zip file of the course contents to import. (optional)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, System.IO.Stream file = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarQueryParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.Add("mayCreateNewVersion", Configuration.ApiClient.ParameterToString(mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.Add("postbackUrl", Configuration.ApiClient.ParameterToString(postbackUrl)); // query parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
            
        }

        /// <summary>
        /// Delete &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns></returns>
        public void DeleteCourse (string courseId)
        {
             DeleteCourseWithHttpInfo(courseId);
        }

        /// <summary>
        /// Delete &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseAsync (string courseId)
        {
             await DeleteCourseAsyncWithHttpInfo(courseId);

        }

        /// <summary>
        /// Delete &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteCourseConfigurationSetting (string courseId, string settingId)
        {
             DeleteCourseConfigurationSettingWithHttpInfo(courseId, settingId);
        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseConfigurationSettingWithHttpInfo (string courseId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseConfigurationSetting");

            var localVarPath = "/courses/{courseId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseConfigurationSettingAsync (string courseId, string settingId)
        {
             await DeleteCourseConfigurationSettingAsyncWithHttpInfo(courseId, settingId);

        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseConfigurationSettingAsyncWithHttpInfo (string courseId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseConfigurationSetting");

            var localVarPath = "/courses/{courseId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns></returns>
        public void DeleteCourseVersion (string courseId, int? versionId)
        {
             DeleteCourseVersionWithHttpInfo(courseId, versionId);
        }

        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionAsync (string courseId, int? versionId)
        {
             await DeleteCourseVersionAsyncWithHttpInfo(courseId, versionId);

        }

        /// <summary>
        /// Delete version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteCourseVersionConfigurationSetting (string courseId, int? versionId, string settingId)
        {
             DeleteCourseVersionConfigurationSettingWithHttpInfo(courseId, versionId, settingId);
        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionConfigurationSettingWithHttpInfo (string courseId, int? versionId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionConfigurationSettingAsync (string courseId, int? versionId, string settingId)
        {
             await DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo(courseId, versionId, settingId);

        }

        /// <summary>
        /// Clears the &#x60;settingId&#x60; value for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo (string courseId, int? versionId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get information about &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        public CourseSchema GetCourse (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = GetCourseWithHttpInfo(courseId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        public ApiResponse< CourseSchema > GetCourseWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
            
        }

        /// <summary>
        /// Get information about &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        public async System.Threading.Tasks.Task<CourseSchema> GetCourseAsync (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = await GetCourseAsyncWithHttpInfo(courseId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseAsyncWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
            
        }

        /// <summary>
        /// Returns all configuration settings for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetCourseConfiguration (string courseId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetCourseConfigurationWithHttpInfo(courseId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all configuration settings for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetCourseConfigurationWithHttpInfo (string courseId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.Add("includeMetadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
            
        }

        /// <summary>
        /// Returns all configuration settings for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetCourseConfigurationAsync (string courseId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetCourseConfigurationAsyncWithHttpInfo(courseId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all configuration settings for this course 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseConfigurationAsyncWithHttpInfo (string courseId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.Add("includeMetadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
            
        }

        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetCourseStatements (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetCourseStatementsWithHttpInfo(courseId, learnerId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetCourseStatementsWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseStatements");

            var localVarPath = "/courses/{courseId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (learnerId != null) localVarQueryParams.Add("learnerId", Configuration.ApiClient.ParameterToString(learnerId)); // query parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (more != null) localVarQueryParams.Add("more", Configuration.ApiClient.ParameterToString(more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
            
        }

        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetCourseStatementsAsync (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetCourseStatementsAsyncWithHttpInfo(courseId, learnerId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseStatementsAsyncWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseStatements");

            var localVarPath = "/courses/{courseId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (learnerId != null) localVarQueryParams.Add("learnerId", Configuration.ApiClient.ParameterToString(learnerId)); // query parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (more != null) localVarQueryParams.Add("more", Configuration.ApiClient.ParameterToString(more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
            
        }

        /// <summary>
        /// Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetCourseVersionConfiguration (string courseId, int? versionId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetCourseVersionConfigurationWithHttpInfo(courseId, versionId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.Add("includeMetadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
            
        }

        /// <summary>
        /// Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetCourseVersionConfigurationAsync (string courseId, int? versionId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetCourseVersionConfigurationAsyncWithHttpInfo(courseId, versionId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.Add("includeMetadata", Configuration.ApiClient.ParameterToString(includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
            
        }

        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        public CourseSchema GetCourseVersionInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = GetCourseVersionInfoWithHttpInfo(courseId, versionId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        public ApiResponse< CourseSchema > GetCourseVersionInfoWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionInfo");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionInfo");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
            
        }

        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        public async System.Threading.Tasks.Task<CourseSchema> GetCourseVersionInfoAsync (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = await GetCourseVersionInfoAsyncWithHttpInfo(courseId, versionId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseVersionInfoAsyncWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionInfo");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionInfo");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
            
        }

        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetCourseVersionStatements (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetCourseVersionStatementsWithHttpInfo(courseId, versionId, learnerId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetCourseVersionStatementsWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionStatements");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionStatements");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (learnerId != null) localVarQueryParams.Add("learnerId", Configuration.ApiClient.ParameterToString(learnerId)); // query parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (more != null) localVarQueryParams.Add("more", Configuration.ApiClient.ParameterToString(more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
            
        }

        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetCourseVersionStatementsAsync (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetCourseVersionStatementsAsyncWithHttpInfo(courseId, versionId, learnerId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseVersionStatementsAsyncWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionStatements");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionStatements");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (learnerId != null) localVarQueryParams.Add("learnerId", Configuration.ApiClient.ParameterToString(learnerId)); // query parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (more != null) localVarQueryParams.Add("more", Configuration.ApiClient.ParameterToString(more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
            
        }

        /// <summary>
        /// Get all versions of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseListNonPagedSchema</returns>
        public CourseListNonPagedSchema GetCourseVersions (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseListNonPagedSchema> localVarResponse = GetCourseVersionsWithHttpInfo(courseId, since, until, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all versions of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListNonPagedSchema</returns>
        public ApiResponse< CourseListNonPagedSchema > GetCourseVersionsWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersions");

            var localVarPath = "/courses/{courseId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListNonPagedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListNonPagedSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListNonPagedSchema)));
            
        }

        /// <summary>
        /// Get all versions of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseListNonPagedSchema</returns>
        public async System.Threading.Tasks.Task<CourseListNonPagedSchema> GetCourseVersionsAsync (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseListNonPagedSchema> localVarResponse = await GetCourseVersionsAsyncWithHttpInfo(courseId, since, until, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all versions of &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListNonPagedSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseListNonPagedSchema>> GetCourseVersionsAsyncWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersions");

            var localVarPath = "/courses/{courseId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListNonPagedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListNonPagedSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListNonPagedSchema)));
            
        }

        /// <summary>
        /// Get all courses for &#x60;appId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>CourseListSchema</returns>
        public CourseListSchema GetCourses (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {
             ApiResponse<CourseListSchema> localVarResponse = GetCoursesWithHttpInfo(more, since, until, filter, filterBy, orderBy, includeRegistrationCount, includeCourseMetadata, tags);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all courses for &#x60;appId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of CourseListSchema</returns>
        public ApiResponse< CourseListSchema > GetCoursesWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (more != null) localVarQueryParams.Add("more", Configuration.ApiClient.ParameterToString(more)); // query parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (filterBy != null) localVarQueryParams.Add("filterBy", Configuration.ApiClient.ParameterToString(filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("orderBy", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter
            if (tags != null) localVarQueryParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListSchema)));
            
        }

        /// <summary>
        /// Get all courses for &#x60;appId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of CourseListSchema</returns>
        public async System.Threading.Tasks.Task<CourseListSchema> GetCoursesAsync (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {
             ApiResponse<CourseListSchema> localVarResponse = await GetCoursesAsyncWithHttpInfo(more, since, until, filter, filterBy, orderBy, includeRegistrationCount, includeCourseMetadata, tags);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all courses for &#x60;appId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="more">Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice. (optional)</param>
        /// <param name="since">Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="until">Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used. (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id. (optional)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc. (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>Task of ApiResponse (CourseListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseListSchema>> GetCoursesAsyncWithHttpInfo (string more = null, DateTime? since = null, DateTime? until = null, string filter = null, string filterBy = null, string orderBy = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null, List<string> tags = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (more != null) localVarQueryParams.Add("more", Configuration.ApiClient.ParameterToString(more)); // query parameter
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter
            if (until != null) localVarQueryParams.Add("until", Configuration.ApiClient.ParameterToString(until)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (filterBy != null) localVarQueryParams.Add("filterBy", Configuration.ApiClient.ParameterToString(filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.Add("orderBy", Configuration.ApiClient.ParameterToString(orderBy)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.Add("includeRegistrationCount", Configuration.ApiClient.ParameterToString(includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.Add("includeCourseMetadata", Configuration.ApiClient.ParameterToString(includeCourseMetadata)); // query parameter
            if (tags != null) localVarQueryParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListSchema)));
            
        }

        /// <summary>
        /// Check the status of an import job. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ImportResultSchema</returns>
        public ImportResultSchema GetImportJobStatus (string importJobId)
        {
             ApiResponse<ImportResultSchema> localVarResponse = GetImportJobStatusWithHttpInfo(importJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the status of an import job. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ApiResponse of ImportResultSchema</returns>
        public ApiResponse< ImportResultSchema > GetImportJobStatusWithHttpInfo (string importJobId)
        {
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling CourseApi->GetImportJobStatus");

            var localVarPath = "/courses/importJobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (importJobId != null) localVarPathParams.Add("importJobId", Configuration.ApiClient.ParameterToString(importJobId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportResultSchema)));
            
        }

        /// <summary>
        /// Check the status of an import job. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ImportResultSchema</returns>
        public async System.Threading.Tasks.Task<ImportResultSchema> GetImportJobStatusAsync (string importJobId)
        {
             ApiResponse<ImportResultSchema> localVarResponse = await GetImportJobStatusAsyncWithHttpInfo(importJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the status of an import job. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ApiResponse (ImportResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportResultSchema>> GetImportJobStatusAsyncWithHttpInfo (string importJobId)
        {
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling CourseApi->GetImportJobStatus");

            var localVarPath = "/courses/importJobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (importJobId != null) localVarPathParams.Add("importJobId", Configuration.ApiClient.ParameterToString(importJobId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportResultSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportResultSchema)));
            
        }

        /// <summary>
        /// Set configuration settings for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetCourseConfiguration (string courseId, SettingsPostSchema configurationSettings)
        {
             SetCourseConfigurationWithHttpInfo(courseId, configurationSettings);
        }

        /// <summary>
        /// Set configuration settings for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseConfigurationWithHttpInfo (string courseId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration settings for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseConfigurationAsync (string courseId, SettingsPostSchema configurationSettings)
        {
             await SetCourseConfigurationAsyncWithHttpInfo(courseId, configurationSettings);

        }

        /// <summary>
        /// Set configuration settings for this course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseConfigurationAsyncWithHttpInfo (string courseId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>string</returns>
        public string SetCourseTitle (string courseId, TitleSchema title)
        {
             ApiResponse<string> localVarResponse = SetCourseTitleWithHttpInfo(courseId, title);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SetCourseTitleWithHttpInfo (string courseId, TitleSchema title)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseTitle");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling CourseApi->SetCourseTitle");

            var localVarPath = "/courses/{courseId}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SetCourseTitleAsync (string courseId, TitleSchema title)
        {
             ApiResponse<string> localVarResponse = await SetCourseTitleAsyncWithHttpInfo(courseId, title);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the course title for &#x60;courseId&#x60; 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SetCourseTitleAsyncWithHttpInfo (string courseId, TitleSchema title)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseTitle");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling CourseApi->SetCourseTitle");

            var localVarPath = "/courses/{courseId}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetCourseVersionConfiguration (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
             SetCourseVersionConfigurationWithHttpInfo(courseId, versionId, configurationSettings);
        }

        /// <summary>
        /// Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseVersionConfigurationAsync (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
             await SetCourseVersionConfigurationAsyncWithHttpInfo(courseId, versionId, configurationSettings);

        }

        /// <summary>
        /// Set configuration settings for this course and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (courseId != null) localVarPathParams.Add("courseId", Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
