/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICourseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a launch link to preview a Course 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildCoursePreviewLaunchLink (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get a launch link to preview a Course 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithHttpInfo (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Get a launch link to preview a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        LaunchLinkSchema BuildCoursePreviewLaunchLinkWithVersion (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get a launch link to preview a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        ApiResponse<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Create a Course from a package fetched from an external source 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateFetchAndImportCourseJob (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Create a Course from a package fetched from an external source 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateFetchAndImportCourseJobWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Create a Course from a fetched or referenced external media file 
        /// </summary>
        /// <remarks>
        /// Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateNoUploadAndImportCourseJob (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Create a Course from a fetched or referenced external media file 
        /// </summary>
        /// <remarks>
        /// Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateNoUploadAndImportCourseJobWithHttpInfo (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Create a Course from an uploaded package 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateUploadAndImportCourseJob (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null);

        /// <summary>
        /// Create a Course from an uploaded package 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateUploadAndImportCourseJobWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null);
        /// <summary>
        /// Delete a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns></returns>
        void DeleteCourse (string courseId);

        /// <summary>
        /// Delete a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseWithHttpInfo (string courseId);
        /// <summary>
        /// Delete an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns></returns>
        void DeleteCourseAsset (string courseId, string relativePath);

        /// <summary>
        /// Delete an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseAssetWithHttpInfo (string courseId, string relativePath);
        /// <summary>
        /// Delete a configuration setting explicitly set for a Course 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteCourseConfigurationSetting (string courseId, string settingId);

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseConfigurationSettingWithHttpInfo (string courseId, string settingId);
        /// <summary>
        /// Delete tags from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteCourseTags (string courseId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseTagsWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Delete a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns></returns>
        void DeleteCourseVersion (string courseId, int? versionId);

        /// <summary>
        /// Delete a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Delete an asset file from a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns></returns>
        void DeleteCourseVersionAsset (string courseId, int? versionId, string relativePath);

        /// <summary>
        /// Delete an asset file from a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionAssetWithHttpInfo (string courseId, int? versionId, string relativePath);
        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        void DeleteCourseVersionConfigurationSetting (string courseId, int? versionId, string settingId);

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCourseVersionConfigurationSettingWithHttpInfo (string courseId, int? versionId, string settingId);
        /// <summary>
        /// Get detailed information about a Course 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        CourseSchema GetCourse (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get detailed information about a Course 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        ApiResponse<CourseSchema> GetCourseWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Download an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCourseAsset (string courseId, string relativePath);

        /// <summary>
        /// Download an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCourseAssetWithHttpInfo (string courseId, string relativePath);
        /// <summary>
        /// Get effective configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetCourseConfiguration (string courseId, bool? includeMetadata = null);

        /// <summary>
        /// Get effective configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetCourseConfigurationWithHttpInfo (string courseId, bool? includeMetadata = null);
        /// <summary>
        /// Get a list of asset files in a Course 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>FileListSchema</returns>
        FileListSchema GetCourseFileList (string courseId);

        /// <summary>
        /// Get a list of asset files in a Course 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of FileListSchema</returns>
        ApiResponse<FileListSchema> GetCourseFileListWithHttpInfo (string courseId);
        /// <summary>
        /// Get xAPI statements for a Course 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetCourseStatements (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a Course 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetCourseStatementsWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get tags for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetCourseTags (string courseId);

        /// <summary>
        /// Get tags for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetCourseTagsWithHttpInfo (string courseId);
        /// <summary>
        /// Download an asset file from a specific Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCourseVersionAsset (string courseId, int? versionId, string relativePath);

        /// <summary>
        /// Download an asset file from a specific Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCourseVersionAssetWithHttpInfo (string courseId, int? versionId, string relativePath);
        /// <summary>
        /// Get effective configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        SettingListSchema GetCourseVersionConfiguration (string courseId, int? versionId, bool? includeMetadata = null);

        /// <summary>
        /// Get effective configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        ApiResponse<SettingListSchema> GetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null);
        /// <summary>
        /// Get a list of asset files in a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>FileListSchema</returns>
        FileListSchema GetCourseVersionFileList (string courseId, int? versionId);

        /// <summary>
        /// Get a list of asset files in a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>ApiResponse of FileListSchema</returns>
        ApiResponse<FileListSchema> GetCourseVersionFileListWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Get detailed information about a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        CourseSchema GetCourseVersionInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get detailed information about a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        ApiResponse<CourseSchema> GetCourseVersionInfoWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get xAPI statements for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>XapiStatementResult</returns>
        XapiStatementResult GetCourseVersionStatements (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        ApiResponse<XapiStatementResult> GetCourseVersionStatementsWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get a list of a Course&#39;s Versions 
        /// </summary>
        /// <remarks>
        /// Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseListNonPagedSchema</returns>
        CourseListNonPagedSchema GetCourseVersions (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get a list of a Course&#39;s Versions 
        /// </summary>
        /// <remarks>
        /// Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListNonPagedSchema</returns>
        ApiResponse<CourseListNonPagedSchema> GetCourseVersionsWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Download a zip package for a Course 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetCourseZip (string courseId);

        /// <summary>
        /// Download a zip package for a Course 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetCourseZipWithHttpInfo (string courseId);
        /// <summary>
        /// Get a list of Courses 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>CourseListSchema</returns>
        CourseListSchema GetCourses (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null);

        /// <summary>
        /// Get a list of Courses 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListSchema</returns>
        ApiResponse<CourseListSchema> GetCoursesWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null);
        /// <summary>
        /// Get import job status for a Course 
        /// </summary>
        /// <remarks>
        /// Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ImportJobResultSchema</returns>
        ImportJobResultSchema GetImportJobStatus (string importJobId);

        /// <summary>
        /// Get import job status for a Course 
        /// </summary>
        /// <remarks>
        /// Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ApiResponse of ImportJobResultSchema</returns>
        ApiResponse<ImportJobResultSchema> GetImportJobStatusWithHttpInfo (string importJobId);
        /// <summary>
        /// Download a zip package for a Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetVersionedCourseZip (string courseId, int? versionId);

        /// <summary>
        /// Download a zip package for a Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetVersionedCourseZipWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Import an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        AssetFileSchema ImportCourseAssetFile (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);

        /// <summary>
        /// Import an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        ApiResponse<AssetFileSchema> ImportCourseAssetFileWithHttpInfo (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);
        /// <summary>
        /// Import an asset file for a Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        AssetFileSchema ImportCourseVersionAssetFile (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);

        /// <summary>
        /// Import an asset file for a Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        ApiResponse<AssetFileSchema> ImportCourseVersionAssetFileWithHttpInfo (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);
        /// <summary>
        /// Add tags to a Course 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutCourseTags (string courseId, TagListSchema tags);

        /// <summary>
        /// Add tags to a Course 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCourseTagsWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of Courses 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        void PutCourseTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of Courses 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutCourseTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Update configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetCourseConfiguration (string courseId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Update configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseConfigurationWithHttpInfo (string courseId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Update title for a Course 
        /// </summary>
        /// <remarks>
        /// Updates the title of the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        void SetCourseTitle (string courseId, TitleSchema title);

        /// <summary>
        /// Update title for a Course 
        /// </summary>
        /// <remarks>
        /// Updates the title of the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseTitleWithHttpInfo (string courseId, TitleSchema title);
        /// <summary>
        /// Update configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        void SetCourseVersionConfiguration (string courseId, int? versionId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Update configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Upload an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        AssetFileSchema UploadCourseAssetFile (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);

        /// <summary>
        /// Upload an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        ApiResponse<AssetFileSchema> UploadCourseAssetFileWithHttpInfo (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);
        /// <summary>
        /// Upload an asset file for Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        AssetFileSchema UploadCourseVersionAssetFile (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);

        /// <summary>
        /// Upload an asset file for Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        ApiResponse<AssetFileSchema> UploadCourseVersionAssetFileWithHttpInfo (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a launch link to preview a Course 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkAsync (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get a launch link to preview a Course 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkAsyncWithHttpInfo (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Get a launch link to preview a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionAsync (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest);

        /// <summary>
        /// Get a launch link to preview a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest);
        /// <summary>
        /// Create a Course from a package fetched from an external source 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateFetchAndImportCourseJobAsync (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Create a Course from a package fetched from an external source 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateFetchAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Create a Course from a fetched or referenced external media file 
        /// </summary>
        /// <remarks>
        /// Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateNoUploadAndImportCourseJobAsync (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);

        /// <summary>
        /// Create a Course from a fetched or referenced external media file 
        /// </summary>
        /// <remarks>
        /// Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateNoUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null);
        /// <summary>
        /// Create a Course from an uploaded package 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateUploadAndImportCourseJobAsync (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null);

        /// <summary>
        /// Create a Course from an uploaded package 
        /// </summary>
        /// <remarks>
        /// Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null);
        /// <summary>
        /// Delete a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseAsync (string courseId);

        /// <summary>
        /// Delete a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Delete an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseAssetAsync (string courseId, string relativePath);

        /// <summary>
        /// Delete an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAssetAsyncWithHttpInfo (string courseId, string relativePath);
        /// <summary>
        /// Delete a configuration setting explicitly set for a Course 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseConfigurationSettingAsync (string courseId, string settingId);

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseConfigurationSettingAsyncWithHttpInfo (string courseId, string settingId);
        /// <summary>
        /// Delete tags from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseTagsAsync (string courseId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a Course 
        /// </summary>
        /// <remarks>
        /// Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Delete a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionAsync (string courseId, int? versionId);

        /// <summary>
        /// Delete a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Delete an asset file from a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionAssetAsync (string courseId, int? versionId, string relativePath);

        /// <summary>
        /// Delete an asset file from a Course Version 
        /// </summary>
        /// <remarks>
        /// Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAssetAsyncWithHttpInfo (string courseId, int? versionId, string relativePath);
        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCourseVersionConfigurationSettingAsync (string courseId, int? versionId, string settingId);

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version 
        /// </summary>
        /// <remarks>
        /// Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo (string courseId, int? versionId, string settingId);
        /// <summary>
        /// Get detailed information about a Course 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        System.Threading.Tasks.Task<CourseSchema> GetCourseAsync (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get detailed information about a Course 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseAsyncWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Download an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCourseAssetAsync (string courseId, string relativePath);

        /// <summary>
        /// Download an asset file from a Course 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCourseAssetAsyncWithHttpInfo (string courseId, string relativePath);
        /// <summary>
        /// Get effective configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetCourseConfigurationAsync (string courseId, bool? includeMetadata = null);

        /// <summary>
        /// Get effective configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseConfigurationAsyncWithHttpInfo (string courseId, bool? includeMetadata = null);
        /// <summary>
        /// Get a list of asset files in a Course 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of FileListSchema</returns>
        System.Threading.Tasks.Task<FileListSchema> GetCourseFileListAsync (string courseId);

        /// <summary>
        /// Get a list of asset files in a Course 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (FileListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileListSchema>> GetCourseFileListAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Get xAPI statements for a Course 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetCourseStatementsAsync (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a Course 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseStatementsAsyncWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get tags for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetCourseTagsAsync (string courseId);

        /// <summary>
        /// Get tags for a Course 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetCourseTagsAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Download an asset file from a specific Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCourseVersionAssetAsync (string courseId, int? versionId, string relativePath);

        /// <summary>
        /// Download an asset file from a specific Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCourseVersionAssetAsyncWithHttpInfo (string courseId, int? versionId, string relativePath);
        /// <summary>
        /// Get effective configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        System.Threading.Tasks.Task<SettingListSchema> GetCourseVersionConfigurationAsync (string courseId, int? versionId, bool? includeMetadata = null);

        /// <summary>
        /// Get effective configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null);
        /// <summary>
        /// Get a list of asset files in a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of FileListSchema</returns>
        System.Threading.Tasks.Task<FileListSchema> GetCourseVersionFileListAsync (string courseId, int? versionId);

        /// <summary>
        /// Get a list of asset files in a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of ApiResponse (FileListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileListSchema>> GetCourseVersionFileListAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Get detailed information about a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        System.Threading.Tasks.Task<CourseSchema> GetCourseVersionInfoAsync (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get detailed information about a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseVersionInfoAsyncWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Get xAPI statements for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        System.Threading.Tasks.Task<XapiStatementResult> GetCourseVersionStatementsAsync (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);

        /// <summary>
        /// Get xAPI statements for a Course Version 
        /// </summary>
        /// <remarks>
        /// Returns xAPI statements for the course version. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseVersionStatementsAsyncWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null);
        /// <summary>
        /// Get a list of a Course&#39;s Versions 
        /// </summary>
        /// <remarks>
        /// Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseListNonPagedSchema</returns>
        System.Threading.Tasks.Task<CourseListNonPagedSchema> GetCourseVersionsAsync (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);

        /// <summary>
        /// Get a list of a Course&#39;s Versions 
        /// </summary>
        /// <remarks>
        /// Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListNonPagedSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseListNonPagedSchema>> GetCourseVersionsAsyncWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null);
        /// <summary>
        /// Download a zip package for a Course 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetCourseZipAsync (string courseId);

        /// <summary>
        /// Download a zip package for a Course 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCourseZipAsyncWithHttpInfo (string courseId);
        /// <summary>
        /// Get a list of Courses 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of CourseListSchema</returns>
        System.Threading.Tasks.Task<CourseListSchema> GetCoursesAsync (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null);

        /// <summary>
        /// Get a list of Courses 
        /// </summary>
        /// <remarks>
        /// Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<CourseListSchema>> GetCoursesAsyncWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null);
        /// <summary>
        /// Get import job status for a Course 
        /// </summary>
        /// <remarks>
        /// Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ImportJobResultSchema</returns>
        System.Threading.Tasks.Task<ImportJobResultSchema> GetImportJobStatusAsync (string importJobId);

        /// <summary>
        /// Get import job status for a Course 
        /// </summary>
        /// <remarks>
        /// Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ApiResponse (ImportJobResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportJobResultSchema>> GetImportJobStatusAsyncWithHttpInfo (string importJobId);
        /// <summary>
        /// Download a zip package for a Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetVersionedCourseZipAsync (string courseId, int? versionId);

        /// <summary>
        /// Download a zip package for a Course Version 
        /// </summary>
        /// <remarks>
        /// Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetVersionedCourseZipAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Import an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        System.Threading.Tasks.Task<AssetFileSchema> ImportCourseAssetFileAsync (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);

        /// <summary>
        /// Import an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> ImportCourseAssetFileAsyncWithHttpInfo (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);
        /// <summary>
        /// Import an asset file for a Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        System.Threading.Tasks.Task<AssetFileSchema> ImportCourseVersionAssetFileAsync (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);

        /// <summary>
        /// Import an asset file for a Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> ImportCourseVersionAssetFileAsyncWithHttpInfo (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null);
        /// <summary>
        /// Add tags to a Course 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCourseTagsAsync (string courseId, TagListSchema tags);

        /// <summary>
        /// Add tags to a Course 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of Courses 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutCourseTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of Courses 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Update configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseConfigurationAsync (string courseId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Update configuration settings for a Course 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseConfigurationAsyncWithHttpInfo (string courseId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Update title for a Course 
        /// </summary>
        /// <remarks>
        /// Updates the title of the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseTitleAsync (string courseId, TitleSchema title);

        /// <summary>
        /// Update title for a Course 
        /// </summary>
        /// <remarks>
        /// Updates the title of the course. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseTitleAsyncWithHttpInfo (string courseId, TitleSchema title);
        /// <summary>
        /// Update configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseVersionConfigurationAsync (string courseId, int? versionId, SettingsPostSchema configurationSettings);

        /// <summary>
        /// Update configuration settings for a Course Version 
        /// </summary>
        /// <remarks>
        /// Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings);
        /// <summary>
        /// Upload an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        System.Threading.Tasks.Task<AssetFileSchema> UploadCourseAssetFileAsync (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);

        /// <summary>
        /// Upload an asset file for a Course 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> UploadCourseAssetFileAsyncWithHttpInfo (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);
        /// <summary>
        /// Upload an asset file for Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        System.Threading.Tasks.Task<AssetFileSchema> UploadCourseVersionAssetFileAsync (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);

        /// <summary>
        /// Upload an asset file for Course Version 
        /// </summary>
        /// <remarks>
        /// Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> UploadCourseVersionAssetFileAsyncWithHttpInfo (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CourseApi : ICourseApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CourseApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CourseApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a launch link to preview a Course  Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildCoursePreviewLaunchLink (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildCoursePreviewLaunchLinkWithHttpInfo(courseId, launchLinkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a launch link to preview a Course  Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildCoursePreviewLaunchLinkWithHttpInfo (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLink");

            var localVarPath = "/courses/{courseId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get a launch link to preview a Course  Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkAsync (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildCoursePreviewLaunchLinkAsyncWithHttpInfo(courseId, launchLinkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a launch link to preview a Course  Returns the launch link to use to preview the course.  Course preview does not require an underlying registration. As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkAsyncWithHttpInfo (string courseId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLink");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLink");

            var localVarPath = "/courses/{courseId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get a launch link to preview a Course Version  Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>LaunchLinkSchema</returns>
        public LaunchLinkSchema BuildCoursePreviewLaunchLinkWithVersion (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo(courseId, versionId, launchLinkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a launch link to preview a Course Version  Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>ApiResponse of LaunchLinkSchema</returns>
        public ApiResponse< LaunchLinkSchema > BuildCoursePreviewLaunchLinkWithVersionWithHttpInfo (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLinkWithVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Get a launch link to preview a Course Version  Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of LaunchLinkSchema</returns>
        public async System.Threading.Tasks.Task<LaunchLinkSchema> BuildCoursePreviewLaunchLinkWithVersionAsync (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
             ApiResponse<LaunchLinkSchema> localVarResponse = await BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo(courseId, versionId, launchLinkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a launch link to preview a Course Version  Returns the launch link to use to preview the course version.  Course preview does not require an underlying registration.  As such, no interactions will be tracked during the preview launch.  Previews are meant to be a way to confirm the course looks and acts the way it should.  &gt;**Note:** &gt;The cmi5 standard does not support the ability to preview a course.  A launch link can be built for a cmi5 course, but visiting the link will result in an error page.  More details can be found in this [article explaining the complications behind cmi5 preview launches](https://support.scorm.com/hc/en-us/articles/1260805676710). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="launchLinkRequest"></param>
        /// <returns>Task of ApiResponse (LaunchLinkSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LaunchLinkSchema>> BuildCoursePreviewLaunchLinkWithVersionAsyncWithHttpInfo (string courseId, int? versionId, PreviewLaunchLinkRequestSchema launchLinkRequest)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");
            // verify the required parameter 'launchLinkRequest' is set
            if (launchLinkRequest == null)
                throw new ApiException(400, "Missing required parameter 'launchLinkRequest' when calling CourseApi->BuildCoursePreviewLaunchLinkWithVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (launchLinkRequest != null && launchLinkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(launchLinkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = launchLinkRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildCoursePreviewLaunchLinkWithVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LaunchLinkSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LaunchLinkSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LaunchLinkSchema)));
        }

        /// <summary>
        /// Create a Course from a package fetched from an external source  Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateFetchAndImportCourseJob (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateFetchAndImportCourseJobWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Course from a package fetched from an external source  Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateFetchAndImportCourseJobWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateFetchAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateFetchAndImportCourseJob");

            var localVarPath = "/courses/importJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFetchAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a Course from a package fetched from an external source  Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateFetchAndImportCourseJobAsync (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateFetchAndImportCourseJobAsyncWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Course from a package fetched from an external source  Creates a course from a package fetched and imported from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateFetchAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportFetchRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateFetchAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateFetchAndImportCourseJob");

            var localVarPath = "/courses/importJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFetchAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a Course from a fetched or referenced external media file  Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateNoUploadAndImportCourseJob (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateNoUploadAndImportCourseJobWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Course from a fetched or referenced external media file  Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateNoUploadAndImportCourseJobWithHttpInfo (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateNoUploadAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateNoUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/noUpload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNoUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a Course from a fetched or referenced external media file  Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateNoUploadAndImportCourseJobAsync (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateNoUploadAndImportCourseJobAsyncWithHttpInfo(courseId, importRequest, mayCreateNewVersion, postbackUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Course from a fetched or referenced external media file  Creates a course from one of the following methods: fetchRequest, mediaFileReferenceRequest, or connectorReferenceRequest. In all cases, an import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  - A fetchRequest performs the same actions as CreateFetchAndImportCourseJob.  A course will be created from a package fetched from the provided url.  The package will be downloaded from the url and stored in SCORM Cloud. - A mediaFileReferenceRequest will not store the file in SCORM Cloud.  Instead it will reference the media file at the time the learner needs to view the file from the provided url. - A connectorReferenceRequest is used to import content from an external content connector, for example an LTI 1.3 tool.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes.  &gt;**Info:** &gt;Unless working with media files, it is typical to use one of the other two import methods. &gt;- CreateUploadAndImportCourseJob would be used if the course is in your local file system. &gt;- CreateFetchAndImportCourseJob would be better suited for situations where the course is uploaded remotely but is accessible via a public url. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="importRequest"></param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateNoUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, ImportRequestSchema importRequest, bool? mayCreateNewVersion = null, string postbackUrl = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateNoUploadAndImportCourseJob");
            // verify the required parameter 'importRequest' is set
            if (importRequest == null)
                throw new ApiException(400, "Missing required parameter 'importRequest' when calling CourseApi->CreateNoUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/noUpload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (importRequest != null && importRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importRequest; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNoUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a Course from an uploaded package  Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateUploadAndImportCourseJob (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateUploadAndImportCourseJobWithHttpInfo(courseId, mayCreateNewVersion, postbackUrl, uploadedContentType, contentMetadata, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Course from an uploaded package  Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateUploadAndImportCourseJobWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (uploadedContentType != null) localVarHeaderParams.Add("uploadedContentType", this.Configuration.ApiClient.ParameterToString(uploadedContentType)); // header parameter
            if (contentMetadata != null) localVarFormParams.Add("contentMetadata", this.Configuration.ApiClient.ParameterToString(contentMetadata)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Create a Course from an uploaded package  Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateUploadAndImportCourseJobAsync (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateUploadAndImportCourseJobAsyncWithHttpInfo(courseId, mayCreateNewVersion, postbackUrl, uploadedContentType, contentMetadata, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Course from an uploaded package  Creates a course from a package uploaded from your file system.  The package will be sent as part of the request and will be stored in SCORM Cloud.  An import job ID will be returned, which can be used with GetImportJobStatus to view the status of the import.  Courses represent the learning material a learner will progress through.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId">A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.</param>
        /// <param name="mayCreateNewVersion">Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (optional, default to false)</param>
        /// <param name="postbackUrl">An optional parameter that specifies a URL to send a postback to when the course has finished uploading. (optional)</param>
        /// <param name="uploadedContentType">The MIME type identifier for the content to be uploaded. This is required if uploading a media file (.pdf, .mp3, or .mp4). (optional, default to application/zip)</param>
        /// <param name="contentMetadata">Serialized &#39;mediaFileMetadata&#39; schema. (optional)</param>
        /// <param name="_file">The zip file of the course contents to import.  (optional)</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateUploadAndImportCourseJobAsyncWithHttpInfo (string courseId, bool? mayCreateNewVersion = null, string postbackUrl = null, string uploadedContentType = null, string contentMetadata = null, System.IO.Stream _file = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->CreateUploadAndImportCourseJob");

            var localVarPath = "/courses/importJobs/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "courseId", courseId)); // query parameter
            if (mayCreateNewVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mayCreateNewVersion", mayCreateNewVersion)); // query parameter
            if (postbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "postbackUrl", postbackUrl)); // query parameter
            if (uploadedContentType != null) localVarHeaderParams.Add("uploadedContentType", this.Configuration.ApiClient.ParameterToString(uploadedContentType)); // header parameter
            if (contentMetadata != null) localVarFormParams.Add("contentMetadata", this.Configuration.ApiClient.ParameterToString(contentMetadata)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUploadAndImportCourseJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Delete a Course  Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns></returns>
        public void DeleteCourse (string courseId)
        {
             DeleteCourseWithHttpInfo(courseId);
        }

        /// <summary>
        /// Delete a Course  Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Course  Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseAsync (string courseId)
        {
             await DeleteCourseAsyncWithHttpInfo(courseId);

        }

        /// <summary>
        /// Delete a Course  Deletes the specified course.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to the course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an asset file from a Course  Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns></returns>
        public void DeleteCourseAsset (string courseId, string relativePath)
        {
             DeleteCourseAssetWithHttpInfo(courseId, relativePath);
        }

        /// <summary>
        /// Delete an asset file from a Course  Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseAssetWithHttpInfo (string courseId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->DeleteCourseAsset");

            var localVarPath = "/courses/{courseId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an asset file from a Course  Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseAssetAsync (string courseId, string relativePath)
        {
             await DeleteCourseAssetAsyncWithHttpInfo(courseId, relativePath);

        }

        /// <summary>
        /// Delete an asset file from a Course  Deletes the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseAssetFile or UploadCourseAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseAssetAsyncWithHttpInfo (string courseId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->DeleteCourseAsset");

            var localVarPath = "/courses/{courseId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course  Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteCourseConfigurationSetting (string courseId, string settingId)
        {
             DeleteCourseConfigurationSettingWithHttpInfo(courseId, settingId);
        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course  Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseConfigurationSettingWithHttpInfo (string courseId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseConfigurationSetting");

            var localVarPath = "/courses/{courseId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course  Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseConfigurationSettingAsync (string courseId, string settingId)
        {
             await DeleteCourseConfigurationSettingAsyncWithHttpInfo(courseId, settingId);

        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course  Clears the specified setting from the course.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseConfigurationSettingAsyncWithHttpInfo (string courseId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseConfigurationSetting");

            var localVarPath = "/courses/{courseId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a Course  Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteCourseTags (string courseId, TagListSchema tags)
        {
             DeleteCourseTagsWithHttpInfo(courseId, tags);
        }

        /// <summary>
        /// Delete tags from a Course  Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseTagsWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->DeleteCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a Course  Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseTagsAsync (string courseId, TagListSchema tags)
        {
             await DeleteCourseTagsAsyncWithHttpInfo(courseId, tags);

        }

        /// <summary>
        /// Delete tags from a Course  Deletes the specified tags from the course.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->DeleteCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Course Version  Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns></returns>
        public void DeleteCourseVersion (string courseId, int? versionId)
        {
             DeleteCourseVersionWithHttpInfo(courseId, versionId);
        }

        /// <summary>
        /// Delete a Course Version  Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Course Version  Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionAsync (string courseId, int? versionId)
        {
             await DeleteCourseVersionAsyncWithHttpInfo(courseId, versionId);

        }

        /// <summary>
        /// Delete a Course Version  Deletes the specified version of the course.  If deleting the last remaining version of the course, the course itself will be deleted and no longer accessible.  &gt;**Caution:** &gt;When a course is deleted, so is everything connected to this course.  This includes: &gt;- Registrations &gt;- Invitations &gt;- Dispatches &gt;- Debug Logs 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersion");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an asset file from a Course Version  Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns></returns>
        public void DeleteCourseVersionAsset (string courseId, int? versionId, string relativePath)
        {
             DeleteCourseVersionAssetWithHttpInfo(courseId, versionId, relativePath);
        }

        /// <summary>
        /// Delete an asset file from a Course Version  Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionAssetWithHttpInfo (string courseId, int? versionId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionAsset");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->DeleteCourseVersionAsset");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an asset file from a Course Version  Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionAssetAsync (string courseId, int? versionId, string relativePath)
        {
             await DeleteCourseVersionAssetAsyncWithHttpInfo(courseId, versionId, relativePath);

        }

        /// <summary>
        /// Delete an asset file from a Course Version  Deletes the asset file at the specified relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file.  &gt;**Caution:** &gt;This may have unintended consequences if the asset is still being linked to in other files in the course.  Make sure that other files relying on this asset are modified or removed as well.  This can be done with the ImportCourseVersionAssetFile or UploadCourseVersionAssetFile endpoints. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionAssetAsyncWithHttpInfo (string courseId, int? versionId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionAsset");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->DeleteCourseVersionAsset");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version  Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns></returns>
        public void DeleteCourseVersionConfigurationSetting (string courseId, int? versionId, string settingId)
        {
             DeleteCourseVersionConfigurationSettingWithHttpInfo(courseId, versionId, settingId);
        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version  Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCourseVersionConfigurationSettingWithHttpInfo (string courseId, int? versionId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version  Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCourseVersionConfigurationSettingAsync (string courseId, int? versionId, string settingId)
        {
             await DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo(courseId, versionId, settingId);

        }

        /// <summary>
        /// Delete a configuration setting explicitly set for a Course Version  Clears the specified setting from the course version.  This causes the setting to inherit a value from a higher level (e.g. application).  If the configuration setting was not set at the course level it will continue to persist and will require deletion from the level it was set. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="settingId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCourseVersionConfigurationSettingAsyncWithHttpInfo (string courseId, int? versionId, string settingId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");
            // verify the required parameter 'settingId' is set
            if (settingId == null)
                throw new ApiException(400, "Missing required parameter 'settingId' when calling CourseApi->DeleteCourseVersionConfigurationSetting");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (settingId != null) localVarPathParams.Add("settingId", this.Configuration.ApiClient.ParameterToString(settingId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCourseVersionConfigurationSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get detailed information about a Course  Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        public CourseSchema GetCourse (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = GetCourseWithHttpInfo(courseId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a Course  Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        public ApiResponse< CourseSchema > GetCourseWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get detailed information about a Course  Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        public async System.Threading.Tasks.Task<CourseSchema> GetCourseAsync (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = await GetCourseAsyncWithHttpInfo(courseId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a Course  Returns detailed information about the course.  This includes title, update date, learning standard, and version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseAsyncWithHttpInfo (string courseId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourse");

            var localVarPath = "/courses/{courseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Download an asset file from a Course  Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCourseAsset (string courseId, string relativePath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetCourseAssetWithHttpInfo(courseId, relativePath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an asset file from a Course  Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetCourseAssetWithHttpInfo (string courseId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->GetCourseAsset");

            var localVarPath = "/courses/{courseId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download an asset file from a Course  Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCourseAssetAsync (string courseId, string relativePath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetCourseAssetAsyncWithHttpInfo(courseId, relativePath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an asset file from a Course  Downloads the asset file at the specified relative path from the latest version of the course. GetCourseFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCourseAssetAsyncWithHttpInfo (string courseId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->GetCourseAsset");

            var localVarPath = "/courses/{courseId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get effective configuration settings for a Course  Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetCourseConfiguration (string courseId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetCourseConfigurationWithHttpInfo(courseId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective configuration settings for a Course  Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetCourseConfigurationWithHttpInfo (string courseId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get effective configuration settings for a Course  Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetCourseConfigurationAsync (string courseId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetCourseConfigurationAsyncWithHttpInfo(courseId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get effective configuration settings for a Course  Returns the effective configuration settings for the course.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseConfigurationAsyncWithHttpInfo (string courseId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get a list of asset files in a Course  Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>FileListSchema</returns>
        public FileListSchema GetCourseFileList (string courseId)
        {
             ApiResponse<FileListSchema> localVarResponse = GetCourseFileListWithHttpInfo(courseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of asset files in a Course  Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of FileListSchema</returns>
        public ApiResponse< FileListSchema > GetCourseFileListWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseFileList");

            var localVarPath = "/courses/{courseId}/asset/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseFileList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileListSchema)));
        }

        /// <summary>
        /// Get a list of asset files in a Course  Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of FileListSchema</returns>
        public async System.Threading.Tasks.Task<FileListSchema> GetCourseFileListAsync (string courseId)
        {
             ApiResponse<FileListSchema> localVarResponse = await GetCourseFileListAsyncWithHttpInfo(courseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of asset files in a Course  Returns a list of asset files in the course.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (FileListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileListSchema>> GetCourseFileListAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseFileList");

            var localVarPath = "/courses/{courseId}/asset/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseFileList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileListSchema)));
        }

        /// <summary>
        /// Get xAPI statements for a Course  Returns xAPI statements for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetCourseStatements (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetCourseStatementsWithHttpInfo(courseId, learnerId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for a Course  Returns xAPI statements for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetCourseStatementsWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseStatements");

            var localVarPath = "/courses/{courseId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get xAPI statements for a Course  Returns xAPI statements for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetCourseStatementsAsync (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetCourseStatementsAsyncWithHttpInfo(courseId, learnerId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for a Course  Returns xAPI statements for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseStatementsAsyncWithHttpInfo (string courseId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseStatements");

            var localVarPath = "/courses/{courseId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get tags for a Course  Returns the tags for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetCourseTags (string courseId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetCourseTagsWithHttpInfo(courseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags for a Course  Returns the tags for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetCourseTagsWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get tags for a Course  Returns the tags for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetCourseTagsAsync (string courseId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetCourseTagsAsyncWithHttpInfo(courseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags for a Course  Returns the tags for the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetCourseTagsAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Download an asset file from a specific Course Version  Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCourseVersionAsset (string courseId, int? versionId, string relativePath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetCourseVersionAssetWithHttpInfo(courseId, versionId, relativePath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an asset file from a specific Course Version  Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetCourseVersionAssetWithHttpInfo (string courseId, int? versionId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionAsset");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->GetCourseVersionAsset");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download an asset file from a specific Course Version  Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCourseVersionAssetAsync (string courseId, int? versionId, string relativePath)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetCourseVersionAssetAsyncWithHttpInfo(courseId, versionId, relativePath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an asset file from a specific Course Version  Downloads the asset file at the provided relative path from the course version.  GetCourseVersionFileList can be used to find the relative path of the file. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="relativePath">Relative path of the asset within the course. </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCourseVersionAssetAsyncWithHttpInfo (string courseId, int? versionId, string relativePath)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionAsset");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionAsset");
            // verify the required parameter 'relativePath' is set
            if (relativePath == null)
                throw new ApiException(400, "Missing required parameter 'relativePath' when calling CourseApi->GetCourseVersionAsset");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (relativePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relativePath", relativePath)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionAsset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get effective configuration settings for a Course Version  Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>SettingListSchema</returns>
        public SettingListSchema GetCourseVersionConfiguration (string courseId, int? versionId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = GetCourseVersionConfigurationWithHttpInfo(courseId, versionId, includeMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get effective configuration settings for a Course Version  Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>ApiResponse of SettingListSchema</returns>
        public ApiResponse< SettingListSchema > GetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get effective configuration settings for a Course Version  Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of SettingListSchema</returns>
        public async System.Threading.Tasks.Task<SettingListSchema> GetCourseVersionConfigurationAsync (string courseId, int? versionId, bool? includeMetadata = null)
        {
             ApiResponse<SettingListSchema> localVarResponse = await GetCourseVersionConfigurationAsyncWithHttpInfo(courseId, versionId, includeMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get effective configuration settings for a Course Version  Returns the effective configuration settings for the course version.  If not set at the course level, the setting will inherit a value from a higher level (e.g. application).  If there is a configuration setting present at a more specific level, that setting will override the one set at the course level. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeMetadata"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SettingListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SettingListSchema>> GetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, bool? includeMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMetadata", includeMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettingListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SettingListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettingListSchema)));
        }

        /// <summary>
        /// Get a list of asset files in a Course Version  Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>FileListSchema</returns>
        public FileListSchema GetCourseVersionFileList (string courseId, int? versionId)
        {
             ApiResponse<FileListSchema> localVarResponse = GetCourseVersionFileListWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of asset files in a Course Version  Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>ApiResponse of FileListSchema</returns>
        public ApiResponse< FileListSchema > GetCourseVersionFileListWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionFileList");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionFileList");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionFileList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileListSchema)));
        }

        /// <summary>
        /// Get a list of asset files in a Course Version  Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of FileListSchema</returns>
        public async System.Threading.Tasks.Task<FileListSchema> GetCourseVersionFileListAsync (string courseId, int? versionId)
        {
             ApiResponse<FileListSchema> localVarResponse = await GetCourseVersionFileListAsyncWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of asset files in a Course Version  Returns a list of asset files in the course version.  Included will be the relative path to use for the other course asset manipulation calls. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of ApiResponse (FileListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileListSchema>> GetCourseVersionFileListAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionFileList");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionFileList");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionFileList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileListSchema)));
        }

        /// <summary>
        /// Get detailed information about a Course Version  Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseSchema</returns>
        public CourseSchema GetCourseVersionInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = GetCourseVersionInfoWithHttpInfo(courseId, versionId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a Course Version  Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseSchema</returns>
        public ApiResponse< CourseSchema > GetCourseVersionInfoWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionInfo");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionInfo");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get detailed information about a Course Version  Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseSchema</returns>
        public async System.Threading.Tasks.Task<CourseSchema> GetCourseVersionInfoAsync (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseSchema> localVarResponse = await GetCourseVersionInfoAsyncWithHttpInfo(courseId, versionId, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a Course Version  Returns detailed information about the course version.  This includes update date and registration count (if optional value is passed in). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseSchema>> GetCourseVersionInfoAsyncWithHttpInfo (string courseId, int? versionId, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionInfo");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionInfo");

            var localVarPath = "/courses/{courseId}/versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseSchema)));
        }

        /// <summary>
        /// Get xAPI statements for a Course Version  Returns xAPI statements for the course version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>XapiStatementResult</returns>
        public XapiStatementResult GetCourseVersionStatements (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = GetCourseVersionStatementsWithHttpInfo(courseId, versionId, learnerId, since, until, more);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get xAPI statements for a Course Version  Returns xAPI statements for the course version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>ApiResponse of XapiStatementResult</returns>
        public ApiResponse< XapiStatementResult > GetCourseVersionStatementsWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionStatements");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionStatements");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get xAPI statements for a Course Version  Returns xAPI statements for the course version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of XapiStatementResult</returns>
        public async System.Threading.Tasks.Task<XapiStatementResult> GetCourseVersionStatementsAsync (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
             ApiResponse<XapiStatementResult> localVarResponse = await GetCourseVersionStatementsAsyncWithHttpInfo(courseId, versionId, learnerId, since, until, more);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get xAPI statements for a Course Version  Returns xAPI statements for the course version. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="learnerId">Only entries for the specified learner id will be included. (optional)</param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <returns>Task of ApiResponse (XapiStatementResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<XapiStatementResult>> GetCourseVersionStatementsAsyncWithHttpInfo (string courseId, int? versionId, string learnerId = null, DateTime? since = null, DateTime? until = null, string more = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersionStatements");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetCourseVersionStatements");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/xAPIStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (learnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "learnerId", learnerId)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersionStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<XapiStatementResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (XapiStatementResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(XapiStatementResult)));
        }

        /// <summary>
        /// Get a list of a Course&#39;s Versions  Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>CourseListNonPagedSchema</returns>
        public CourseListNonPagedSchema GetCourseVersions (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseListNonPagedSchema> localVarResponse = GetCourseVersionsWithHttpInfo(courseId, since, until, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of a Course&#39;s Versions  Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListNonPagedSchema</returns>
        public ApiResponse< CourseListNonPagedSchema > GetCourseVersionsWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersions");

            var localVarPath = "/courses/{courseId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListNonPagedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListNonPagedSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListNonPagedSchema)));
        }

        /// <summary>
        /// Get a list of a Course&#39;s Versions  Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of CourseListNonPagedSchema</returns>
        public async System.Threading.Tasks.Task<CourseListNonPagedSchema> GetCourseVersionsAsync (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
             ApiResponse<CourseListNonPagedSchema> localVarResponse = await GetCourseVersionsAsyncWithHttpInfo(courseId, since, until, includeRegistrationCount, includeCourseMetadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of a Course&#39;s Versions  Returns information about all versions of the course.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListNonPagedSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseListNonPagedSchema>> GetCourseVersionsAsyncWithHttpInfo (string courseId, DateTime? since = null, DateTime? until = null, bool? includeRegistrationCount = null, bool? includeCourseMetadata = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseVersions");

            var localVarPath = "/courses/{courseId}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListNonPagedSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListNonPagedSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListNonPagedSchema)));
        }

        /// <summary>
        /// Download a zip package for a Course  Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetCourseZip (string courseId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetCourseZipWithHttpInfo(courseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a zip package for a Course  Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetCourseZipWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseZip");

            var localVarPath = "/courses/{courseId}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download a zip package for a Course  Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetCourseZipAsync (string courseId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetCourseZipAsyncWithHttpInfo(courseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a zip package for a Course  Downloads a zip package for the course.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course, use &#x60;GetCourseAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetCourseZipAsyncWithHttpInfo (string courseId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetCourseZip");

            var localVarPath = "/courses/{courseId}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get a list of Courses  Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>CourseListSchema</returns>
        public CourseListSchema GetCourses (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null)
        {
             ApiResponse<CourseListSchema> localVarResponse = GetCoursesWithHttpInfo(since, until, datetimeFilter, tags, filter, filterBy, orderBy, more, includeCourseMetadata, includeRegistrationCount, includeTotalCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Courses  Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>ApiResponse of CourseListSchema</returns>
        public ApiResponse< CourseListSchema > GetCoursesWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeTotalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTotalCount", includeTotalCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListSchema)));
        }

        /// <summary>
        /// Get a list of Courses  Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of CourseListSchema</returns>
        public async System.Threading.Tasks.Task<CourseListSchema> GetCoursesAsync (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null)
        {
             ApiResponse<CourseListSchema> localVarResponse = await GetCoursesAsyncWithHttpInfo(since, until, datetimeFilter, tags, filter, filterBy, orderBy, more, includeCourseMetadata, includeRegistrationCount, includeTotalCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Courses  Returns a list of courses.  Can be filtered using the request parameters to provide a subset of results.  &gt;**Note:** &gt;This request is paginated and will only provide a limited amount of resources at a time.  If there are more results to be collected, a &#x60;more&#x60; token provided with the response which can be passed to get the next page of results.  When passing this token, no other filter parameters can be sent as part of the request.  The resources will continue to respect the filters passed in by the original request. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="until">Filter by ISO 8601 TimeStamp inclusive (defaults to UTC) (optional)</param>
        /// <param name="datetimeFilter">Specifies field that &#x60;since&#x60; and &#x60;until&#x60; parameters are applied against (optional, default to updated)</param>
        /// <param name="tags">Filter items matching any tag provided (not all) (optional)</param>
        /// <param name="filter">Optional string which filters results by a specified field (described by filterBy). (optional)</param>
        /// <param name="filterBy">Optional enum parameter for specifying the field on which to run the filter.  (optional, default to course_id)</param>
        /// <param name="orderBy">Optional enum parameter for specifying the field and order by which to sort the results.  (optional, default to created_desc)</param>
        /// <param name="more">Pagination token returned as &#x60;more&#x60; property of multi page list requests (optional)</param>
        /// <param name="includeCourseMetadata">Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (optional, default to false)</param>
        /// <param name="includeRegistrationCount">Include the registration count in the results (optional, default to false)</param>
        /// <param name="includeTotalCount">Include the total count of results matching the provided filters as a header on the initial request.  The header will not be present on subsequent requests resulting from passing the &#x60;more&#x60; token.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CourseListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CourseListSchema>> GetCoursesAsyncWithHttpInfo (DateTime? since = null, DateTime? until = null, string datetimeFilter = null, List<string> tags = null, string filter = null, string filterBy = null, string orderBy = null, string more = null, bool? includeCourseMetadata = null, bool? includeRegistrationCount = null, bool? includeTotalCount = null)
        {

            var localVarPath = "/courses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (datetimeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datetimeFilter", datetimeFilter)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "tags", tags)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filterBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterBy", filterBy)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (more != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "more", more)); // query parameter
            if (includeCourseMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeCourseMetadata", includeCourseMetadata)); // query parameter
            if (includeRegistrationCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRegistrationCount", includeRegistrationCount)); // query parameter
            if (includeTotalCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeTotalCount", includeTotalCount)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CourseListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CourseListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CourseListSchema)));
        }

        /// <summary>
        /// Get import job status for a Course  Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ImportJobResultSchema</returns>
        public ImportJobResultSchema GetImportJobStatus (string importJobId)
        {
             ApiResponse<ImportJobResultSchema> localVarResponse = GetImportJobStatusWithHttpInfo(importJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get import job status for a Course  Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>ApiResponse of ImportJobResultSchema</returns>
        public ApiResponse< ImportJobResultSchema > GetImportJobStatusWithHttpInfo (string importJobId)
        {
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling CourseApi->GetImportJobStatus");

            var localVarPath = "/courses/importJobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResultSchema)));
        }

        /// <summary>
        /// Get import job status for a Course  Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ImportJobResultSchema</returns>
        public async System.Threading.Tasks.Task<ImportJobResultSchema> GetImportJobStatusAsync (string importJobId)
        {
             ApiResponse<ImportJobResultSchema> localVarResponse = await GetImportJobStatusAsyncWithHttpInfo(importJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get import job status for a Course  Check the status of a course import.  This can be called incrementally to check the progress of a call to any of the import options.  &gt;**Note:** &gt;The import job ID used for calls to GetImportJobStatus are only valid for one week after the course import finishes. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importJobId">Id received when the import job was submitted to the importJobs resource.</param>
        /// <returns>Task of ApiResponse (ImportJobResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportJobResultSchema>> GetImportJobStatusAsyncWithHttpInfo (string importJobId)
        {
            // verify the required parameter 'importJobId' is set
            if (importJobId == null)
                throw new ApiException(400, "Missing required parameter 'importJobId' when calling CourseApi->GetImportJobStatus");

            var localVarPath = "/courses/importJobs/{importJobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (importJobId != null) localVarPathParams.Add("importJobId", this.Configuration.ApiClient.ParameterToString(importJobId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImportJobStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResultSchema)));
        }

        /// <summary>
        /// Download a zip package for a Course Version  Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetVersionedCourseZip (string courseId, int? versionId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetVersionedCourseZipWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a zip package for a Course Version  Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetVersionedCourseZipWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetVersionedCourseZip");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetVersionedCourseZip");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionedCourseZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download a zip package for a Course Version  Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetVersionedCourseZipAsync (string courseId, int? versionId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetVersionedCourseZipAsyncWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a zip package for a Course Version  Downloads a zip package for the course version.  The course zip package contains all of the files (assets) needed for a learner to take the course.  The returned zip will contain all of the files orginally uploaded with the course, as well as any modifications made through updating/ adding new assets.  &gt;**Info:** &gt;If looking to retrieve a specific file from a course version, use &#x60;GetCourseVersionAsset&#x60; instead. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetVersionedCourseZipAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->GetVersionedCourseZip");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->GetVersionedCourseZip");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/zip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersionedCourseZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Import an asset file for a Course  Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        public AssetFileSchema ImportCourseAssetFile (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = ImportCourseAssetFileWithHttpInfo(courseId, assetSchema, updateAssetPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import an asset file for a Course  Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        public ApiResponse< AssetFileSchema > ImportCourseAssetFileWithHttpInfo (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->ImportCourseAssetFile");
            // verify the required parameter 'assetSchema' is set
            if (assetSchema == null)
                throw new ApiException(400, "Missing required parameter 'assetSchema' when calling CourseApi->ImportCourseAssetFile");

            var localVarPath = "/courses/{courseId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (assetSchema != null && assetSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assetSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCourseAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Import an asset file for a Course  Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        public async System.Threading.Tasks.Task<AssetFileSchema> ImportCourseAssetFileAsync (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = await ImportCourseAssetFileAsyncWithHttpInfo(courseId, assetSchema, updateAssetPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import an asset file for a Course  Creates or updates an asset file fetched from the provided url into the course.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> ImportCourseAssetFileAsyncWithHttpInfo (string courseId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->ImportCourseAssetFile");
            // verify the required parameter 'assetSchema' is set
            if (assetSchema == null)
                throw new ApiException(400, "Missing required parameter 'assetSchema' when calling CourseApi->ImportCourseAssetFile");

            var localVarPath = "/courses/{courseId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (assetSchema != null && assetSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assetSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCourseAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Import an asset file for a Course Version  Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        public AssetFileSchema ImportCourseVersionAssetFile (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = ImportCourseVersionAssetFileWithHttpInfo(courseId, versionId, assetSchema, updateAssetPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import an asset file for a Course Version  Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        public ApiResponse< AssetFileSchema > ImportCourseVersionAssetFileWithHttpInfo (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->ImportCourseVersionAssetFile");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->ImportCourseVersionAssetFile");
            // verify the required parameter 'assetSchema' is set
            if (assetSchema == null)
                throw new ApiException(400, "Missing required parameter 'assetSchema' when calling CourseApi->ImportCourseVersionAssetFile");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (assetSchema != null && assetSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assetSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCourseVersionAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Import an asset file for a Course Version  Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        public async System.Threading.Tasks.Task<AssetFileSchema> ImportCourseVersionAssetFileAsync (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = await ImportCourseVersionAssetFileAsyncWithHttpInfo(courseId, versionId, assetSchema, updateAssetPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import an asset file for a Course Version  Creates or updates an asset file fetched from the provided url into the course version.  The file will be downloaded from the url and stored in SCORM Cloud.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="assetSchema"></param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> ImportCourseVersionAssetFileAsyncWithHttpInfo (string courseId, int? versionId, ImportAssetRequestSchema assetSchema, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->ImportCourseVersionAssetFile");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->ImportCourseVersionAssetFile");
            // verify the required parameter 'assetSchema' is set
            if (assetSchema == null)
                throw new ApiException(400, "Missing required parameter 'assetSchema' when calling CourseApi->ImportCourseVersionAssetFile");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (assetSchema != null && assetSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assetSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assetSchema; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCourseVersionAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Add tags to a Course  Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutCourseTags (string courseId, TagListSchema tags)
        {
             PutCourseTagsWithHttpInfo(courseId, tags);
        }

        /// <summary>
        /// Add tags to a Course  Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCourseTagsWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->PutCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->PutCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add tags to a Course  Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCourseTagsAsync (string courseId, TagListSchema tags)
        {
             await PutCourseTagsAsyncWithHttpInfo(courseId, tags);

        }

        /// <summary>
        /// Add tags to a Course  Applies the provided tags to the course.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsAsyncWithHttpInfo (string courseId, TagListSchema tags)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->PutCourseTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling CourseApi->PutCourseTags");

            var localVarPath = "/courses/{courseId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of Courses  Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        public void PutCourseTagsBatch (BatchTagsSchema batch)
        {
             PutCourseTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Add a group of tags to a group of Courses  Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutCourseTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling CourseApi->PutCourseTagsBatch");

            var localVarPath = "/courses/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of Courses  Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutCourseTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutCourseTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Add a group of tags to a group of Courses  Applies all of the provided tags on all of the provided courses.  Tags are used to easily identify resources. Adding tags can enable more refined searches when making calls to certain endpoints (e.g. GetCourses). 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutCourseTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling CourseApi->PutCourseTagsBatch");

            var localVarPath = "/courses/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCourseTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update configuration settings for a Course  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetCourseConfiguration (string courseId, SettingsPostSchema configurationSettings)
        {
             SetCourseConfigurationWithHttpInfo(courseId, configurationSettings);
        }

        /// <summary>
        /// Update configuration settings for a Course  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseConfigurationWithHttpInfo (string courseId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update configuration settings for a Course  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseConfigurationAsync (string courseId, SettingsPostSchema configurationSettings)
        {
             await SetCourseConfigurationAsyncWithHttpInfo(courseId, configurationSettings);

        }

        /// <summary>
        /// Update configuration settings for a Course  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseConfigurationAsyncWithHttpInfo (string courseId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseConfiguration");

            var localVarPath = "/courses/{courseId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update title for a Course  Updates the title of the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns></returns>
        public void SetCourseTitle (string courseId, TitleSchema title)
        {
             SetCourseTitleWithHttpInfo(courseId, title);
        }

        /// <summary>
        /// Update title for a Course  Updates the title of the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseTitleWithHttpInfo (string courseId, TitleSchema title)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseTitle");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling CourseApi->SetCourseTitle");

            var localVarPath = "/courses/{courseId}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update title for a Course  Updates the title of the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseTitleAsync (string courseId, TitleSchema title)
        {
             await SetCourseTitleAsyncWithHttpInfo(courseId, title);

        }

        /// <summary>
        /// Update title for a Course  Updates the title of the course. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="title"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseTitleAsyncWithHttpInfo (string courseId, TitleSchema title)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseTitle");
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling CourseApi->SetCourseTitle");

            var localVarPath = "/courses/{courseId}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (title != null && title.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(title); // http body (model) parameter
            }
            else
            {
                localVarPostBody = title; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseTitle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update configuration settings for a Course Version  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns></returns>
        public void SetCourseVersionConfiguration (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
             SetCourseVersionConfigurationWithHttpInfo(courseId, versionId, configurationSettings);
        }

        /// <summary>
        /// Update configuration settings for a Course Version  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseVersionConfigurationWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update configuration settings for a Course Version  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseVersionConfigurationAsync (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
             await SetCourseVersionConfigurationAsyncWithHttpInfo(courseId, versionId, configurationSettings);

        }

        /// <summary>
        /// Update configuration settings for a Course Version  Updates configuration settings at the course level.  This will explicitly set a value at the course level and override any settings from a higher level.  These settings will affect all items within the course which do not have their own explicit configuration set.  This can effectively be used to set course level defaults. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="configurationSettings"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseVersionConfigurationAsyncWithHttpInfo (string courseId, int? versionId, SettingsPostSchema configurationSettings)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->SetCourseVersionConfiguration");
            // verify the required parameter 'configurationSettings' is set
            if (configurationSettings == null)
                throw new ApiException(400, "Missing required parameter 'configurationSettings' when calling CourseApi->SetCourseVersionConfiguration");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/configuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (configurationSettings != null && configurationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configurationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configurationSettings; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseVersionConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload an asset file for a Course  Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        public AssetFileSchema UploadCourseAssetFile (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = UploadCourseAssetFileWithHttpInfo(courseId, destination, _file, updateAssetPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an asset file for a Course  Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        public ApiResponse< AssetFileSchema > UploadCourseAssetFileWithHttpInfo (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->UploadCourseAssetFile");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CourseApi->UploadCourseAssetFile");

            var localVarPath = "/courses/{courseId}/asset/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (destination != null) localVarFormParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // form parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCourseAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Upload an asset file for a Course  Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        public async System.Threading.Tasks.Task<AssetFileSchema> UploadCourseAssetFileAsync (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = await UploadCourseAssetFileAsyncWithHttpInfo(courseId, destination, _file, updateAssetPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an asset file for a Course  Creates or updates an asset file uploaded from your file system into the course.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> UploadCourseAssetFileAsyncWithHttpInfo (string courseId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->UploadCourseAssetFile");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CourseApi->UploadCourseAssetFile");

            var localVarPath = "/courses/{courseId}/asset/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (destination != null) localVarFormParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // form parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCourseAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Upload an asset file for Course Version  Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>AssetFileSchema</returns>
        public AssetFileSchema UploadCourseVersionAssetFile (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = UploadCourseVersionAssetFileWithHttpInfo(courseId, versionId, destination, _file, updateAssetPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an asset file for Course Version  Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>ApiResponse of AssetFileSchema</returns>
        public ApiResponse< AssetFileSchema > UploadCourseVersionAssetFileWithHttpInfo (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->UploadCourseVersionAssetFile");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->UploadCourseVersionAssetFile");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CourseApi->UploadCourseVersionAssetFile");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (destination != null) localVarFormParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // form parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCourseVersionAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

        /// <summary>
        /// Upload an asset file for Course Version  Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of AssetFileSchema</returns>
        public async System.Threading.Tasks.Task<AssetFileSchema> UploadCourseVersionAssetFileAsync (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
             ApiResponse<AssetFileSchema> localVarResponse = await UploadCourseVersionAssetFileAsyncWithHttpInfo(courseId, versionId, destination, _file, updateAssetPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an asset file for Course Version  Creates or updates an asset file uploaded from your file system into the course version.  The file will be sent as part of the request and will be stored in SCORM Cloud alongside the course.  This is a useful way to modify the course structure without needing to reimport the whole course after you&#39;ve made changes.  &gt;**Info:** &gt;If the course structure is being heavily modified, consider creating a new version instead.  This can be done by calling one of the course import jobs while passing true for &#x60;mayCreateNewVersion&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId"></param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be uploaded. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </param>
        /// <param name="_file">The asset file to import into the course.  (optional)</param>
        /// <param name="updateAssetPolicy">Describes how SCORM Cloud should handle importing asset files with respect to overwriting files. Valid values are &#39;reject&#39;, &#39;strict&#39;, and &#39;lax&#39;. A &#39;reject&#39; policy request will fail if the asset file already exists on the system (&#39;overwriting&#39; not allowed). A &#39;strict&#39; policy request will fail if the asset file does not already exist (&#39;overwriting&#39; is required). A &#39;lax&#39; policy request will not consider whether the file already exists (i.e., it will attempt to import in all cases).  (optional, default to lax)</param>
        /// <returns>Task of ApiResponse (AssetFileSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetFileSchema>> UploadCourseVersionAssetFileAsyncWithHttpInfo (string courseId, int? versionId, string destination, System.IO.Stream _file = null, string updateAssetPolicy = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling CourseApi->UploadCourseVersionAssetFile");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling CourseApi->UploadCourseVersionAssetFile");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CourseApi->UploadCourseVersionAssetFile");

            var localVarPath = "/courses/{courseId}/versions/{versionId}/asset/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (updateAssetPolicy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateAssetPolicy", updateAssetPolicy)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (destination != null) localVarFormParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // form parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCourseVersionAssetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetFileSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssetFileSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetFileSchema)));
        }

    }
}
