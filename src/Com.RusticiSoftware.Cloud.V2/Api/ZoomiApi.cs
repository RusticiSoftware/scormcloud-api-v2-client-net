/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZoomiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete the keys for an application.
        /// </summary>
        /// <remarks>
        /// Delete the keys for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteApplicationZoomiKeys ();

        /// <summary>
        /// Delete the keys for an application.
        /// </summary>
        /// <remarks>
        /// Delete the keys for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationZoomiKeysWithHttpInfo ();
        /// <summary>
        /// Deletes the course in zoomi
        /// </summary>
        /// <remarks>
        /// Deletes the course in zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns></returns>
        void DeleteZoomiCourse (string courseId, int? versionId);

        /// <summary>
        /// Deletes the course in zoomi
        /// </summary>
        /// <remarks>
        /// Deletes the course in zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteZoomiCourseWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Gets the zoomi company id of an application.
        /// </summary>
        /// <remarks>
        /// Gets the zoomi company id of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringResultSchema</returns>
        StringResultSchema GetApplicationZoomiCompanyId ();

        /// <summary>
        /// Gets the zoomi company id of an application.
        /// </summary>
        /// <remarks>
        /// Gets the zoomi company id of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> GetApplicationZoomiCompanyIdWithHttpInfo ();
        /// <summary>
        /// Gets the public key for an application.
        /// </summary>
        /// <remarks>
        /// Gets the public key for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringResultSchema</returns>
        StringResultSchema GetApplicationZoomiPublicKey ();

        /// <summary>
        /// Gets the public key for an application.
        /// </summary>
        /// <remarks>
        /// Gets the public key for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> GetApplicationZoomiPublicKeyWithHttpInfo ();
        /// <summary>
        /// Gets the zoomi enabled value of a course
        /// </summary>
        /// <remarks>
        /// Gets the zoomi enabled value of a course
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>EnabledSchema</returns>
        EnabledSchema GetCourseZoomiEnabled (string courseId, int? versionId);

        /// <summary>
        /// Gets the zoomi enabled value of a course
        /// </summary>
        /// <remarks>
        /// Gets the zoomi enabled value of a course
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        ApiResponse<EnabledSchema> GetCourseZoomiEnabledWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <remarks>
        /// Gets the status for a course and imports to Zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema GetZoomiCourseStatus (string courseId, int? versionId);

        /// <summary>
        /// Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <remarks>
        /// Gets the status for a course and imports to Zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> GetZoomiCourseStatusWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Set the zoomi company id value of an application.
        /// </summary>
        /// <remarks>
        /// Set the zoomi company id value of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns></returns>
        void SetApplicationZoomiCompanyId (ZoomiCompanyId zoomiCompanyId);

        /// <summary>
        /// Set the zoomi company id value of an application.
        /// </summary>
        /// <remarks>
        /// Set the zoomi company id value of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetApplicationZoomiCompanyIdWithHttpInfo (ZoomiCompanyId zoomiCompanyId);
        /// <summary>
        /// Set the zoomi enabled value of a course.
        /// </summary>
        /// <remarks>
        /// Set the zoomi enabled value of a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns></returns>
        void SetCourseZoomiEnabled (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null);

        /// <summary>
        /// Set the zoomi enabled value of a course.
        /// </summary>
        /// <remarks>
        /// Set the zoomi enabled value of a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetCourseZoomiEnabledWithHttpInfo (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete the keys for an application.
        /// </summary>
        /// <remarks>
        /// Delete the keys for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationZoomiKeysAsync ();

        /// <summary>
        /// Delete the keys for an application.
        /// </summary>
        /// <remarks>
        /// Delete the keys for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationZoomiKeysAsyncWithHttpInfo ();
        /// <summary>
        /// Deletes the course in zoomi
        /// </summary>
        /// <remarks>
        /// Deletes the course in zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteZoomiCourseAsync (string courseId, int? versionId);

        /// <summary>
        /// Deletes the course in zoomi
        /// </summary>
        /// <remarks>
        /// Deletes the course in zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteZoomiCourseAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Gets the zoomi company id of an application.
        /// </summary>
        /// <remarks>
        /// Gets the zoomi company id of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> GetApplicationZoomiCompanyIdAsync ();

        /// <summary>
        /// Gets the zoomi company id of an application.
        /// </summary>
        /// <remarks>
        /// Gets the zoomi company id of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> GetApplicationZoomiCompanyIdAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the public key for an application.
        /// </summary>
        /// <remarks>
        /// Gets the public key for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> GetApplicationZoomiPublicKeyAsync ();

        /// <summary>
        /// Gets the public key for an application.
        /// </summary>
        /// <remarks>
        /// Gets the public key for an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> GetApplicationZoomiPublicKeyAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the zoomi enabled value of a course
        /// </summary>
        /// <remarks>
        /// Gets the zoomi enabled value of a course
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of EnabledSchema</returns>
        System.Threading.Tasks.Task<EnabledSchema> GetCourseZoomiEnabledAsync (string courseId, int? versionId);

        /// <summary>
        /// Gets the zoomi enabled value of a course
        /// </summary>
        /// <remarks>
        /// Gets the zoomi enabled value of a course
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetCourseZoomiEnabledAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <remarks>
        /// Gets the status for a course and imports to Zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> GetZoomiCourseStatusAsync (string courseId, int? versionId);

        /// <summary>
        /// Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <remarks>
        /// Gets the status for a course and imports to Zoomi
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> GetZoomiCourseStatusAsyncWithHttpInfo (string courseId, int? versionId);
        /// <summary>
        /// Set the zoomi company id value of an application.
        /// </summary>
        /// <remarks>
        /// Set the zoomi company id value of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetApplicationZoomiCompanyIdAsync (ZoomiCompanyId zoomiCompanyId);

        /// <summary>
        /// Set the zoomi company id value of an application.
        /// </summary>
        /// <remarks>
        /// Set the zoomi company id value of an application.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetApplicationZoomiCompanyIdAsyncWithHttpInfo (ZoomiCompanyId zoomiCompanyId);
        /// <summary>
        /// Set the zoomi enabled value of a course.
        /// </summary>
        /// <remarks>
        /// Set the zoomi enabled value of a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetCourseZoomiEnabledAsync (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null);

        /// <summary>
        /// Set the zoomi enabled value of a course.
        /// </summary>
        /// <remarks>
        /// Set the zoomi enabled value of a course.
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseZoomiEnabledAsyncWithHttpInfo (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ZoomiApi : IZoomiApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ZoomiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZoomiApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZoomiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ZoomiApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete the keys for an application. Delete the keys for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteApplicationZoomiKeys ()
        {
             DeleteApplicationZoomiKeysWithHttpInfo();
        }

        /// <summary>
        /// Delete the keys for an application. Delete the keys for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationZoomiKeysWithHttpInfo ()
        {

            var localVarPath = "/zoomi/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationZoomiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the keys for an application. Delete the keys for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationZoomiKeysAsync ()
        {
             await DeleteApplicationZoomiKeysAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete the keys for an application. Delete the keys for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationZoomiKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/zoomi/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationZoomiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the course in zoomi Deletes the course in zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns></returns>
        public void DeleteZoomiCourse (string courseId, int? versionId)
        {
             DeleteZoomiCourseWithHttpInfo(courseId, versionId);
        }

        /// <summary>
        /// Deletes the course in zoomi Deletes the course in zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteZoomiCourseWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->DeleteZoomiCourse");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->DeleteZoomiCourse");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteZoomiCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the course in zoomi Deletes the course in zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteZoomiCourseAsync (string courseId, int? versionId)
        {
             await DeleteZoomiCourseAsyncWithHttpInfo(courseId, versionId);

        }

        /// <summary>
        /// Deletes the course in zoomi Deletes the course in zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteZoomiCourseAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->DeleteZoomiCourse");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->DeleteZoomiCourse");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteZoomiCourse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the zoomi company id of an application. Gets the zoomi company id of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema GetApplicationZoomiCompanyId ()
        {
             ApiResponse<StringResultSchema> localVarResponse = GetApplicationZoomiCompanyIdWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the zoomi company id of an application. Gets the zoomi company id of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > GetApplicationZoomiCompanyIdWithHttpInfo ()
        {

            var localVarPath = "/zoomi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationZoomiCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Gets the zoomi company id of an application. Gets the zoomi company id of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> GetApplicationZoomiCompanyIdAsync ()
        {
             ApiResponse<StringResultSchema> localVarResponse = await GetApplicationZoomiCompanyIdAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the zoomi company id of an application. Gets the zoomi company id of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> GetApplicationZoomiCompanyIdAsyncWithHttpInfo ()
        {

            var localVarPath = "/zoomi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationZoomiCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Gets the public key for an application. Gets the public key for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema GetApplicationZoomiPublicKey ()
        {
             ApiResponse<StringResultSchema> localVarResponse = GetApplicationZoomiPublicKeyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the public key for an application. Gets the public key for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > GetApplicationZoomiPublicKeyWithHttpInfo ()
        {

            var localVarPath = "/zoomi/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationZoomiPublicKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Gets the public key for an application. Gets the public key for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> GetApplicationZoomiPublicKeyAsync ()
        {
             ApiResponse<StringResultSchema> localVarResponse = await GetApplicationZoomiPublicKeyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the public key for an application. Gets the public key for an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> GetApplicationZoomiPublicKeyAsyncWithHttpInfo ()
        {

            var localVarPath = "/zoomi/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationZoomiPublicKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Gets the zoomi enabled value of a course Gets the zoomi enabled value of a course
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>EnabledSchema</returns>
        public EnabledSchema GetCourseZoomiEnabled (string courseId, int? versionId)
        {
             ApiResponse<EnabledSchema> localVarResponse = GetCourseZoomiEnabledWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the zoomi enabled value of a course Gets the zoomi enabled value of a course
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of EnabledSchema</returns>
        public ApiResponse< EnabledSchema > GetCourseZoomiEnabledWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->GetCourseZoomiEnabled");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->GetCourseZoomiEnabled");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseZoomiEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Gets the zoomi enabled value of a course Gets the zoomi enabled value of a course
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of EnabledSchema</returns>
        public async System.Threading.Tasks.Task<EnabledSchema> GetCourseZoomiEnabledAsync (string courseId, int? versionId)
        {
             ApiResponse<EnabledSchema> localVarResponse = await GetCourseZoomiEnabledAsyncWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the zoomi enabled value of a course Gets the zoomi enabled value of a course
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse (EnabledSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnabledSchema>> GetCourseZoomiEnabledAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->GetCourseZoomiEnabled");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->GetCourseZoomiEnabled");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCourseZoomiEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnabledSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnabledSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnabledSchema)));
        }

        /// <summary>
        /// Gets the status for a course and imports to Zoomi Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema GetZoomiCourseStatus (string courseId, int? versionId)
        {
             ApiResponse<StringResultSchema> localVarResponse = GetZoomiCourseStatusWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status for a course and imports to Zoomi Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > GetZoomiCourseStatusWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->GetZoomiCourseStatus");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->GetZoomiCourseStatus");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZoomiCourseStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Gets the status for a course and imports to Zoomi Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> GetZoomiCourseStatusAsync (string courseId, int? versionId)
        {
             ApiResponse<StringResultSchema> localVarResponse = await GetZoomiCourseStatusAsyncWithHttpInfo(courseId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status for a course and imports to Zoomi Gets the status for a course and imports to Zoomi
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> GetZoomiCourseStatusAsyncWithHttpInfo (string courseId, int? versionId)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->GetZoomiCourseStatus");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->GetZoomiCourseStatus");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetZoomiCourseStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Set the zoomi company id value of an application. Set the zoomi company id value of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns></returns>
        public void SetApplicationZoomiCompanyId (ZoomiCompanyId zoomiCompanyId)
        {
             SetApplicationZoomiCompanyIdWithHttpInfo(zoomiCompanyId);
        }

        /// <summary>
        /// Set the zoomi company id value of an application. Set the zoomi company id value of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetApplicationZoomiCompanyIdWithHttpInfo (ZoomiCompanyId zoomiCompanyId)
        {
            // verify the required parameter 'zoomiCompanyId' is set
            if (zoomiCompanyId == null)
                throw new ApiException(400, "Missing required parameter 'zoomiCompanyId' when calling ZoomiApi->SetApplicationZoomiCompanyId");

            var localVarPath = "/zoomi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoomiCompanyId != null && zoomiCompanyId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(zoomiCompanyId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = zoomiCompanyId; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetApplicationZoomiCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the zoomi company id value of an application. Set the zoomi company id value of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetApplicationZoomiCompanyIdAsync (ZoomiCompanyId zoomiCompanyId)
        {
             await SetApplicationZoomiCompanyIdAsyncWithHttpInfo(zoomiCompanyId);

        }

        /// <summary>
        /// Set the zoomi company id value of an application. Set the zoomi company id value of an application.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoomiCompanyId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetApplicationZoomiCompanyIdAsyncWithHttpInfo (ZoomiCompanyId zoomiCompanyId)
        {
            // verify the required parameter 'zoomiCompanyId' is set
            if (zoomiCompanyId == null)
                throw new ApiException(400, "Missing required parameter 'zoomiCompanyId' when calling ZoomiApi->SetApplicationZoomiCompanyId");

            var localVarPath = "/zoomi";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoomiCompanyId != null && zoomiCompanyId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(zoomiCompanyId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = zoomiCompanyId; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetApplicationZoomiCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the zoomi enabled value of a course. Set the zoomi enabled value of a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns></returns>
        public void SetCourseZoomiEnabled (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null)
        {
             SetCourseZoomiEnabledWithHttpInfo(courseId, versionId, zoomiCourseOptions);
        }

        /// <summary>
        /// Set the zoomi enabled value of a course. Set the zoomi enabled value of a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetCourseZoomiEnabledWithHttpInfo (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->SetCourseZoomiEnabled");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->SetCourseZoomiEnabled");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (zoomiCourseOptions != null && zoomiCourseOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(zoomiCourseOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = zoomiCourseOptions; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseZoomiEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the zoomi enabled value of a course. Set the zoomi enabled value of a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetCourseZoomiEnabledAsync (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null)
        {
             await SetCourseZoomiEnabledAsyncWithHttpInfo(courseId, versionId, zoomiCourseOptions);

        }

        /// <summary>
        /// Set the zoomi enabled value of a course. Set the zoomi enabled value of a course.
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="courseId"></param>
        /// <param name="versionId">The course version</param>
        /// <param name="zoomiCourseOptions"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetCourseZoomiEnabledAsyncWithHttpInfo (string courseId, int? versionId, ZoomiCourseOptionsSchema zoomiCourseOptions = null)
        {
            // verify the required parameter 'courseId' is set
            if (courseId == null)
                throw new ApiException(400, "Missing required parameter 'courseId' when calling ZoomiApi->SetCourseZoomiEnabled");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling ZoomiApi->SetCourseZoomiEnabled");

            var localVarPath = "/zoomi/course/{courseId}/version/{versionId}/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (courseId != null) localVarPathParams.Add("courseId", this.Configuration.ApiClient.ParameterToString(courseId)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (zoomiCourseOptions != null && zoomiCourseOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(zoomiCourseOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = zoomiCourseOptions; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCourseZoomiEnabled", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
