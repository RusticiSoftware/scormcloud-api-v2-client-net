/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILearnerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes all PII for a learnerId 
        /// </summary>
        /// <remarks>
        /// Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns></returns>
        void DeleteAllLearnerData (string learnerId, string userEmail);

        /// <summary>
        /// Deletes all PII for a learnerId 
        /// </summary>
        /// <remarks>
        /// Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllLearnerDataWithHttpInfo (string learnerId, string userEmail);
        /// <summary>
        /// Delete tags from a learnerId 
        /// </summary>
        /// <remarks>
        /// Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void DeleteLearnerTags (string learnerId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a learnerId 
        /// </summary>
        /// <remarks>
        /// Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLearnerTagsWithHttpInfo (string learnerId, TagListSchema tags);
        /// <summary>
        /// Get tags for a learnerId 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the learner. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>TagListSchema</returns>
        TagListSchema GetLearnerTags (string learnerId);

        /// <summary>
        /// Get tags for a learnerId 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the learner. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        ApiResponse<TagListSchema> GetLearnerTagsWithHttpInfo (string learnerId);
        /// <summary>
        /// Add tags to a learnerId 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        void PutLearnerTags (string learnerId, TagListSchema tags);

        /// <summary>
        /// Add tags to a learnerId 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutLearnerTagsWithHttpInfo (string learnerId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of learnerIds 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        void PutLearnerTagsBatch (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of learnerIds 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutLearnerTagsBatchWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Update all Registrations for a learnerId 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns></returns>
        void UpdateLearnerInfo (string learnerId, LearnerSchema learnerInfo);

        /// <summary>
        /// Update all Registrations for a learnerId 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLearnerInfoWithHttpInfo (string learnerId, LearnerSchema learnerInfo);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes all PII for a learnerId 
        /// </summary>
        /// <remarks>
        /// Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllLearnerDataAsync (string learnerId, string userEmail);

        /// <summary>
        /// Deletes all PII for a learnerId 
        /// </summary>
        /// <remarks>
        /// Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllLearnerDataAsyncWithHttpInfo (string learnerId, string userEmail);
        /// <summary>
        /// Delete tags from a learnerId 
        /// </summary>
        /// <remarks>
        /// Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLearnerTagsAsync (string learnerId, TagListSchema tags);

        /// <summary>
        /// Delete tags from a learnerId 
        /// </summary>
        /// <remarks>
        /// Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLearnerTagsAsyncWithHttpInfo (string learnerId, TagListSchema tags);
        /// <summary>
        /// Get tags for a learnerId 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the learner. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>Task of TagListSchema</returns>
        System.Threading.Tasks.Task<TagListSchema> GetLearnerTagsAsync (string learnerId);

        /// <summary>
        /// Get tags for a learnerId 
        /// </summary>
        /// <remarks>
        /// Returns the tags for the learner. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetLearnerTagsAsyncWithHttpInfo (string learnerId);
        /// <summary>
        /// Add tags to a learnerId 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutLearnerTagsAsync (string learnerId, TagListSchema tags);

        /// <summary>
        /// Add tags to a learnerId 
        /// </summary>
        /// <remarks>
        /// Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutLearnerTagsAsyncWithHttpInfo (string learnerId, TagListSchema tags);
        /// <summary>
        /// Add a group of tags to a group of learnerIds 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutLearnerTagsBatchAsync (BatchTagsSchema batch);

        /// <summary>
        /// Add a group of tags to a group of learnerIds 
        /// </summary>
        /// <remarks>
        /// Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutLearnerTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch);
        /// <summary>
        /// Update all Registrations for a learnerId 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLearnerInfoAsync (string learnerId, LearnerSchema learnerInfo);

        /// <summary>
        /// Update all Registrations for a learnerId 
        /// </summary>
        /// <remarks>
        /// Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLearnerInfoAsyncWithHttpInfo (string learnerId, LearnerSchema learnerInfo);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LearnerApi : ILearnerApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LearnerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LearnerApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LearnerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LearnerApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes all PII for a learnerId  Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns></returns>
        public void DeleteAllLearnerData (string learnerId, string userEmail)
        {
             DeleteAllLearnerDataWithHttpInfo(learnerId, userEmail);
        }

        /// <summary>
        /// Deletes all PII for a learnerId  Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllLearnerDataWithHttpInfo (string learnerId, string userEmail)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->DeleteAllLearnerData");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling LearnerApi->DeleteAllLearnerData");

            var localVarPath = "/learner/{learnerId}/delete-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllLearnerData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all PII for a learnerId  Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllLearnerDataAsync (string learnerId, string userEmail)
        {
             await DeleteAllLearnerDataAsyncWithHttpInfo(learnerId, userEmail);

        }

        /// <summary>
        /// Deletes all PII for a learnerId  Deletes all of the PII information for the learner.  This is meant for use with complying with GDPR requests from learners.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the deletion of PII information takes place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="userEmail">The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllLearnerDataAsyncWithHttpInfo (string learnerId, string userEmail)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->DeleteAllLearnerData");
            // verify the required parameter 'userEmail' is set
            if (userEmail == null)
                throw new ApiException(400, "Missing required parameter 'userEmail' when calling LearnerApi->DeleteAllLearnerData");

            var localVarPath = "/learner/{learnerId}/delete-information";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (userEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userEmail", userEmail)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllLearnerData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a learnerId  Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void DeleteLearnerTags (string learnerId, TagListSchema tags)
        {
             DeleteLearnerTagsWithHttpInfo(learnerId, tags);
        }

        /// <summary>
        /// Delete tags from a learnerId  Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLearnerTagsWithHttpInfo (string learnerId, TagListSchema tags)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->DeleteLearnerTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling LearnerApi->DeleteLearnerTags");

            var localVarPath = "/learner/{learnerId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLearnerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete tags from a learnerId  Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLearnerTagsAsync (string learnerId, TagListSchema tags)
        {
             await DeleteLearnerTagsAsyncWithHttpInfo(learnerId, tags);

        }

        /// <summary>
        /// Delete tags from a learnerId  Delete the specified tags from the learner.  Deleting tags that do not exist will still result in a success. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLearnerTagsAsyncWithHttpInfo (string learnerId, TagListSchema tags)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->DeleteLearnerTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling LearnerApi->DeleteLearnerTags");

            var localVarPath = "/learner/{learnerId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLearnerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get tags for a learnerId  Returns the tags for the learner. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>TagListSchema</returns>
        public TagListSchema GetLearnerTags (string learnerId)
        {
             ApiResponse<TagListSchema> localVarResponse = GetLearnerTagsWithHttpInfo(learnerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tags for a learnerId  Returns the tags for the learner. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>ApiResponse of TagListSchema</returns>
        public ApiResponse< TagListSchema > GetLearnerTagsWithHttpInfo (string learnerId)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->GetLearnerTags");

            var localVarPath = "/learner/{learnerId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLearnerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Get tags for a learnerId  Returns the tags for the learner. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>Task of TagListSchema</returns>
        public async System.Threading.Tasks.Task<TagListSchema> GetLearnerTagsAsync (string learnerId)
        {
             ApiResponse<TagListSchema> localVarResponse = await GetLearnerTagsAsyncWithHttpInfo(learnerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tags for a learnerId  Returns the tags for the learner. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <returns>Task of ApiResponse (TagListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagListSchema>> GetLearnerTagsAsyncWithHttpInfo (string learnerId)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->GetLearnerTags");

            var localVarPath = "/learner/{learnerId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLearnerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagListSchema)));
        }

        /// <summary>
        /// Add tags to a learnerId  Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns></returns>
        public void PutLearnerTags (string learnerId, TagListSchema tags)
        {
             PutLearnerTagsWithHttpInfo(learnerId, tags);
        }

        /// <summary>
        /// Add tags to a learnerId  Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutLearnerTagsWithHttpInfo (string learnerId, TagListSchema tags)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->PutLearnerTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling LearnerApi->PutLearnerTags");

            var localVarPath = "/learner/{learnerId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLearnerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add tags to a learnerId  Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutLearnerTagsAsync (string learnerId, TagListSchema tags)
        {
             await PutLearnerTagsAsyncWithHttpInfo(learnerId, tags);

        }

        /// <summary>
        /// Add tags to a learnerId  Applies the provided tags to the learner.  Tags are used to easily identify resources.  Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="tags"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutLearnerTagsAsyncWithHttpInfo (string learnerId, TagListSchema tags)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->PutLearnerTags");
            // verify the required parameter 'tags' is set
            if (tags == null)
                throw new ApiException(400, "Missing required parameter 'tags' when calling LearnerApi->PutLearnerTags");

            var localVarPath = "/learner/{learnerId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (tags != null && tags.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tags); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tags; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLearnerTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of learnerIds  Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns></returns>
        public void PutLearnerTagsBatch (BatchTagsSchema batch)
        {
             PutLearnerTagsBatchWithHttpInfo(batch);
        }

        /// <summary>
        /// Add a group of tags to a group of learnerIds  Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutLearnerTagsBatchWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling LearnerApi->PutLearnerTagsBatch");

            var localVarPath = "/learner/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLearnerTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a group of tags to a group of learnerIds  Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutLearnerTagsBatchAsync (BatchTagsSchema batch)
        {
             await PutLearnerTagsBatchAsyncWithHttpInfo(batch);

        }

        /// <summary>
        /// Add a group of tags to a group of learnerIds  Applies all of the provided tags on all of the provided learners.  Tags are used to easily identify resources. Adding tags can enable more refined searches when working with Reportage. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batch">Array of ids, and array of tags for bulk tag operations</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutLearnerTagsBatchAsyncWithHttpInfo (BatchTagsSchema batch)
        {
            // verify the required parameter 'batch' is set
            if (batch == null)
                throw new ApiException(400, "Missing required parameter 'batch' when calling LearnerApi->PutLearnerTagsBatch");

            var localVarPath = "/learner/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batch != null && batch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batch; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutLearnerTagsBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update all Registrations for a learnerId  Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns></returns>
        public void UpdateLearnerInfo (string learnerId, LearnerSchema learnerInfo)
        {
             UpdateLearnerInfoWithHttpInfo(learnerId, learnerInfo);
        }

        /// <summary>
        /// Update all Registrations for a learnerId  Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLearnerInfoWithHttpInfo (string learnerId, LearnerSchema learnerInfo)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->UpdateLearnerInfo");
            // verify the required parameter 'learnerInfo' is set
            if (learnerInfo == null)
                throw new ApiException(400, "Missing required parameter 'learnerInfo' when calling LearnerApi->UpdateLearnerInfo");

            var localVarPath = "/learner/{learnerId}/updateInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (learnerInfo != null && learnerInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(learnerInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = learnerInfo; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLearnerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update all Registrations for a learnerId  Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLearnerInfoAsync (string learnerId, LearnerSchema learnerInfo)
        {
             await UpdateLearnerInfoAsyncWithHttpInfo(learnerId, learnerInfo);

        }

        /// <summary>
        /// Update all Registrations for a learnerId  Updates information about a group of registrations, such as learner email and name.  A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations.  This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  &gt;**Caution:** &gt;Providing an empty string will cause the value in SCORM Cloud to be set to empty.  This may have unintended consequences with regards to functionality.  &gt;**Note:** &gt;This method is asynchronous.  A returned success status indicates a background process has been started, but there will still be a delay before the changes on the registrations take place. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="learnerId">The id of the learner</param>
        /// <param name="learnerInfo"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLearnerInfoAsyncWithHttpInfo (string learnerId, LearnerSchema learnerInfo)
        {
            // verify the required parameter 'learnerId' is set
            if (learnerId == null)
                throw new ApiException(400, "Missing required parameter 'learnerId' when calling LearnerApi->UpdateLearnerInfo");
            // verify the required parameter 'learnerInfo' is set
            if (learnerInfo == null)
                throw new ApiException(400, "Missing required parameter 'learnerInfo' when calling LearnerApi->UpdateLearnerInfo");

            var localVarPath = "/learner/{learnerId}/updateInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (learnerId != null) localVarPathParams.Add("learnerId", this.Configuration.ApiClient.ParameterToString(learnerId)); // path parameter
            if (learnerInfo != null && learnerInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(learnerInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = learnerInfo; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLearnerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
