/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Com.RusticiSoftware.Cloud.V2.Client;
using Com.RusticiSoftware.Cloud.V2.Model;

namespace Com.RusticiSoftware.Cloud.V2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentConnectorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A call to this method will create a new content connector and return a newly created Id for it. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>StringResultSchema</returns>
        StringResultSchema CreateConnector (CreateConnectorSchema connector);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A call to this method will create a new content connector and return a newly created Id for it. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        ApiResponse<StringResultSchema> CreateConnectorWithHttpInfo (CreateConnectorSchema connector);
        /// <summary>
        /// Delete a connector 
        /// </summary>
        /// <remarks>
        /// Delete the specified connector. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns></returns>
        void DeleteConnector (string connectorId);

        /// <summary>
        /// Delete a connector 
        /// </summary>
        /// <remarks>
        /// Delete the specified connector. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConnectorWithHttpInfo (string connectorId);
        /// <summary>
        /// Get a list of all Content Connectors for the application 
        /// </summary>
        /// <remarks>
        /// Get list of all Content Connectors in this application. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>ConnectorListSchema</returns>
        ConnectorListSchema GetConnectorsList (bool? includeAdditionalInstanceInformation = null);

        /// <summary>
        /// Get a list of all Content Connectors for the application 
        /// </summary>
        /// <remarks>
        /// Get list of all Content Connectors in this application. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>ApiResponse of ConnectorListSchema</returns>
        ApiResponse<ConnectorListSchema> GetConnectorsListWithHttpInfo (bool? includeAdditionalInstanceInformation = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns></returns>
        void UpdateConnector (string connectorId, UpdateConnectorSchema connector);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConnectorWithHttpInfo (string connectorId, UpdateConnectorSchema connector);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A call to this method will create a new content connector and return a newly created Id for it. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>Task of StringResultSchema</returns>
        System.Threading.Tasks.Task<StringResultSchema> CreateConnectorAsync (CreateConnectorSchema connector);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// A call to this method will create a new content connector and return a newly created Id for it. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateConnectorAsyncWithHttpInfo (CreateConnectorSchema connector);
        /// <summary>
        /// Delete a connector 
        /// </summary>
        /// <remarks>
        /// Delete the specified connector. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConnectorAsync (string connectorId);

        /// <summary>
        /// Delete a connector 
        /// </summary>
        /// <remarks>
        /// Delete the specified connector. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorAsyncWithHttpInfo (string connectorId);
        /// <summary>
        /// Get a list of all Content Connectors for the application 
        /// </summary>
        /// <remarks>
        /// Get list of all Content Connectors in this application. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>Task of ConnectorListSchema</returns>
        System.Threading.Tasks.Task<ConnectorListSchema> GetConnectorsListAsync (bool? includeAdditionalInstanceInformation = null);

        /// <summary>
        /// Get a list of all Content Connectors for the application 
        /// </summary>
        /// <remarks>
        /// Get list of all Content Connectors in this application. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorListSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectorListSchema>> GetConnectorsListAsyncWithHttpInfo (bool? includeAdditionalInstanceInformation = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConnectorAsync (string connectorId, UpdateConnectorSchema connector);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </remarks>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConnectorAsyncWithHttpInfo (string connectorId, UpdateConnectorSchema connector);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentConnectorsApi : IContentConnectorsApi
    {
        private Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentConnectorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentConnectorsApi(String basePath)
        {
            this.Configuration = new Com.RusticiSoftware.Cloud.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentConnectorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentConnectorsApi(Com.RusticiSoftware.Cloud.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.RusticiSoftware.Cloud.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.RusticiSoftware.Cloud.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.RusticiSoftware.Cloud.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.RusticiSoftware.Cloud.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  A call to this method will create a new content connector and return a newly created Id for it. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>StringResultSchema</returns>
        public StringResultSchema CreateConnector (CreateConnectorSchema connector)
        {
             ApiResponse<StringResultSchema> localVarResponse = CreateConnectorWithHttpInfo(connector);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  A call to this method will create a new content connector and return a newly created Id for it. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>ApiResponse of StringResultSchema</returns>
        public ApiResponse< StringResultSchema > CreateConnectorWithHttpInfo (CreateConnectorSchema connector)
        {
            // verify the required parameter 'connector' is set
            if (connector == null)
                throw new ApiException(400, "Missing required parameter 'connector' when calling ContentConnectorsApi->CreateConnector");

            var localVarPath = "/contentConnectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connector != null && connector.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(connector); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connector; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        ///  A call to this method will create a new content connector and return a newly created Id for it. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>Task of StringResultSchema</returns>
        public async System.Threading.Tasks.Task<StringResultSchema> CreateConnectorAsync (CreateConnectorSchema connector)
        {
             ApiResponse<StringResultSchema> localVarResponse = await CreateConnectorAsyncWithHttpInfo(connector);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  A call to this method will create a new content connector and return a newly created Id for it. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connector"></param>
        /// <returns>Task of ApiResponse (StringResultSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StringResultSchema>> CreateConnectorAsyncWithHttpInfo (CreateConnectorSchema connector)
        {
            // verify the required parameter 'connector' is set
            if (connector == null)
                throw new ApiException(400, "Missing required parameter 'connector' when calling ContentConnectorsApi->CreateConnector");

            var localVarPath = "/contentConnectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connector != null && connector.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(connector); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connector; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StringResultSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StringResultSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StringResultSchema)));
        }

        /// <summary>
        /// Delete a connector  Delete the specified connector. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns></returns>
        public void DeleteConnector (string connectorId)
        {
             DeleteConnectorWithHttpInfo(connectorId);
        }

        /// <summary>
        /// Delete a connector  Delete the specified connector. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteConnectorWithHttpInfo (string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ContentConnectorsApi->DeleteConnector");

            var localVarPath = "/contentConnectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a connector  Delete the specified connector. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConnectorAsync (string connectorId)
        {
             await DeleteConnectorAsyncWithHttpInfo(connectorId);

        }

        /// <summary>
        /// Delete a connector  Delete the specified connector. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConnectorAsyncWithHttpInfo (string connectorId)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ContentConnectorsApi->DeleteConnector");

            var localVarPath = "/contentConnectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of all Content Connectors for the application  Get list of all Content Connectors in this application. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>ConnectorListSchema</returns>
        public ConnectorListSchema GetConnectorsList (bool? includeAdditionalInstanceInformation = null)
        {
             ApiResponse<ConnectorListSchema> localVarResponse = GetConnectorsListWithHttpInfo(includeAdditionalInstanceInformation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all Content Connectors for the application  Get list of all Content Connectors in this application. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>ApiResponse of ConnectorListSchema</returns>
        public ApiResponse< ConnectorListSchema > GetConnectorsListWithHttpInfo (bool? includeAdditionalInstanceInformation = null)
        {

            var localVarPath = "/contentConnectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeAdditionalInstanceInformation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAdditionalInstanceInformation", includeAdditionalInstanceInformation)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectorsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorListSchema)));
        }

        /// <summary>
        /// Get a list of all Content Connectors for the application  Get list of all Content Connectors in this application. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>Task of ConnectorListSchema</returns>
        public async System.Threading.Tasks.Task<ConnectorListSchema> GetConnectorsListAsync (bool? includeAdditionalInstanceInformation = null)
        {
             ApiResponse<ConnectorListSchema> localVarResponse = await GetConnectorsListAsyncWithHttpInfo(includeAdditionalInstanceInformation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all Content Connectors for the application  Get list of all Content Connectors in this application. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeAdditionalInstanceInformation"> (optional)</param>
        /// <returns>Task of ApiResponse (ConnectorListSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectorListSchema>> GetConnectorsListAsyncWithHttpInfo (bool? includeAdditionalInstanceInformation = null)
        {

            var localVarPath = "/contentConnectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeAdditionalInstanceInformation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAdditionalInstanceInformation", includeAdditionalInstanceInformation)); // query parameter

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConnectorsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectorListSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectorListSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectorListSchema)));
        }

        /// <summary>
        ///  Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns></returns>
        public void UpdateConnector (string connectorId, UpdateConnectorSchema connector)
        {
             UpdateConnectorWithHttpInfo(connectorId, connector);
        }

        /// <summary>
        ///  Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateConnectorWithHttpInfo (string connectorId, UpdateConnectorSchema connector)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ContentConnectorsApi->UpdateConnector");
            // verify the required parameter 'connector' is set
            if (connector == null)
                throw new ApiException(400, "Missing required parameter 'connector' when calling ContentConnectorsApi->UpdateConnector");

            var localVarPath = "/contentConnectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (connector != null && connector.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(connector); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connector; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConnectorAsync (string connectorId, UpdateConnectorSchema connector)
        {
             await UpdateConnectorAsyncWithHttpInfo(connectorId, connector);

        }

        /// <summary>
        ///  Update the configuration or enabled flag associated with &#x60;connectorId&#x60;. 
        /// </summary>
        /// <exception cref="Com.RusticiSoftware.Cloud.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectorId">the connector id</param>
        /// <param name="connector"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConnectorAsyncWithHttpInfo (string connectorId, UpdateConnectorSchema connector)
        {
            // verify the required parameter 'connectorId' is set
            if (connectorId == null)
                throw new ApiException(400, "Missing required parameter 'connectorId' when calling ContentConnectorsApi->UpdateConnector");
            // verify the required parameter 'connector' is set
            if (connector == null)
                throw new ApiException(400, "Missing required parameter 'connector' when calling ContentConnectorsApi->UpdateConnector");

            var localVarPath = "/contentConnectors/{connectorId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectorId != null) localVarPathParams.Add("connectorId", this.Configuration.ApiClient.ParameterToString(connectorId)); // path parameter
            if (connector != null && connector.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(connector); // http body (model) parameter
            }
            else
            {
                localVarPostBody = connector; // byte array
            }

            // authentication (APP_NORMAL) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (OAUTH) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConnector", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
