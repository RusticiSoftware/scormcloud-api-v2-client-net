/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// An high level overview of information about the registration of the user to the invitation.
    /// </summary>
    [DataContract]
    public partial class UserInvitationSchemaRegistrationReport :  IEquatable<UserInvitationSchemaRegistrationReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserInvitationSchemaRegistrationReport" /> class.
        /// </summary>
        /// <param name="Complete">Complete.</param>
        /// <param name="Success">Success.</param>
        /// <param name="TotalSecondsTracked">TotalSecondsTracked.</param>
        /// <param name="Score">Score.</param>
        public UserInvitationSchemaRegistrationReport(RegistrationCompletion Complete = default(RegistrationCompletion), RegistrationSuccess Success = default(RegistrationSuccess), double? TotalSecondsTracked = default(double?), ScoreSchema Score = default(ScoreSchema))
        {
            this.Complete = Complete;
            this.Success = Success;
            this.TotalSecondsTracked = TotalSecondsTracked;
            this.Score = Score;
        }
        
        /// <summary>
        /// Gets or Sets Complete
        /// </summary>
        [DataMember(Name="complete", EmitDefaultValue=false)]
        public RegistrationCompletion Complete { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public RegistrationSuccess Success { get; set; }
        /// <summary>
        /// Gets or Sets TotalSecondsTracked
        /// </summary>
        [DataMember(Name="totalSecondsTracked", EmitDefaultValue=false)]
        public double? TotalSecondsTracked { get; set; }
        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInvitationSchemaRegistrationReport {\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  TotalSecondsTracked: ").Append(TotalSecondsTracked).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserInvitationSchemaRegistrationReport);
        }

        /// <summary>
        /// Returns true if UserInvitationSchemaRegistrationReport instances are equal
        /// </summary>
        /// <param name="other">Instance of UserInvitationSchemaRegistrationReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInvitationSchemaRegistrationReport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Complete == other.Complete ||
                    this.Complete != null &&
                    this.Complete.Equals(other.Complete)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.TotalSecondsTracked == other.TotalSecondsTracked ||
                    this.TotalSecondsTracked != null &&
                    this.TotalSecondsTracked.Equals(other.TotalSecondsTracked)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Complete != null)
                    hash = hash * 59 + this.Complete.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.TotalSecondsTracked != null)
                    hash = hash * 59 + this.TotalSecondsTracked.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
