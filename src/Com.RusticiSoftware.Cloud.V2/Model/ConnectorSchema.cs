/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// A content connector.
    /// </summary>
    [DataContract]
    public partial class ConnectorSchema :  IEquatable<ConnectorSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorSchema" /> class.
        /// </summary>
        /// <param name="connectorId">connectorId.</param>
        /// <param name="contentConnectorType">type of this content connector.</param>
        /// <param name="configuration">configuration for this content connector, format is implementation specific.</param>
        /// <param name="additionalInstanceInformation">additional information about this content connector, format is implementation specific and will only be present if the connector is enabled.</param>
        /// <param name="enabled">is this connector enabled.</param>
        public ConnectorSchema(string connectorId = default(string), string contentConnectorType = default(string), Object configuration = default(Object), Object additionalInstanceInformation = default(Object), bool? enabled = default(bool?))
        {
            this.ConnectorId = connectorId;
            this.ContentConnectorType = contentConnectorType;
            this.Configuration = configuration;
            this.AdditionalInstanceInformation = additionalInstanceInformation;
            this.Enabled = enabled;
        }
        
        /// <summary>
        /// Gets or Sets ConnectorId
        /// </summary>
        [DataMember(Name="connectorId", EmitDefaultValue=false)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// type of this content connector
        /// </summary>
        /// <value>type of this content connector</value>
        [DataMember(Name="contentConnectorType", EmitDefaultValue=false)]
        public string ContentConnectorType { get; set; }

        /// <summary>
        /// configuration for this content connector, format is implementation specific
        /// </summary>
        /// <value>configuration for this content connector, format is implementation specific</value>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public Object Configuration { get; set; }

        /// <summary>
        /// additional information about this content connector, format is implementation specific and will only be present if the connector is enabled
        /// </summary>
        /// <value>additional information about this content connector, format is implementation specific and will only be present if the connector is enabled</value>
        [DataMember(Name="additionalInstanceInformation", EmitDefaultValue=false)]
        public Object AdditionalInstanceInformation { get; set; }

        /// <summary>
        /// is this connector enabled
        /// </summary>
        /// <value>is this connector enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectorSchema {\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  ContentConnectorType: ").Append(ContentConnectorType).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  AdditionalInstanceInformation: ").Append(AdditionalInstanceInformation).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectorSchema);
        }

        /// <summary>
        /// Returns true if ConnectorSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectorSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectorSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectorId == input.ConnectorId ||
                    (this.ConnectorId != null &&
                    this.ConnectorId.Equals(input.ConnectorId))
                ) && 
                (
                    this.ContentConnectorType == input.ContentConnectorType ||
                    (this.ContentConnectorType != null &&
                    this.ContentConnectorType.Equals(input.ContentConnectorType))
                ) && 
                (
                    this.Configuration == input.Configuration ||
                    (this.Configuration != null &&
                    this.Configuration.Equals(input.Configuration))
                ) && 
                (
                    this.AdditionalInstanceInformation == input.AdditionalInstanceInformation ||
                    (this.AdditionalInstanceInformation != null &&
                    this.AdditionalInstanceInformation.Equals(input.AdditionalInstanceInformation))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectorId != null)
                    hashCode = hashCode * 59 + this.ConnectorId.GetHashCode();
                if (this.ContentConnectorType != null)
                    hashCode = hashCode * 59 + this.ContentConnectorType.GetHashCode();
                if (this.Configuration != null)
                    hashCode = hashCode * 59 + this.Configuration.GetHashCode();
                if (this.AdditionalInstanceInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInstanceInformation.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
