/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// TokenRequestSchema
    /// </summary>
    [DataContract]
    public partial class TokenRequestSchema :  IEquatable<TokenRequestSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenRequestSchema" /> class.
        /// </summary>
        /// <param name="permissions">permissions (required).</param>
        /// <param name="expiry">Expiration of the token. This should not be set far in the future, as there is no way to invalidate an individual token. (required).</param>
        public TokenRequestSchema(PermissionsSchema permissions = default(PermissionsSchema), DateTime? expiry = default(DateTime?))
        {
            // to ensure "permissions" is required (not null)
            if (permissions == null)
            {
                throw new InvalidDataException("permissions is a required property for TokenRequestSchema and cannot be null");
            }
            else
            {
                this.Permissions = permissions;
            }
            // to ensure "expiry" is required (not null)
            if (expiry == null)
            {
                throw new InvalidDataException("expiry is a required property for TokenRequestSchema and cannot be null");
            }
            else
            {
                this.Expiry = expiry;
            }
        }
        
        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public PermissionsSchema Permissions { get; set; }

        /// <summary>
        /// Expiration of the token. This should not be set far in the future, as there is no way to invalidate an individual token.
        /// </summary>
        /// <value>Expiration of the token. This should not be set far in the future, as there is no way to invalidate an individual token.</value>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenRequestSchema {\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenRequestSchema);
        }

        /// <summary>
        /// Returns true if TokenRequestSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenRequestSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenRequestSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
