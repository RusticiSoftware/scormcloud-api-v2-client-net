/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// SettingMetadataValidValues
    /// </summary>
    [DataContract]
    public partial class SettingMetadataValidValues :  IEquatable<SettingMetadataValidValues>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingMetadataValidValues" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        /// <param name="ValueDescription">Description of what this valid value means, how it will be applied if used in a setting.</param>
        public SettingMetadataValidValues(string Value = null, string ValueDescription = null)
        {
            this.Value = Value;
            this.ValueDescription = ValueDescription;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Description of what this valid value means, how it will be applied if used in a setting
        /// </summary>
        /// <value>Description of what this valid value means, how it will be applied if used in a setting</value>
        [DataMember(Name="valueDescription", EmitDefaultValue=false)]
        public string ValueDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingMetadataValidValues {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueDescription: ").Append(ValueDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SettingMetadataValidValues);
        }

        /// <summary>
        /// Returns true if SettingMetadataValidValues instances are equal
        /// </summary>
        /// <param name="other">Instance of SettingMetadataValidValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingMetadataValidValues other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.ValueDescription == other.ValueDescription ||
                    this.ValueDescription != null &&
                    this.ValueDescription.Equals(other.ValueDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.ValueDescription != null)
                    hash = hash * 59 + this.ValueDescription.GetHashCode();
                return hash;
            }
        }
    }

}
