/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CourseSchema
    /// </summary>
    [DataContract]
    public partial class CourseSchema :  IEquatable<CourseSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines CourseLearningStandard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CourseLearningStandardEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum SCORM11 for value: SCORM11
            /// </summary>
            [EnumMember(Value = "SCORM11")]
            SCORM11 = 2,
            
            /// <summary>
            /// Enum SCORM12 for value: SCORM12
            /// </summary>
            [EnumMember(Value = "SCORM12")]
            SCORM12 = 3,
            
            /// <summary>
            /// Enum SCORM20042NDEDITION for value: SCORM20042NDEDITION
            /// </summary>
            [EnumMember(Value = "SCORM20042NDEDITION")]
            SCORM20042NDEDITION = 4,
            
            /// <summary>
            /// Enum SCORM20043RDEDITION for value: SCORM20043RDEDITION
            /// </summary>
            [EnumMember(Value = "SCORM20043RDEDITION")]
            SCORM20043RDEDITION = 5,
            
            /// <summary>
            /// Enum SCORM20044THEDITION for value: SCORM20044THEDITION
            /// </summary>
            [EnumMember(Value = "SCORM20044THEDITION")]
            SCORM20044THEDITION = 6,
            
            /// <summary>
            /// Enum AICC for value: AICC
            /// </summary>
            [EnumMember(Value = "AICC")]
            AICC = 7,
            
            /// <summary>
            /// Enum XAPI for value: XAPI
            /// </summary>
            [EnumMember(Value = "XAPI")]
            XAPI = 8,
            
            /// <summary>
            /// Enum CMI5 for value: CMI5
            /// </summary>
            [EnumMember(Value = "CMI5")]
            CMI5 = 9
        }

        /// <summary>
        /// Gets or Sets CourseLearningStandard
        /// </summary>
        [DataMember(Name="courseLearningStandard", EmitDefaultValue=false)]
        public CourseLearningStandardEnum? CourseLearningStandard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CourseSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="xapiActivityId">xAPI activity id associated with this course.</param>
        /// <param name="created">created.</param>
        /// <param name="updated">updated.</param>
        /// <param name="version">version.</param>
        /// <param name="registrationCount">registrationCount.</param>
        /// <param name="activityId">activityId.</param>
        /// <param name="courseLearningStandard">courseLearningStandard.</param>
        /// <param name="tags">tags.</param>
        /// <param name="dispatched">dispatched.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="rootActivity">rootActivity.</param>
        public CourseSchema(string id = default(string), string title = default(string), string xapiActivityId = default(string), DateTime? created = default(DateTime?), DateTime? updated = default(DateTime?), int? version = default(int?), int? registrationCount = default(int?), string activityId = default(string), CourseLearningStandardEnum? courseLearningStandard = default(CourseLearningStandardEnum?), List<string> tags = default(List<string>), bool? dispatched = default(bool?), MetadataSchema metadata = default(MetadataSchema), CourseActivitySchema rootActivity = default(CourseActivitySchema))
        {
            this.Id = id;
            this.Title = title;
            this.XapiActivityId = xapiActivityId;
            this.Created = created;
            this.Updated = updated;
            this.Version = version;
            this.RegistrationCount = registrationCount;
            this.ActivityId = activityId;
            this.CourseLearningStandard = courseLearningStandard;
            this.Tags = tags;
            this.Dispatched = dispatched;
            this.Metadata = metadata;
            this.RootActivity = rootActivity;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// xAPI activity id associated with this course
        /// </summary>
        /// <value>xAPI activity id associated with this course</value>
        [DataMember(Name="xapiActivityId", EmitDefaultValue=false)]
        public string XapiActivityId { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCount
        /// </summary>
        [DataMember(Name="registrationCount", EmitDefaultValue=false)]
        public int? RegistrationCount { get; set; }

        /// <summary>
        /// Gets or Sets ActivityId
        /// </summary>
        [DataMember(Name="activityId", EmitDefaultValue=false)]
        public string ActivityId { get; set; }


        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Dispatched
        /// </summary>
        [DataMember(Name="dispatched", EmitDefaultValue=false)]
        public bool? Dispatched { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public MetadataSchema Metadata { get; set; }

        /// <summary>
        /// Gets or Sets RootActivity
        /// </summary>
        [DataMember(Name="rootActivity", EmitDefaultValue=false)]
        public CourseActivitySchema RootActivity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CourseSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  XapiActivityId: ").Append(XapiActivityId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  RegistrationCount: ").Append(RegistrationCount).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  CourseLearningStandard: ").Append(CourseLearningStandard).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Dispatched: ").Append(Dispatched).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  RootActivity: ").Append(RootActivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CourseSchema);
        }

        /// <summary>
        /// Returns true if CourseSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of CourseSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CourseSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.XapiActivityId == input.XapiActivityId ||
                    (this.XapiActivityId != null &&
                    this.XapiActivityId.Equals(input.XapiActivityId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.RegistrationCount == input.RegistrationCount ||
                    (this.RegistrationCount != null &&
                    this.RegistrationCount.Equals(input.RegistrationCount))
                ) && 
                (
                    this.ActivityId == input.ActivityId ||
                    (this.ActivityId != null &&
                    this.ActivityId.Equals(input.ActivityId))
                ) && 
                (
                    this.CourseLearningStandard == input.CourseLearningStandard ||
                    (this.CourseLearningStandard != null &&
                    this.CourseLearningStandard.Equals(input.CourseLearningStandard))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Dispatched == input.Dispatched ||
                    (this.Dispatched != null &&
                    this.Dispatched.Equals(input.Dispatched))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.RootActivity == input.RootActivity ||
                    (this.RootActivity != null &&
                    this.RootActivity.Equals(input.RootActivity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.XapiActivityId != null)
                    hashCode = hashCode * 59 + this.XapiActivityId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.RegistrationCount != null)
                    hashCode = hashCode * 59 + this.RegistrationCount.GetHashCode();
                if (this.ActivityId != null)
                    hashCode = hashCode * 59 + this.ActivityId.GetHashCode();
                if (this.CourseLearningStandard != null)
                    hashCode = hashCode * 59 + this.CourseLearningStandard.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Dispatched != null)
                    hashCode = hashCode * 59 + this.Dispatched.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.RootActivity != null)
                    hashCode = hashCode * 59 + this.RootActivity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
