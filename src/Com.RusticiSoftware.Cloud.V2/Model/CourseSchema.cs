/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CourseSchema
    /// </summary>
    [DataContract]
    public partial class CourseSchema :  IEquatable<CourseSchema>
    {
        /// <summary>
        /// Gets or Sets CourseLearningStandard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CourseLearningStandardEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum SCORM11 for "SCORM11"
            /// </summary>
            [EnumMember(Value = "SCORM11")]
            SCORM11,
            
            /// <summary>
            /// Enum SCORM12 for "SCORM12"
            /// </summary>
            [EnumMember(Value = "SCORM12")]
            SCORM12,
            
            /// <summary>
            /// Enum SCORM20042NDEDITION for "SCORM20042NDEDITION"
            /// </summary>
            [EnumMember(Value = "SCORM20042NDEDITION")]
            SCORM20042NDEDITION,
            
            /// <summary>
            /// Enum SCORM20043RDEDITION for "SCORM20043RDEDITION"
            /// </summary>
            [EnumMember(Value = "SCORM20043RDEDITION")]
            SCORM20043RDEDITION,
            
            /// <summary>
            /// Enum SCORM20044THEDITION for "SCORM20044THEDITION"
            /// </summary>
            [EnumMember(Value = "SCORM20044THEDITION")]
            SCORM20044THEDITION,
            
            /// <summary>
            /// Enum AICC for "AICC"
            /// </summary>
            [EnumMember(Value = "AICC")]
            AICC,
            
            /// <summary>
            /// Enum XAPI for "XAPI"
            /// </summary>
            [EnumMember(Value = "XAPI")]
            XAPI,
            
            /// <summary>
            /// Enum CMI5 for "CMI5"
            /// </summary>
            [EnumMember(Value = "CMI5")]
            CMI5
        }

        /// <summary>
        /// Gets or Sets CourseLearningStandard
        /// </summary>
        [DataMember(Name="courseLearningStandard", EmitDefaultValue=false)]
        public CourseLearningStandardEnum? CourseLearningStandard { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CourseSchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Title">Title.</param>
        /// <param name="XapiActivityId">xAPI activity id associated with this course.</param>
        /// <param name="Created">Created.</param>
        /// <param name="Updated">Updated.</param>
        /// <param name="Version">Version.</param>
        /// <param name="RegistrationCount">RegistrationCount.</param>
        /// <param name="ActivityId">ActivityId.</param>
        /// <param name="CourseLearningStandard">CourseLearningStandard.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="Dispatched">Dispatched.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="RootActivity">RootActivity.</param>
        public CourseSchema(string Id = null, string Title = null, string XapiActivityId = null, DateTime? Created = null, DateTime? Updated = null, int? Version = null, int? RegistrationCount = null, string ActivityId = null, CourseLearningStandardEnum? CourseLearningStandard = null, List<string> Tags = null, bool? Dispatched = null, MetadataSchema Metadata = null, CourseActivitySchema RootActivity = null)
        {
            this.Id = Id;
            this.Title = Title;
            this.XapiActivityId = XapiActivityId;
            this.Created = Created;
            this.Updated = Updated;
            this.Version = Version;
            this.RegistrationCount = RegistrationCount;
            this.ActivityId = ActivityId;
            this.CourseLearningStandard = CourseLearningStandard;
            this.Tags = Tags;
            this.Dispatched = Dispatched;
            this.Metadata = Metadata;
            this.RootActivity = RootActivity;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// xAPI activity id associated with this course
        /// </summary>
        /// <value>xAPI activity id associated with this course</value>
        [DataMember(Name="xapiActivityId", EmitDefaultValue=false)]
        public string XapiActivityId { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationCount
        /// </summary>
        [DataMember(Name="registrationCount", EmitDefaultValue=false)]
        public int? RegistrationCount { get; set; }
        /// <summary>
        /// Gets or Sets ActivityId
        /// </summary>
        [DataMember(Name="activityId", EmitDefaultValue=false)]
        public string ActivityId { get; set; }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// Gets or Sets Dispatched
        /// </summary>
        [DataMember(Name="dispatched", EmitDefaultValue=false)]
        public bool? Dispatched { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public MetadataSchema Metadata { get; set; }
        /// <summary>
        /// Gets or Sets RootActivity
        /// </summary>
        [DataMember(Name="rootActivity", EmitDefaultValue=false)]
        public CourseActivitySchema RootActivity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CourseSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  XapiActivityId: ").Append(XapiActivityId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  RegistrationCount: ").Append(RegistrationCount).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  CourseLearningStandard: ").Append(CourseLearningStandard).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Dispatched: ").Append(Dispatched).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  RootActivity: ").Append(RootActivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CourseSchema);
        }

        /// <summary>
        /// Returns true if CourseSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of CourseSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CourseSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.XapiActivityId == other.XapiActivityId ||
                    this.XapiActivityId != null &&
                    this.XapiActivityId.Equals(other.XapiActivityId)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.RegistrationCount == other.RegistrationCount ||
                    this.RegistrationCount != null &&
                    this.RegistrationCount.Equals(other.RegistrationCount)
                ) && 
                (
                    this.ActivityId == other.ActivityId ||
                    this.ActivityId != null &&
                    this.ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    this.CourseLearningStandard == other.CourseLearningStandard ||
                    this.CourseLearningStandard != null &&
                    this.CourseLearningStandard.Equals(other.CourseLearningStandard)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Dispatched == other.Dispatched ||
                    this.Dispatched != null &&
                    this.Dispatched.Equals(other.Dispatched)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.RootActivity == other.RootActivity ||
                    this.RootActivity != null &&
                    this.RootActivity.Equals(other.RootActivity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.XapiActivityId != null)
                    hash = hash * 59 + this.XapiActivityId.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.RegistrationCount != null)
                    hash = hash * 59 + this.RegistrationCount.GetHashCode();
                if (this.ActivityId != null)
                    hash = hash * 59 + this.ActivityId.GetHashCode();
                if (this.CourseLearningStandard != null)
                    hash = hash * 59 + this.CourseLearningStandard.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Dispatched != null)
                    hash = hash * 59 + this.Dispatched.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.RootActivity != null)
                    hash = hash * 59 + this.RootActivity.GetHashCode();
                return hash;
            }
        }
    }

}
