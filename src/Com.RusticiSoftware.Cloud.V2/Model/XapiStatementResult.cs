/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#42-retrieval-of-statements
    /// </summary>
    [DataContract]
    public partial class XapiStatementResult :  IEquatable<XapiStatementResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiStatementResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XapiStatementResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiStatementResult" /> class.
        /// </summary>
        /// <param name="Statements">Statements (required).</param>
        /// <param name="More">More.</param>
        public XapiStatementResult(List<XapiStatement> Statements = default(List<XapiStatement>), string More = default(string))
        {
            // to ensure "Statements" is required (not null)
            if (Statements == null)
            {
                throw new InvalidDataException("Statements is a required property for XapiStatementResult and cannot be null");
            }
            else
            {
                this.Statements = Statements;
            }
            this.More = More;
        }
        
        /// <summary>
        /// Gets or Sets Statements
        /// </summary>
        [DataMember(Name="statements", EmitDefaultValue=false)]
        public List<XapiStatement> Statements { get; set; }
        /// <summary>
        /// Gets or Sets More
        /// </summary>
        [DataMember(Name="more", EmitDefaultValue=false)]
        public string More { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiStatementResult {\n");
            sb.Append("  Statements: ").Append(Statements).Append("\n");
            sb.Append("  More: ").Append(More).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as XapiStatementResult);
        }

        /// <summary>
        /// Returns true if XapiStatementResult instances are equal
        /// </summary>
        /// <param name="other">Instance of XapiStatementResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiStatementResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Statements == other.Statements ||
                    this.Statements != null &&
                    this.Statements.SequenceEqual(other.Statements)
                ) && 
                (
                    this.More == other.More ||
                    this.More != null &&
                    this.More.Equals(other.More)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Statements != null)
                    hash = hash * 59 + this.Statements.GetHashCode();
                if (this.More != null)
                    hash = hash * 59 + this.More.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
