/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// PublicInvitationUpdateSchema
    /// </summary>
    [DataContract]
    public partial class PublicInvitationUpdateSchema :  IEquatable<PublicInvitationUpdateSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicInvitationUpdateSchema" /> class.
        /// </summary>
        /// <param name="allowLaunch">Determines if learners are allowed to launch the invitation. If false, the invitation is disabled and no new or existing learners are allowed to launch it. .</param>
        /// <param name="allowNewRegistrations">Determines if new registrations can be created for this public invitation. If false, no new registrations can be created for the invitation, so only learners with existing registrations can access the invitation. .</param>
        /// <param name="postBack">Specifies a URL for which to post activity and status data in real time as the course is completed.</param>
        /// <param name="expirationDate">The ISO 8601 TimeStamp (defaults to UTC) after which this invitation will expire and can no longer be launched. An empty value will represent no expiration date. .</param>
        /// <param name="registrationCap">Integer value that represents the maximum number of registrations that can be created for a public invitation. Setting this value to &#39;0&#39; allows an unlimited amount of registrations to be created for the invitation.  (default to 0).</param>
        public PublicInvitationUpdateSchema(bool? allowLaunch = default(bool?), bool? allowNewRegistrations = default(bool?), PostBackSchema postBack = default(PostBackSchema), DateTime? expirationDate = default(DateTime?), int? registrationCap = 0)
        {
            this.AllowLaunch = allowLaunch;
            this.AllowNewRegistrations = allowNewRegistrations;
            this.PostBack = postBack;
            this.ExpirationDate = expirationDate;
            // use default value if no "registrationCap" provided
            if (registrationCap == null)
            {
                this.RegistrationCap = 0;
            }
            else
            {
                this.RegistrationCap = registrationCap;
            }
        }
        
        /// <summary>
        /// Determines if learners are allowed to launch the invitation. If false, the invitation is disabled and no new or existing learners are allowed to launch it. 
        /// </summary>
        /// <value>Determines if learners are allowed to launch the invitation. If false, the invitation is disabled and no new or existing learners are allowed to launch it. </value>
        [DataMember(Name="allowLaunch", EmitDefaultValue=false)]
        public bool? AllowLaunch { get; set; }

        /// <summary>
        /// Determines if new registrations can be created for this public invitation. If false, no new registrations can be created for the invitation, so only learners with existing registrations can access the invitation. 
        /// </summary>
        /// <value>Determines if new registrations can be created for this public invitation. If false, no new registrations can be created for the invitation, so only learners with existing registrations can access the invitation. </value>
        [DataMember(Name="allowNewRegistrations", EmitDefaultValue=false)]
        public bool? AllowNewRegistrations { get; set; }

        /// <summary>
        /// Specifies a URL for which to post activity and status data in real time as the course is completed
        /// </summary>
        /// <value>Specifies a URL for which to post activity and status data in real time as the course is completed</value>
        [DataMember(Name="postBack", EmitDefaultValue=false)]
        public PostBackSchema PostBack { get; set; }

        /// <summary>
        /// The ISO 8601 TimeStamp (defaults to UTC) after which this invitation will expire and can no longer be launched. An empty value will represent no expiration date. 
        /// </summary>
        /// <value>The ISO 8601 TimeStamp (defaults to UTC) after which this invitation will expire and can no longer be launched. An empty value will represent no expiration date. </value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Integer value that represents the maximum number of registrations that can be created for a public invitation. Setting this value to &#39;0&#39; allows an unlimited amount of registrations to be created for the invitation. 
        /// </summary>
        /// <value>Integer value that represents the maximum number of registrations that can be created for a public invitation. Setting this value to &#39;0&#39; allows an unlimited amount of registrations to be created for the invitation. </value>
        [DataMember(Name="registrationCap", EmitDefaultValue=false)]
        public int? RegistrationCap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicInvitationUpdateSchema {\n");
            sb.Append("  AllowLaunch: ").Append(AllowLaunch).Append("\n");
            sb.Append("  AllowNewRegistrations: ").Append(AllowNewRegistrations).Append("\n");
            sb.Append("  PostBack: ").Append(PostBack).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  RegistrationCap: ").Append(RegistrationCap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicInvitationUpdateSchema);
        }

        /// <summary>
        /// Returns true if PublicInvitationUpdateSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicInvitationUpdateSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicInvitationUpdateSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowLaunch == input.AllowLaunch ||
                    (this.AllowLaunch != null &&
                    this.AllowLaunch.Equals(input.AllowLaunch))
                ) && 
                (
                    this.AllowNewRegistrations == input.AllowNewRegistrations ||
                    (this.AllowNewRegistrations != null &&
                    this.AllowNewRegistrations.Equals(input.AllowNewRegistrations))
                ) && 
                (
                    this.PostBack == input.PostBack ||
                    (this.PostBack != null &&
                    this.PostBack.Equals(input.PostBack))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.RegistrationCap == input.RegistrationCap ||
                    (this.RegistrationCap != null &&
                    this.RegistrationCap.Equals(input.RegistrationCap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowLaunch != null)
                    hashCode = hashCode * 59 + this.AllowLaunch.GetHashCode();
                if (this.AllowNewRegistrations != null)
                    hashCode = hashCode * 59 + this.AllowNewRegistrations.GetHashCode();
                if (this.PostBack != null)
                    hashCode = hashCode * 59 + this.PostBack.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.RegistrationCap != null)
                    hashCode = hashCode * 59 + this.RegistrationCap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
