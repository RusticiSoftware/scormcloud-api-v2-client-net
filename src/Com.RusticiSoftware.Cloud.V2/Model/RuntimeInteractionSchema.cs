/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RuntimeInteractionSchema
    /// </summary>
    [DataContract]
    public partial class RuntimeInteractionSchema :  IEquatable<RuntimeInteractionSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TrueFalse for value: TrueFalse
            /// </summary>
            [EnumMember(Value = "TrueFalse")]
            TrueFalse = 1,
            
            /// <summary>
            /// Enum Choice for value: Choice
            /// </summary>
            [EnumMember(Value = "Choice")]
            Choice = 2,
            
            /// <summary>
            /// Enum FillIn for value: FillIn
            /// </summary>
            [EnumMember(Value = "FillIn")]
            FillIn = 3,
            
            /// <summary>
            /// Enum LongFillIn for value: LongFillIn
            /// </summary>
            [EnumMember(Value = "LongFillIn")]
            LongFillIn = 4,
            
            /// <summary>
            /// Enum Likert for value: Likert
            /// </summary>
            [EnumMember(Value = "Likert")]
            Likert = 5,
            
            /// <summary>
            /// Enum Matching for value: Matching
            /// </summary>
            [EnumMember(Value = "Matching")]
            Matching = 6,
            
            /// <summary>
            /// Enum Performance for value: Performance
            /// </summary>
            [EnumMember(Value = "Performance")]
            Performance = 7,
            
            /// <summary>
            /// Enum Sequencing for value: Sequencing
            /// </summary>
            [EnumMember(Value = "Sequencing")]
            Sequencing = 8,
            
            /// <summary>
            /// Enum Numeric for value: Numeric
            /// </summary>
            [EnumMember(Value = "Numeric")]
            Numeric = 9,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 10
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeInteractionSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="type">type.</param>
        /// <param name="objectives">objectives.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="timestampUtc">timestampUtc.</param>
        /// <param name="correctResponses">correctResponses.</param>
        /// <param name="weighting">weighting.</param>
        /// <param name="learnerResponse">learnerResponse.</param>
        /// <param name="result">result.</param>
        /// <param name="latency">latency.</param>
        /// <param name="description">description.</param>
        public RuntimeInteractionSchema(string id = default(string), TypeEnum? type = default(TypeEnum?), List<string> objectives = default(List<string>), string timestamp = default(string), string timestampUtc = default(string), List<string> correctResponses = default(List<string>), string weighting = default(string), string learnerResponse = default(string), string result = default(string), string latency = default(string), string description = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.Objectives = objectives;
            this.Timestamp = timestamp;
            this.TimestampUtc = timestampUtc;
            this.CorrectResponses = correctResponses;
            this.Weighting = weighting;
            this.LearnerResponse = learnerResponse;
            this.Result = result;
            this.Latency = latency;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets Objectives
        /// </summary>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public List<string> Objectives { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets TimestampUtc
        /// </summary>
        [DataMember(Name="timestampUtc", EmitDefaultValue=false)]
        public string TimestampUtc { get; set; }

        /// <summary>
        /// Gets or Sets CorrectResponses
        /// </summary>
        [DataMember(Name="correctResponses", EmitDefaultValue=false)]
        public List<string> CorrectResponses { get; set; }

        /// <summary>
        /// Gets or Sets Weighting
        /// </summary>
        [DataMember(Name="weighting", EmitDefaultValue=false)]
        public string Weighting { get; set; }

        /// <summary>
        /// Gets or Sets LearnerResponse
        /// </summary>
        [DataMember(Name="learnerResponse", EmitDefaultValue=false)]
        public string LearnerResponse { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// Gets or Sets Latency
        /// </summary>
        [DataMember(Name="latency", EmitDefaultValue=false)]
        public string Latency { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeInteractionSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TimestampUtc: ").Append(TimestampUtc).Append("\n");
            sb.Append("  CorrectResponses: ").Append(CorrectResponses).Append("\n");
            sb.Append("  Weighting: ").Append(Weighting).Append("\n");
            sb.Append("  LearnerResponse: ").Append(LearnerResponse).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Latency: ").Append(Latency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeInteractionSchema);
        }

        /// <summary>
        /// Returns true if RuntimeInteractionSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeInteractionSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeInteractionSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Objectives == input.Objectives ||
                    this.Objectives != null &&
                    this.Objectives.SequenceEqual(input.Objectives)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TimestampUtc == input.TimestampUtc ||
                    (this.TimestampUtc != null &&
                    this.TimestampUtc.Equals(input.TimestampUtc))
                ) && 
                (
                    this.CorrectResponses == input.CorrectResponses ||
                    this.CorrectResponses != null &&
                    this.CorrectResponses.SequenceEqual(input.CorrectResponses)
                ) && 
                (
                    this.Weighting == input.Weighting ||
                    (this.Weighting != null &&
                    this.Weighting.Equals(input.Weighting))
                ) && 
                (
                    this.LearnerResponse == input.LearnerResponse ||
                    (this.LearnerResponse != null &&
                    this.LearnerResponse.Equals(input.LearnerResponse))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Latency == input.Latency ||
                    (this.Latency != null &&
                    this.Latency.Equals(input.Latency))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Objectives != null)
                    hashCode = hashCode * 59 + this.Objectives.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TimestampUtc != null)
                    hashCode = hashCode * 59 + this.TimestampUtc.GetHashCode();
                if (this.CorrectResponses != null)
                    hashCode = hashCode * 59 + this.CorrectResponses.GetHashCode();
                if (this.Weighting != null)
                    hashCode = hashCode * 59 + this.Weighting.GetHashCode();
                if (this.LearnerResponse != null)
                    hashCode = hashCode * 59 + this.LearnerResponse.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Latency != null)
                    hashCode = hashCode * 59 + this.Latency.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
