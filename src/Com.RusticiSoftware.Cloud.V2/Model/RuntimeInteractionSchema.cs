/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RuntimeInteractionSchema
    /// </summary>
    [DataContract]
    public partial class RuntimeInteractionSchema :  IEquatable<RuntimeInteractionSchema>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TrueFalse for "TrueFalse"
            /// </summary>
            [EnumMember(Value = "TrueFalse")]
            TrueFalse,
            
            /// <summary>
            /// Enum Choice for "Choice"
            /// </summary>
            [EnumMember(Value = "Choice")]
            Choice,
            
            /// <summary>
            /// Enum FillIn for "FillIn"
            /// </summary>
            [EnumMember(Value = "FillIn")]
            FillIn,
            
            /// <summary>
            /// Enum LongFillIn for "LongFillIn"
            /// </summary>
            [EnumMember(Value = "LongFillIn")]
            LongFillIn,
            
            /// <summary>
            /// Enum Likert for "Likert"
            /// </summary>
            [EnumMember(Value = "Likert")]
            Likert,
            
            /// <summary>
            /// Enum Matching for "Matching"
            /// </summary>
            [EnumMember(Value = "Matching")]
            Matching,
            
            /// <summary>
            /// Enum Performance for "Performance"
            /// </summary>
            [EnumMember(Value = "Performance")]
            Performance,
            
            /// <summary>
            /// Enum Sequencing for "Sequencing"
            /// </summary>
            [EnumMember(Value = "Sequencing")]
            Sequencing,
            
            /// <summary>
            /// Enum Numeric for "Numeric"
            /// </summary>
            [EnumMember(Value = "Numeric")]
            Numeric,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeInteractionSchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Objectives">Objectives.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="TimestampUtc">TimestampUtc.</param>
        /// <param name="CorrectResponses">CorrectResponses.</param>
        /// <param name="Weighting">Weighting.</param>
        /// <param name="LearnerResponse">LearnerResponse.</param>
        /// <param name="Result">Result.</param>
        /// <param name="Latency">Latency.</param>
        /// <param name="Description">Description.</param>
        public RuntimeInteractionSchema(string Id = default(string), TypeEnum? Type = default(TypeEnum?), List<string> Objectives = default(List<string>), string Timestamp = default(string), string TimestampUtc = default(string), List<string> CorrectResponses = default(List<string>), string Weighting = default(string), string LearnerResponse = default(string), string Result = default(string), string Latency = default(string), string Description = default(string))
        {
            this.Id = Id;
            this.Type = Type;
            this.Objectives = Objectives;
            this.Timestamp = Timestamp;
            this.TimestampUtc = TimestampUtc;
            this.CorrectResponses = CorrectResponses;
            this.Weighting = Weighting;
            this.LearnerResponse = LearnerResponse;
            this.Result = Result;
            this.Latency = Latency;
            this.Description = Description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Objectives
        /// </summary>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public List<string> Objectives { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets TimestampUtc
        /// </summary>
        [DataMember(Name="timestampUtc", EmitDefaultValue=false)]
        public string TimestampUtc { get; set; }
        /// <summary>
        /// Gets or Sets CorrectResponses
        /// </summary>
        [DataMember(Name="correctResponses", EmitDefaultValue=false)]
        public List<string> CorrectResponses { get; set; }
        /// <summary>
        /// Gets or Sets Weighting
        /// </summary>
        [DataMember(Name="weighting", EmitDefaultValue=false)]
        public string Weighting { get; set; }
        /// <summary>
        /// Gets or Sets LearnerResponse
        /// </summary>
        [DataMember(Name="learnerResponse", EmitDefaultValue=false)]
        public string LearnerResponse { get; set; }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }
        /// <summary>
        /// Gets or Sets Latency
        /// </summary>
        [DataMember(Name="latency", EmitDefaultValue=false)]
        public string Latency { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeInteractionSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TimestampUtc: ").Append(TimestampUtc).Append("\n");
            sb.Append("  CorrectResponses: ").Append(CorrectResponses).Append("\n");
            sb.Append("  Weighting: ").Append(Weighting).Append("\n");
            sb.Append("  LearnerResponse: ").Append(LearnerResponse).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Latency: ").Append(Latency).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuntimeInteractionSchema);
        }

        /// <summary>
        /// Returns true if RuntimeInteractionSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of RuntimeInteractionSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeInteractionSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Objectives == other.Objectives ||
                    this.Objectives != null &&
                    this.Objectives.SequenceEqual(other.Objectives)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.TimestampUtc == other.TimestampUtc ||
                    this.TimestampUtc != null &&
                    this.TimestampUtc.Equals(other.TimestampUtc)
                ) && 
                (
                    this.CorrectResponses == other.CorrectResponses ||
                    this.CorrectResponses != null &&
                    this.CorrectResponses.SequenceEqual(other.CorrectResponses)
                ) && 
                (
                    this.Weighting == other.Weighting ||
                    this.Weighting != null &&
                    this.Weighting.Equals(other.Weighting)
                ) && 
                (
                    this.LearnerResponse == other.LearnerResponse ||
                    this.LearnerResponse != null &&
                    this.LearnerResponse.Equals(other.LearnerResponse)
                ) && 
                (
                    this.Result == other.Result ||
                    this.Result != null &&
                    this.Result.Equals(other.Result)
                ) && 
                (
                    this.Latency == other.Latency ||
                    this.Latency != null &&
                    this.Latency.Equals(other.Latency)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Objectives != null)
                    hash = hash * 59 + this.Objectives.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.TimestampUtc != null)
                    hash = hash * 59 + this.TimestampUtc.GetHashCode();
                if (this.CorrectResponses != null)
                    hash = hash * 59 + this.CorrectResponses.GetHashCode();
                if (this.Weighting != null)
                    hash = hash * 59 + this.Weighting.GetHashCode();
                if (this.LearnerResponse != null)
                    hash = hash * 59 + this.LearnerResponse.GetHashCode();
                if (this.Result != null)
                    hash = hash * 59 + this.Result.GetHashCode();
                if (this.Latency != null)
                    hash = hash * 59 + this.Latency.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
