/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// Request schema to import a course asset file by fetching it from a url 
    /// </summary>
    [DataContract]
    public partial class ImportAssetRequestSchema :  IEquatable<ImportAssetRequestSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportAssetRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportAssetRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportAssetRequestSchema" /> class.
        /// </summary>
        /// <param name="fetchUrl">URL path to the asset file to import. (required).</param>
        /// <param name="destination">Relative path from the course&#39;s base directory where the asset file will be imported. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course.  (required).</param>
        public ImportAssetRequestSchema(string fetchUrl = default(string), string destination = default(string))
        {
            // to ensure "fetchUrl" is required (not null)
            if (fetchUrl == null)
            {
                throw new InvalidDataException("fetchUrl is a required property for ImportAssetRequestSchema and cannot be null");
            }
            else
            {
                this.FetchUrl = fetchUrl;
            }
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new InvalidDataException("destination is a required property for ImportAssetRequestSchema and cannot be null");
            }
            else
            {
                this.Destination = destination;
            }
        }
        
        /// <summary>
        /// URL path to the asset file to import.
        /// </summary>
        /// <value>URL path to the asset file to import.</value>
        [DataMember(Name="fetchUrl", EmitDefaultValue=false)]
        public string FetchUrl { get; set; }

        /// <summary>
        /// Relative path from the course&#39;s base directory where the asset file will be imported. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. 
        /// </summary>
        /// <value>Relative path from the course&#39;s base directory where the asset file will be imported. &#x60;/Etiquette/Course.html&#x60; will upload the file into the Etiquette folder of the course. </value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportAssetRequestSchema {\n");
            sb.Append("  FetchUrl: ").Append(FetchUrl).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportAssetRequestSchema);
        }

        /// <summary>
        /// Returns true if ImportAssetRequestSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportAssetRequestSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportAssetRequestSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FetchUrl == input.FetchUrl ||
                    (this.FetchUrl != null &&
                    this.FetchUrl.Equals(input.FetchUrl))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FetchUrl != null)
                    hashCode = hashCode * 59 + this.FetchUrl.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
