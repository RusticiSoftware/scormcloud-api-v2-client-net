/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// DispatchLtiInfoSchema
    /// </summary>
    [DataContract]
    public partial class DispatchLtiInfoSchema :  IEquatable<DispatchLtiInfoSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchLtiInfoSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DispatchLtiInfoSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchLtiInfoSchema" /> class.
        /// </summary>
        /// <param name="url">The LTI launch URL for this dispatch (required).</param>
        /// <param name="consumerKey">The OAuth consumer key that identifies the tool consumer for this dispatch. (required).</param>
        /// <param name="sharedSecret">The OAuth secret to be used for LTI authentication for this dispatch. (required).</param>
        public DispatchLtiInfoSchema(string url = default(string), string consumerKey = default(string), string sharedSecret = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for DispatchLtiInfoSchema and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "consumerKey" is required (not null)
            if (consumerKey == null)
            {
                throw new InvalidDataException("consumerKey is a required property for DispatchLtiInfoSchema and cannot be null");
            }
            else
            {
                this.ConsumerKey = consumerKey;
            }
            // to ensure "sharedSecret" is required (not null)
            if (sharedSecret == null)
            {
                throw new InvalidDataException("sharedSecret is a required property for DispatchLtiInfoSchema and cannot be null");
            }
            else
            {
                this.SharedSecret = sharedSecret;
            }
        }
        
        /// <summary>
        /// The LTI launch URL for this dispatch
        /// </summary>
        /// <value>The LTI launch URL for this dispatch</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The OAuth consumer key that identifies the tool consumer for this dispatch.
        /// </summary>
        /// <value>The OAuth consumer key that identifies the tool consumer for this dispatch.</value>
        [DataMember(Name="consumerKey", EmitDefaultValue=false)]
        public string ConsumerKey { get; set; }

        /// <summary>
        /// The OAuth secret to be used for LTI authentication for this dispatch.
        /// </summary>
        /// <value>The OAuth secret to be used for LTI authentication for this dispatch.</value>
        [DataMember(Name="sharedSecret", EmitDefaultValue=false)]
        public string SharedSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DispatchLtiInfoSchema {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ConsumerKey: ").Append(ConsumerKey).Append("\n");
            sb.Append("  SharedSecret: ").Append(SharedSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DispatchLtiInfoSchema);
        }

        /// <summary>
        /// Returns true if DispatchLtiInfoSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of DispatchLtiInfoSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DispatchLtiInfoSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ConsumerKey == input.ConsumerKey ||
                    (this.ConsumerKey != null &&
                    this.ConsumerKey.Equals(input.ConsumerKey))
                ) && 
                (
                    this.SharedSecret == input.SharedSecret ||
                    (this.SharedSecret != null &&
                    this.SharedSecret.Equals(input.SharedSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ConsumerKey != null)
                    hashCode = hashCode * 59 + this.ConsumerKey.GetHashCode();
                if (this.SharedSecret != null)
                    hashCode = hashCode * 59 + this.SharedSecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
