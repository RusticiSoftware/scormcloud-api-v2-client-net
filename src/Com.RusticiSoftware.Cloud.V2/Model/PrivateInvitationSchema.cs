/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// PrivateInvitationSchema
    /// </summary>
    [DataContract]
    public partial class PrivateInvitationSchema :  IEquatable<PrivateInvitationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateInvitationSchema" /> class.
        /// </summary>
        /// <param name="id">The invitationId for this invitation..</param>
        /// <param name="courseId">Course Id for this Invitation..</param>
        /// <param name="allowLaunch">If true, then new registrations can be created for this dispatch..</param>
        /// <param name="invitationEmail">invitationEmail.</param>
        /// <param name="createDate">The create date for the invitation.</param>
        /// <param name="updated">updated.</param>
        /// <param name="postBack">Specifies a URL for which to post activity and status data in real time as the course is completed.</param>
        /// <param name="expirationDate">The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time)..</param>
        /// <param name="registrationCount">The count of registrations for this invitation.</param>
        public PrivateInvitationSchema(string id = default(string), string courseId = default(string), bool? allowLaunch = default(bool?), InvitationEmailSchema invitationEmail = default(InvitationEmailSchema), DateTime? createDate = default(DateTime?), DateTime? updated = default(DateTime?), PostBackSchema postBack = default(PostBackSchema), DateTime? expirationDate = default(DateTime?), int? registrationCount = default(int?))
        {
            this.Id = id;
            this.CourseId = courseId;
            this.AllowLaunch = allowLaunch;
            this.InvitationEmail = invitationEmail;
            this.CreateDate = createDate;
            this.Updated = updated;
            this.PostBack = postBack;
            this.ExpirationDate = expirationDate;
            this.RegistrationCount = registrationCount;
        }
        
        /// <summary>
        /// The invitationId for this invitation.
        /// </summary>
        /// <value>The invitationId for this invitation.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Course Id for this Invitation.
        /// </summary>
        /// <value>Course Id for this Invitation.</value>
        [DataMember(Name="courseId", EmitDefaultValue=false)]
        public string CourseId { get; set; }

        /// <summary>
        /// If true, then new registrations can be created for this dispatch.
        /// </summary>
        /// <value>If true, then new registrations can be created for this dispatch.</value>
        [DataMember(Name="allowLaunch", EmitDefaultValue=false)]
        public bool? AllowLaunch { get; set; }

        /// <summary>
        /// Gets or Sets InvitationEmail
        /// </summary>
        [DataMember(Name="invitationEmail", EmitDefaultValue=false)]
        public InvitationEmailSchema InvitationEmail { get; set; }

        /// <summary>
        /// The create date for the invitation
        /// </summary>
        /// <value>The create date for the invitation</value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Specifies a URL for which to post activity and status data in real time as the course is completed
        /// </summary>
        /// <value>Specifies a URL for which to post activity and status data in real time as the course is completed</value>
        [DataMember(Name="postBack", EmitDefaultValue=false)]
        public PostBackSchema PostBack { get; set; }

        /// <summary>
        /// The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).
        /// </summary>
        /// <value>The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The count of registrations for this invitation
        /// </summary>
        /// <value>The count of registrations for this invitation</value>
        [DataMember(Name="registrationCount", EmitDefaultValue=false)]
        public int? RegistrationCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrivateInvitationSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("  AllowLaunch: ").Append(AllowLaunch).Append("\n");
            sb.Append("  InvitationEmail: ").Append(InvitationEmail).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  PostBack: ").Append(PostBack).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  RegistrationCount: ").Append(RegistrationCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrivateInvitationSchema);
        }

        /// <summary>
        /// Returns true if PrivateInvitationSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of PrivateInvitationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrivateInvitationSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CourseId == input.CourseId ||
                    (this.CourseId != null &&
                    this.CourseId.Equals(input.CourseId))
                ) && 
                (
                    this.AllowLaunch == input.AllowLaunch ||
                    (this.AllowLaunch != null &&
                    this.AllowLaunch.Equals(input.AllowLaunch))
                ) && 
                (
                    this.InvitationEmail == input.InvitationEmail ||
                    (this.InvitationEmail != null &&
                    this.InvitationEmail.Equals(input.InvitationEmail))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.PostBack == input.PostBack ||
                    (this.PostBack != null &&
                    this.PostBack.Equals(input.PostBack))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.RegistrationCount == input.RegistrationCount ||
                    (this.RegistrationCount != null &&
                    this.RegistrationCount.Equals(input.RegistrationCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CourseId != null)
                    hashCode = hashCode * 59 + this.CourseId.GetHashCode();
                if (this.AllowLaunch != null)
                    hashCode = hashCode * 59 + this.AllowLaunch.GetHashCode();
                if (this.InvitationEmail != null)
                    hashCode = hashCode * 59 + this.InvitationEmail.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.PostBack != null)
                    hashCode = hashCode * 59 + this.PostBack.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.RegistrationCount != null)
                    hashCode = hashCode * 59 + this.RegistrationCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
