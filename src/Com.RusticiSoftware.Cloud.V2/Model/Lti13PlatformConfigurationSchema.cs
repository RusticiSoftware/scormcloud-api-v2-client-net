/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// Lti13PlatformConfigurationSchema
    /// </summary>
    [DataContract]
    public partial class Lti13PlatformConfigurationSchema :  IEquatable<Lti13PlatformConfigurationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Lti13PlatformConfigurationSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Lti13PlatformConfigurationSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Lti13PlatformConfigurationSchema" /> class.
        /// </summary>
        /// <param name="clientId">OAuth2 client Id for this tool (required).</param>
        /// <param name="platformIssuerIdentifier">Issuer identifier identifying the learning platform (required).</param>
        /// <param name="deploymentId">An unchanging identifier (locally unique within the platformIssuerIdentifier) for the platform-tool integration (required).</param>
        /// <param name="oidcAuthorizationEndpoint">Endpoint that will initiate the OIDC Authentication Request (required).</param>
        /// <param name="jsonWebKeySetUrl">Path to the platform&#39;s JSON Web Key Set (required).</param>
        /// <param name="accessTokenUrl">Endpoint that will return OAuth 2 access tokens for the platform.</param>
        public Lti13PlatformConfigurationSchema(string clientId = default(string), string platformIssuerIdentifier = default(string), string deploymentId = default(string), string oidcAuthorizationEndpoint = default(string), string jsonWebKeySetUrl = default(string), string accessTokenUrl = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for Lti13PlatformConfigurationSchema and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "platformIssuerIdentifier" is required (not null)
            if (platformIssuerIdentifier == null)
            {
                throw new InvalidDataException("platformIssuerIdentifier is a required property for Lti13PlatformConfigurationSchema and cannot be null");
            }
            else
            {
                this.PlatformIssuerIdentifier = platformIssuerIdentifier;
            }
            // to ensure "deploymentId" is required (not null)
            if (deploymentId == null)
            {
                throw new InvalidDataException("deploymentId is a required property for Lti13PlatformConfigurationSchema and cannot be null");
            }
            else
            {
                this.DeploymentId = deploymentId;
            }
            // to ensure "oidcAuthorizationEndpoint" is required (not null)
            if (oidcAuthorizationEndpoint == null)
            {
                throw new InvalidDataException("oidcAuthorizationEndpoint is a required property for Lti13PlatformConfigurationSchema and cannot be null");
            }
            else
            {
                this.OidcAuthorizationEndpoint = oidcAuthorizationEndpoint;
            }
            // to ensure "jsonWebKeySetUrl" is required (not null)
            if (jsonWebKeySetUrl == null)
            {
                throw new InvalidDataException("jsonWebKeySetUrl is a required property for Lti13PlatformConfigurationSchema and cannot be null");
            }
            else
            {
                this.JsonWebKeySetUrl = jsonWebKeySetUrl;
            }
            this.AccessTokenUrl = accessTokenUrl;
        }
        
        /// <summary>
        /// OAuth2 client Id for this tool
        /// </summary>
        /// <value>OAuth2 client Id for this tool</value>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Issuer identifier identifying the learning platform
        /// </summary>
        /// <value>Issuer identifier identifying the learning platform</value>
        [DataMember(Name="platformIssuerIdentifier", EmitDefaultValue=false)]
        public string PlatformIssuerIdentifier { get; set; }

        /// <summary>
        /// An unchanging identifier (locally unique within the platformIssuerIdentifier) for the platform-tool integration
        /// </summary>
        /// <value>An unchanging identifier (locally unique within the platformIssuerIdentifier) for the platform-tool integration</value>
        [DataMember(Name="deploymentId", EmitDefaultValue=false)]
        public string DeploymentId { get; set; }

        /// <summary>
        /// Endpoint that will initiate the OIDC Authentication Request
        /// </summary>
        /// <value>Endpoint that will initiate the OIDC Authentication Request</value>
        [DataMember(Name="oidcAuthorizationEndpoint", EmitDefaultValue=false)]
        public string OidcAuthorizationEndpoint { get; set; }

        /// <summary>
        /// Path to the platform&#39;s JSON Web Key Set
        /// </summary>
        /// <value>Path to the platform&#39;s JSON Web Key Set</value>
        [DataMember(Name="jsonWebKeySetUrl", EmitDefaultValue=false)]
        public string JsonWebKeySetUrl { get; set; }

        /// <summary>
        /// Endpoint that will return OAuth 2 access tokens for the platform
        /// </summary>
        /// <value>Endpoint that will return OAuth 2 access tokens for the platform</value>
        [DataMember(Name="accessTokenUrl", EmitDefaultValue=false)]
        public string AccessTokenUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Lti13PlatformConfigurationSchema {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  PlatformIssuerIdentifier: ").Append(PlatformIssuerIdentifier).Append("\n");
            sb.Append("  DeploymentId: ").Append(DeploymentId).Append("\n");
            sb.Append("  OidcAuthorizationEndpoint: ").Append(OidcAuthorizationEndpoint).Append("\n");
            sb.Append("  JsonWebKeySetUrl: ").Append(JsonWebKeySetUrl).Append("\n");
            sb.Append("  AccessTokenUrl: ").Append(AccessTokenUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Lti13PlatformConfigurationSchema);
        }

        /// <summary>
        /// Returns true if Lti13PlatformConfigurationSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of Lti13PlatformConfigurationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Lti13PlatformConfigurationSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.PlatformIssuerIdentifier == input.PlatformIssuerIdentifier ||
                    (this.PlatformIssuerIdentifier != null &&
                    this.PlatformIssuerIdentifier.Equals(input.PlatformIssuerIdentifier))
                ) && 
                (
                    this.DeploymentId == input.DeploymentId ||
                    (this.DeploymentId != null &&
                    this.DeploymentId.Equals(input.DeploymentId))
                ) && 
                (
                    this.OidcAuthorizationEndpoint == input.OidcAuthorizationEndpoint ||
                    (this.OidcAuthorizationEndpoint != null &&
                    this.OidcAuthorizationEndpoint.Equals(input.OidcAuthorizationEndpoint))
                ) && 
                (
                    this.JsonWebKeySetUrl == input.JsonWebKeySetUrl ||
                    (this.JsonWebKeySetUrl != null &&
                    this.JsonWebKeySetUrl.Equals(input.JsonWebKeySetUrl))
                ) && 
                (
                    this.AccessTokenUrl == input.AccessTokenUrl ||
                    (this.AccessTokenUrl != null &&
                    this.AccessTokenUrl.Equals(input.AccessTokenUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.PlatformIssuerIdentifier != null)
                    hashCode = hashCode * 59 + this.PlatformIssuerIdentifier.GetHashCode();
                if (this.DeploymentId != null)
                    hashCode = hashCode * 59 + this.DeploymentId.GetHashCode();
                if (this.OidcAuthorizationEndpoint != null)
                    hashCode = hashCode * 59 + this.OidcAuthorizationEndpoint.GetHashCode();
                if (this.JsonWebKeySetUrl != null)
                    hashCode = hashCode * 59 + this.JsonWebKeySetUrl.GetHashCode();
                if (this.AccessTokenUrl != null)
                    hashCode = hashCode * 59 + this.AccessTokenUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
