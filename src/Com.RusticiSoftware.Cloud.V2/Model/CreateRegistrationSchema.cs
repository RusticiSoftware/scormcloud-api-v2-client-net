/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CreateRegistrationSchema
    /// </summary>
    [DataContract]
    public partial class CreateRegistrationSchema :  IEquatable<CreateRegistrationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRegistrationSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRegistrationSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRegistrationSchema" /> class.
        /// </summary>
        /// <param name="CourseId">CourseId (required).</param>
        /// <param name="Learner">Learner (required).</param>
        /// <param name="RegistrationId">RegistrationId (required).</param>
        /// <param name="XapiRegistrationId">The xapiRegistrationId to be associated with this registration. If not specified, the system will assign an xapiRegistrationId. As per the xApi specification, this must be a UUID..</param>
        /// <param name="LearnerTags">LearnerTags.</param>
        /// <param name="CourseTags">CourseTags.</param>
        /// <param name="RegistrationTags">RegistrationTags.</param>
        /// <param name="PostBack">Specifies an optional override URL for which to post activity and status data in real time as the course is completed. By default all of these settings are read from your configuration..</param>
        /// <param name="InitialRegistrationState">InitialRegistrationState.</param>
        /// <param name="InitialSettings">InitialSettings.</param>
        public CreateRegistrationSchema(string CourseId = default(string), LearnerSchema Learner = default(LearnerSchema), string RegistrationId = default(string), string XapiRegistrationId = default(string), List<string> LearnerTags = default(List<string>), List<string> CourseTags = default(List<string>), List<string> RegistrationTags = default(List<string>), PostBackSchema PostBack = default(PostBackSchema), RegistrationSchema InitialRegistrationState = default(RegistrationSchema), SettingsPostSchema InitialSettings = default(SettingsPostSchema))
        {
            // to ensure "CourseId" is required (not null)
            if (CourseId == null)
            {
                throw new InvalidDataException("CourseId is a required property for CreateRegistrationSchema and cannot be null");
            }
            else
            {
                this.CourseId = CourseId;
            }
            // to ensure "Learner" is required (not null)
            if (Learner == null)
            {
                throw new InvalidDataException("Learner is a required property for CreateRegistrationSchema and cannot be null");
            }
            else
            {
                this.Learner = Learner;
            }
            // to ensure "RegistrationId" is required (not null)
            if (RegistrationId == null)
            {
                throw new InvalidDataException("RegistrationId is a required property for CreateRegistrationSchema and cannot be null");
            }
            else
            {
                this.RegistrationId = RegistrationId;
            }
            this.XapiRegistrationId = XapiRegistrationId;
            this.LearnerTags = LearnerTags;
            this.CourseTags = CourseTags;
            this.RegistrationTags = RegistrationTags;
            this.PostBack = PostBack;
            this.InitialRegistrationState = InitialRegistrationState;
            this.InitialSettings = InitialSettings;
        }
        
        /// <summary>
        /// Gets or Sets CourseId
        /// </summary>
        [DataMember(Name="courseId", EmitDefaultValue=false)]
        public string CourseId { get; set; }
        /// <summary>
        /// Gets or Sets Learner
        /// </summary>
        [DataMember(Name="learner", EmitDefaultValue=false)]
        public LearnerSchema Learner { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationId
        /// </summary>
        [DataMember(Name="registrationId", EmitDefaultValue=false)]
        public string RegistrationId { get; set; }
        /// <summary>
        /// The xapiRegistrationId to be associated with this registration. If not specified, the system will assign an xapiRegistrationId. As per the xApi specification, this must be a UUID.
        /// </summary>
        /// <value>The xapiRegistrationId to be associated with this registration. If not specified, the system will assign an xapiRegistrationId. As per the xApi specification, this must be a UUID.</value>
        [DataMember(Name="xapiRegistrationId", EmitDefaultValue=false)]
        public string XapiRegistrationId { get; set; }
        /// <summary>
        /// Gets or Sets LearnerTags
        /// </summary>
        [DataMember(Name="learnerTags", EmitDefaultValue=false)]
        public List<string> LearnerTags { get; set; }
        /// <summary>
        /// Gets or Sets CourseTags
        /// </summary>
        [DataMember(Name="courseTags", EmitDefaultValue=false)]
        public List<string> CourseTags { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationTags
        /// </summary>
        [DataMember(Name="registrationTags", EmitDefaultValue=false)]
        public List<string> RegistrationTags { get; set; }
        /// <summary>
        /// Specifies an optional override URL for which to post activity and status data in real time as the course is completed. By default all of these settings are read from your configuration.
        /// </summary>
        /// <value>Specifies an optional override URL for which to post activity and status data in real time as the course is completed. By default all of these settings are read from your configuration.</value>
        [DataMember(Name="postBack", EmitDefaultValue=false)]
        public PostBackSchema PostBack { get; set; }
        /// <summary>
        /// Gets or Sets InitialRegistrationState
        /// </summary>
        [DataMember(Name="initialRegistrationState", EmitDefaultValue=false)]
        public RegistrationSchema InitialRegistrationState { get; set; }
        /// <summary>
        /// Gets or Sets InitialSettings
        /// </summary>
        [DataMember(Name="initialSettings", EmitDefaultValue=false)]
        public SettingsPostSchema InitialSettings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRegistrationSchema {\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("  Learner: ").Append(Learner).Append("\n");
            sb.Append("  RegistrationId: ").Append(RegistrationId).Append("\n");
            sb.Append("  XapiRegistrationId: ").Append(XapiRegistrationId).Append("\n");
            sb.Append("  LearnerTags: ").Append(LearnerTags).Append("\n");
            sb.Append("  CourseTags: ").Append(CourseTags).Append("\n");
            sb.Append("  RegistrationTags: ").Append(RegistrationTags).Append("\n");
            sb.Append("  PostBack: ").Append(PostBack).Append("\n");
            sb.Append("  InitialRegistrationState: ").Append(InitialRegistrationState).Append("\n");
            sb.Append("  InitialSettings: ").Append(InitialSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateRegistrationSchema);
        }

        /// <summary>
        /// Returns true if CreateRegistrationSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateRegistrationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRegistrationSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CourseId == other.CourseId ||
                    this.CourseId != null &&
                    this.CourseId.Equals(other.CourseId)
                ) && 
                (
                    this.Learner == other.Learner ||
                    this.Learner != null &&
                    this.Learner.Equals(other.Learner)
                ) && 
                (
                    this.RegistrationId == other.RegistrationId ||
                    this.RegistrationId != null &&
                    this.RegistrationId.Equals(other.RegistrationId)
                ) && 
                (
                    this.XapiRegistrationId == other.XapiRegistrationId ||
                    this.XapiRegistrationId != null &&
                    this.XapiRegistrationId.Equals(other.XapiRegistrationId)
                ) && 
                (
                    this.LearnerTags == other.LearnerTags ||
                    this.LearnerTags != null &&
                    this.LearnerTags.SequenceEqual(other.LearnerTags)
                ) && 
                (
                    this.CourseTags == other.CourseTags ||
                    this.CourseTags != null &&
                    this.CourseTags.SequenceEqual(other.CourseTags)
                ) && 
                (
                    this.RegistrationTags == other.RegistrationTags ||
                    this.RegistrationTags != null &&
                    this.RegistrationTags.SequenceEqual(other.RegistrationTags)
                ) && 
                (
                    this.PostBack == other.PostBack ||
                    this.PostBack != null &&
                    this.PostBack.Equals(other.PostBack)
                ) && 
                (
                    this.InitialRegistrationState == other.InitialRegistrationState ||
                    this.InitialRegistrationState != null &&
                    this.InitialRegistrationState.Equals(other.InitialRegistrationState)
                ) && 
                (
                    this.InitialSettings == other.InitialSettings ||
                    this.InitialSettings != null &&
                    this.InitialSettings.Equals(other.InitialSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CourseId != null)
                    hash = hash * 59 + this.CourseId.GetHashCode();
                if (this.Learner != null)
                    hash = hash * 59 + this.Learner.GetHashCode();
                if (this.RegistrationId != null)
                    hash = hash * 59 + this.RegistrationId.GetHashCode();
                if (this.XapiRegistrationId != null)
                    hash = hash * 59 + this.XapiRegistrationId.GetHashCode();
                if (this.LearnerTags != null)
                    hash = hash * 59 + this.LearnerTags.GetHashCode();
                if (this.CourseTags != null)
                    hash = hash * 59 + this.CourseTags.GetHashCode();
                if (this.RegistrationTags != null)
                    hash = hash * 59 + this.RegistrationTags.GetHashCode();
                if (this.PostBack != null)
                    hash = hash * 59 + this.PostBack.GetHashCode();
                if (this.InitialRegistrationState != null)
                    hash = hash * 59 + this.InitialRegistrationState.GetHashCode();
                if (this.InitialSettings != null)
                    hash = hash * 59 + this.InitialSettings.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
