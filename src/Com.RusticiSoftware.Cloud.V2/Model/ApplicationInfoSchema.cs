/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ApplicationInfoSchema
    /// </summary>
    [DataContract]
    public partial class ApplicationInfoSchema :  IEquatable<ApplicationInfoSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationInfoSchema" /> class.
        /// </summary>
        /// <param name="id">The application id for this application..</param>
        /// <param name="name">The name of this application..</param>
        /// <param name="createDate">The time the application was created in UTC.</param>
        /// <param name="updateDate">The time the application was last updated in UTC.</param>
        /// <param name="allowDelete">Whether the application is allowed to perform delete operations.</param>
        /// <param name="courseCount">courseCount.</param>
        /// <param name="registrationCount">registrationCount.</param>
        public ApplicationInfoSchema(string id = default(string), string name = default(string), DateTime? createDate = default(DateTime?), DateTime? updateDate = default(DateTime?), bool? allowDelete = default(bool?), int? courseCount = default(int?), int? registrationCount = default(int?))
        {
            this.Id = id;
            this.Name = name;
            this.CreateDate = createDate;
            this.UpdateDate = updateDate;
            this.AllowDelete = allowDelete;
            this.CourseCount = courseCount;
            this.RegistrationCount = registrationCount;
        }
        
        /// <summary>
        /// The application id for this application.
        /// </summary>
        /// <value>The application id for this application.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of this application.
        /// </summary>
        /// <value>The name of this application.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The time the application was created in UTC
        /// </summary>
        /// <value>The time the application was created in UTC</value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// The time the application was last updated in UTC
        /// </summary>
        /// <value>The time the application was last updated in UTC</value>
        [DataMember(Name="updateDate", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Whether the application is allowed to perform delete operations
        /// </summary>
        /// <value>Whether the application is allowed to perform delete operations</value>
        [DataMember(Name="allowDelete", EmitDefaultValue=false)]
        public bool? AllowDelete { get; set; }

        /// <summary>
        /// Gets or Sets CourseCount
        /// </summary>
        [DataMember(Name="courseCount", EmitDefaultValue=false)]
        public int? CourseCount { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCount
        /// </summary>
        [DataMember(Name="registrationCount", EmitDefaultValue=false)]
        public int? RegistrationCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationInfoSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  AllowDelete: ").Append(AllowDelete).Append("\n");
            sb.Append("  CourseCount: ").Append(CourseCount).Append("\n");
            sb.Append("  RegistrationCount: ").Append(RegistrationCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationInfoSchema);
        }

        /// <summary>
        /// Returns true if ApplicationInfoSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationInfoSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationInfoSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.AllowDelete == input.AllowDelete ||
                    (this.AllowDelete != null &&
                    this.AllowDelete.Equals(input.AllowDelete))
                ) && 
                (
                    this.CourseCount == input.CourseCount ||
                    (this.CourseCount != null &&
                    this.CourseCount.Equals(input.CourseCount))
                ) && 
                (
                    this.RegistrationCount == input.RegistrationCount ||
                    (this.RegistrationCount != null &&
                    this.RegistrationCount.Equals(input.RegistrationCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.AllowDelete != null)
                    hashCode = hashCode * 59 + this.AllowDelete.GetHashCode();
                if (this.CourseCount != null)
                    hashCode = hashCode * 59 + this.CourseCount.GetHashCode();
                if (this.RegistrationCount != null)
                    hashCode = hashCode * 59 + this.RegistrationCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
