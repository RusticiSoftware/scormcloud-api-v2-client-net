/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// DestinationSchema
    /// </summary>
    [DataContract]
    public partial class DestinationSchema :  IEquatable<DestinationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationSchema" /> class.
        /// </summary>
        /// <param name="Name">The destination&#39;s name..</param>
        /// <param name="Tags">Optional array of tags..</param>
        /// <param name="Email">SCORM Cloud user e-mail associated with this destination. If this is not provided, it will default to the owner of the Realm. .</param>
        /// <param name="Notes">Any provided notes about this Destination.</param>
        /// <param name="LaunchAuth">LaunchAuth.</param>
        public DestinationSchema(string Name = default(string), List<string> Tags = default(List<string>), string Email = default(string), string Notes = default(string), LaunchAuthSchema LaunchAuth = default(LaunchAuthSchema))
        {
            this.Name = Name;
            this.Tags = Tags;
            this.Email = Email;
            this.Notes = Notes;
            this.LaunchAuth = LaunchAuth;
        }
        
        /// <summary>
        /// The destination&#39;s name.
        /// </summary>
        /// <value>The destination&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Optional array of tags.
        /// </summary>
        /// <value>Optional array of tags.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// SCORM Cloud user e-mail associated with this destination. If this is not provided, it will default to the owner of the Realm. 
        /// </summary>
        /// <value>SCORM Cloud user e-mail associated with this destination. If this is not provided, it will default to the owner of the Realm. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Any provided notes about this Destination
        /// </summary>
        /// <value>Any provided notes about this Destination</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// Gets or Sets LaunchAuth
        /// </summary>
        [DataMember(Name="launchAuth", EmitDefaultValue=false)]
        public LaunchAuthSchema LaunchAuth { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinationSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  LaunchAuth: ").Append(LaunchAuth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DestinationSchema);
        }

        /// <summary>
        /// Returns true if DestinationSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of DestinationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.LaunchAuth == other.LaunchAuth ||
                    this.LaunchAuth != null &&
                    this.LaunchAuth.Equals(other.LaunchAuth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.LaunchAuth != null)
                    hash = hash * 59 + this.LaunchAuth.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
