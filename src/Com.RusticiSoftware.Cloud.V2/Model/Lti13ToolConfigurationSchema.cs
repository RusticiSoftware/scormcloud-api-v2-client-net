/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// Lti13ToolConfigurationSchema
    /// </summary>
    [DataContract]
    public partial class Lti13ToolConfigurationSchema :  IEquatable<Lti13ToolConfigurationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Lti13ToolConfigurationSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Lti13ToolConfigurationSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Lti13ToolConfigurationSchema" /> class.
        /// </summary>
        /// <param name="publicKey">Public key for LTI 1.3 tool (required).</param>
        /// <param name="oidcLoginInitiationsUrl">Endpoint where the OIDC Authorization flow will be initiated (required).</param>
        /// <param name="redirectUri">Endpoint where the OIDC Authorization Response should be sent (required).</param>
        /// <param name="jsonWebKeySetUrl">Path to the tool&#39;s JSON Web Key Set (required).</param>
        public Lti13ToolConfigurationSchema(string publicKey = default(string), string oidcLoginInitiationsUrl = default(string), string redirectUri = default(string), string jsonWebKeySetUrl = default(string))
        {
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new InvalidDataException("publicKey is a required property for Lti13ToolConfigurationSchema and cannot be null");
            }
            else
            {
                this.PublicKey = publicKey;
            }
            // to ensure "oidcLoginInitiationsUrl" is required (not null)
            if (oidcLoginInitiationsUrl == null)
            {
                throw new InvalidDataException("oidcLoginInitiationsUrl is a required property for Lti13ToolConfigurationSchema and cannot be null");
            }
            else
            {
                this.OidcLoginInitiationsUrl = oidcLoginInitiationsUrl;
            }
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new InvalidDataException("redirectUri is a required property for Lti13ToolConfigurationSchema and cannot be null");
            }
            else
            {
                this.RedirectUri = redirectUri;
            }
            // to ensure "jsonWebKeySetUrl" is required (not null)
            if (jsonWebKeySetUrl == null)
            {
                throw new InvalidDataException("jsonWebKeySetUrl is a required property for Lti13ToolConfigurationSchema and cannot be null");
            }
            else
            {
                this.JsonWebKeySetUrl = jsonWebKeySetUrl;
            }
        }
        
        /// <summary>
        /// Public key for LTI 1.3 tool
        /// </summary>
        /// <value>Public key for LTI 1.3 tool</value>
        [DataMember(Name="publicKey", EmitDefaultValue=false)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Endpoint where the OIDC Authorization flow will be initiated
        /// </summary>
        /// <value>Endpoint where the OIDC Authorization flow will be initiated</value>
        [DataMember(Name="oidcLoginInitiationsUrl", EmitDefaultValue=false)]
        public string OidcLoginInitiationsUrl { get; set; }

        /// <summary>
        /// Endpoint where the OIDC Authorization Response should be sent
        /// </summary>
        /// <value>Endpoint where the OIDC Authorization Response should be sent</value>
        [DataMember(Name="redirectUri", EmitDefaultValue=false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Path to the tool&#39;s JSON Web Key Set
        /// </summary>
        /// <value>Path to the tool&#39;s JSON Web Key Set</value>
        [DataMember(Name="jsonWebKeySetUrl", EmitDefaultValue=false)]
        public string JsonWebKeySetUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Lti13ToolConfigurationSchema {\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  OidcLoginInitiationsUrl: ").Append(OidcLoginInitiationsUrl).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  JsonWebKeySetUrl: ").Append(JsonWebKeySetUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Lti13ToolConfigurationSchema);
        }

        /// <summary>
        /// Returns true if Lti13ToolConfigurationSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of Lti13ToolConfigurationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Lti13ToolConfigurationSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.OidcLoginInitiationsUrl == input.OidcLoginInitiationsUrl ||
                    (this.OidcLoginInitiationsUrl != null &&
                    this.OidcLoginInitiationsUrl.Equals(input.OidcLoginInitiationsUrl))
                ) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) && 
                (
                    this.JsonWebKeySetUrl == input.JsonWebKeySetUrl ||
                    (this.JsonWebKeySetUrl != null &&
                    this.JsonWebKeySetUrl.Equals(input.JsonWebKeySetUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.OidcLoginInitiationsUrl != null)
                    hashCode = hashCode * 59 + this.OidcLoginInitiationsUrl.GetHashCode();
                if (this.RedirectUri != null)
                    hashCode = hashCode * 59 + this.RedirectUri.GetHashCode();
                if (this.JsonWebKeySetUrl != null)
                    hashCode = hashCode * 59 + this.JsonWebKeySetUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
