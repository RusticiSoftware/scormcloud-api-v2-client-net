/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// LaunchHistorySchema
    /// </summary>
    [DataContract]
    public partial class LaunchHistorySchema :  IEquatable<LaunchHistorySchema>, IValidatableObject
    {
        /// <summary>
        /// Defines CompletionStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompletionStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,
            
            /// <summary>
            /// Enum INCOMPLETE for value: INCOMPLETE
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE = 3
        }

        /// <summary>
        /// Gets or Sets CompletionStatus
        /// </summary>
        [DataMember(Name="completionStatus", EmitDefaultValue=false)]
        public CompletionStatusEnum? CompletionStatus { get; set; }
        /// <summary>
        /// Defines SuccessStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SuccessStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 2,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3
        }

        /// <summary>
        /// Gets or Sets SuccessStatus
        /// </summary>
        [DataMember(Name="successStatus", EmitDefaultValue=false)]
        public SuccessStatusEnum? SuccessStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LaunchHistorySchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="instance">instance.</param>
        /// <param name="score">score.</param>
        /// <param name="completionStatus">completionStatus (default to CompletionStatusEnum.UNKNOWN).</param>
        /// <param name="successStatus">successStatus (default to SuccessStatusEnum.UNKNOWN).</param>
        /// <param name="historyLog">historyLog.</param>
        /// <param name="totalSecondsTracked">totalSecondsTracked.</param>
        /// <param name="launchTime">The time of the launch in UTC.</param>
        /// <param name="exitTime">The time of the exit in UTC.</param>
        /// <param name="lastRuntimeUpdate">The time of the last runtime update in UTC.</param>
        public LaunchHistorySchema(string id = default(string), int? instance = default(int?), ScoreSchema score = default(ScoreSchema), CompletionStatusEnum? completionStatus = CompletionStatusEnum.UNKNOWN, SuccessStatusEnum? successStatus = SuccessStatusEnum.UNKNOWN, string historyLog = default(string), double? totalSecondsTracked = default(double?), DateTime? launchTime = default(DateTime?), DateTime? exitTime = default(DateTime?), DateTime? lastRuntimeUpdate = default(DateTime?))
        {
            this.Id = id;
            this.Instance = instance;
            this.Score = score;
            // use default value if no "completionStatus" provided
            if (completionStatus == null)
            {
                this.CompletionStatus = CompletionStatusEnum.UNKNOWN;
            }
            else
            {
                this.CompletionStatus = completionStatus;
            }
            // use default value if no "successStatus" provided
            if (successStatus == null)
            {
                this.SuccessStatus = SuccessStatusEnum.UNKNOWN;
            }
            else
            {
                this.SuccessStatus = successStatus;
            }
            this.HistoryLog = historyLog;
            this.TotalSecondsTracked = totalSecondsTracked;
            this.LaunchTime = launchTime;
            this.ExitTime = exitTime;
            this.LastRuntimeUpdate = lastRuntimeUpdate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public int? Instance { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }



        /// <summary>
        /// Gets or Sets HistoryLog
        /// </summary>
        [DataMember(Name="historyLog", EmitDefaultValue=false)]
        public string HistoryLog { get; set; }

        /// <summary>
        /// Gets or Sets TotalSecondsTracked
        /// </summary>
        [DataMember(Name="totalSecondsTracked", EmitDefaultValue=false)]
        public double? TotalSecondsTracked { get; set; }

        /// <summary>
        /// The time of the launch in UTC
        /// </summary>
        /// <value>The time of the launch in UTC</value>
        [DataMember(Name="launchTime", EmitDefaultValue=false)]
        public DateTime? LaunchTime { get; set; }

        /// <summary>
        /// The time of the exit in UTC
        /// </summary>
        /// <value>The time of the exit in UTC</value>
        [DataMember(Name="exitTime", EmitDefaultValue=false)]
        public DateTime? ExitTime { get; set; }

        /// <summary>
        /// The time of the last runtime update in UTC
        /// </summary>
        /// <value>The time of the last runtime update in UTC</value>
        [DataMember(Name="lastRuntimeUpdate", EmitDefaultValue=false)]
        public DateTime? LastRuntimeUpdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LaunchHistorySchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  CompletionStatus: ").Append(CompletionStatus).Append("\n");
            sb.Append("  SuccessStatus: ").Append(SuccessStatus).Append("\n");
            sb.Append("  HistoryLog: ").Append(HistoryLog).Append("\n");
            sb.Append("  TotalSecondsTracked: ").Append(TotalSecondsTracked).Append("\n");
            sb.Append("  LaunchTime: ").Append(LaunchTime).Append("\n");
            sb.Append("  ExitTime: ").Append(ExitTime).Append("\n");
            sb.Append("  LastRuntimeUpdate: ").Append(LastRuntimeUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LaunchHistorySchema);
        }

        /// <summary>
        /// Returns true if LaunchHistorySchema instances are equal
        /// </summary>
        /// <param name="input">Instance of LaunchHistorySchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LaunchHistorySchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Instance == input.Instance ||
                    (this.Instance != null &&
                    this.Instance.Equals(input.Instance))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.CompletionStatus == input.CompletionStatus ||
                    (this.CompletionStatus != null &&
                    this.CompletionStatus.Equals(input.CompletionStatus))
                ) && 
                (
                    this.SuccessStatus == input.SuccessStatus ||
                    (this.SuccessStatus != null &&
                    this.SuccessStatus.Equals(input.SuccessStatus))
                ) && 
                (
                    this.HistoryLog == input.HistoryLog ||
                    (this.HistoryLog != null &&
                    this.HistoryLog.Equals(input.HistoryLog))
                ) && 
                (
                    this.TotalSecondsTracked == input.TotalSecondsTracked ||
                    (this.TotalSecondsTracked != null &&
                    this.TotalSecondsTracked.Equals(input.TotalSecondsTracked))
                ) && 
                (
                    this.LaunchTime == input.LaunchTime ||
                    (this.LaunchTime != null &&
                    this.LaunchTime.Equals(input.LaunchTime))
                ) && 
                (
                    this.ExitTime == input.ExitTime ||
                    (this.ExitTime != null &&
                    this.ExitTime.Equals(input.ExitTime))
                ) && 
                (
                    this.LastRuntimeUpdate == input.LastRuntimeUpdate ||
                    (this.LastRuntimeUpdate != null &&
                    this.LastRuntimeUpdate.Equals(input.LastRuntimeUpdate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Instance != null)
                    hashCode = hashCode * 59 + this.Instance.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.CompletionStatus != null)
                    hashCode = hashCode * 59 + this.CompletionStatus.GetHashCode();
                if (this.SuccessStatus != null)
                    hashCode = hashCode * 59 + this.SuccessStatus.GetHashCode();
                if (this.HistoryLog != null)
                    hashCode = hashCode * 59 + this.HistoryLog.GetHashCode();
                if (this.TotalSecondsTracked != null)
                    hashCode = hashCode * 59 + this.TotalSecondsTracked.GetHashCode();
                if (this.LaunchTime != null)
                    hashCode = hashCode * 59 + this.LaunchTime.GetHashCode();
                if (this.ExitTime != null)
                    hashCode = hashCode * 59 + this.ExitTime.GetHashCode();
                if (this.LastRuntimeUpdate != null)
                    hashCode = hashCode * 59 + this.LastRuntimeUpdate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
