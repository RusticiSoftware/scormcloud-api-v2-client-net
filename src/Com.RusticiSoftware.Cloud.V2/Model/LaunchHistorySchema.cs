/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// LaunchHistorySchema
    /// </summary>
    [DataContract]
    public partial class LaunchHistorySchema :  IEquatable<LaunchHistorySchema>
    {
        /// <summary>
        /// Gets or Sets CompletionStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompletionStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum COMPLETED for "COMPLETED"
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED,
            
            /// <summary>
            /// Enum INCOMPLETE for "INCOMPLETE"
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE
        }

        /// <summary>
        /// Gets or Sets SuccessStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SuccessStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum PASSED for "PASSED"
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED,
            
            /// <summary>
            /// Enum FAILED for "FAILED"
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED
        }

        /// <summary>
        /// Gets or Sets CompletionStatus
        /// </summary>
        [DataMember(Name="completionStatus", EmitDefaultValue=false)]
        public CompletionStatusEnum? CompletionStatus { get; set; }
        /// <summary>
        /// Gets or Sets SuccessStatus
        /// </summary>
        [DataMember(Name="successStatus", EmitDefaultValue=false)]
        public SuccessStatusEnum? SuccessStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LaunchHistorySchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Instance">Instance.</param>
        /// <param name="Score">Score.</param>
        /// <param name="CompletionStatus">CompletionStatus (default to &quot;UNKNOWN&quot;).</param>
        /// <param name="SuccessStatus">SuccessStatus (default to &quot;UNKNOWN&quot;).</param>
        /// <param name="HistoryLog">HistoryLog.</param>
        /// <param name="TotalSecondsTracked">TotalSecondsTracked.</param>
        /// <param name="LaunchTime">The time of the launch in UTC.</param>
        /// <param name="ExitTime">The time of the exit in UTC.</param>
        /// <param name="LastRuntimeUpdate">The time of the last runtime update in UTC.</param>
        public LaunchHistorySchema(string Id = null, int? Instance = null, ScoreSchema Score = null, CompletionStatusEnum? CompletionStatus = null, SuccessStatusEnum? SuccessStatus = null, string HistoryLog = null, double? TotalSecondsTracked = null, DateTime? LaunchTime = null, DateTime? ExitTime = null, DateTime? LastRuntimeUpdate = null)
        {
            this.Id = Id;
            this.Instance = Instance;
            this.Score = Score;
            // use default value if no "CompletionStatus" provided
            if (CompletionStatus == null)
            {
                this.CompletionStatus = "UNKNOWN";
            }
            else
            {
                this.CompletionStatus = CompletionStatus;
            }
            // use default value if no "SuccessStatus" provided
            if (SuccessStatus == null)
            {
                this.SuccessStatus = "UNKNOWN";
            }
            else
            {
                this.SuccessStatus = SuccessStatus;
            }
            this.HistoryLog = HistoryLog;
            this.TotalSecondsTracked = TotalSecondsTracked;
            this.LaunchTime = LaunchTime;
            this.ExitTime = ExitTime;
            this.LastRuntimeUpdate = LastRuntimeUpdate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public int? Instance { get; set; }
        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }
        /// <summary>
        /// Gets or Sets HistoryLog
        /// </summary>
        [DataMember(Name="historyLog", EmitDefaultValue=false)]
        public string HistoryLog { get; set; }
        /// <summary>
        /// Gets or Sets TotalSecondsTracked
        /// </summary>
        [DataMember(Name="totalSecondsTracked", EmitDefaultValue=false)]
        public double? TotalSecondsTracked { get; set; }
        /// <summary>
        /// The time of the launch in UTC
        /// </summary>
        /// <value>The time of the launch in UTC</value>
        [DataMember(Name="launchTime", EmitDefaultValue=false)]
        public DateTime? LaunchTime { get; set; }
        /// <summary>
        /// The time of the exit in UTC
        /// </summary>
        /// <value>The time of the exit in UTC</value>
        [DataMember(Name="exitTime", EmitDefaultValue=false)]
        public DateTime? ExitTime { get; set; }
        /// <summary>
        /// The time of the last runtime update in UTC
        /// </summary>
        /// <value>The time of the last runtime update in UTC</value>
        [DataMember(Name="lastRuntimeUpdate", EmitDefaultValue=false)]
        public DateTime? LastRuntimeUpdate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LaunchHistorySchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  CompletionStatus: ").Append(CompletionStatus).Append("\n");
            sb.Append("  SuccessStatus: ").Append(SuccessStatus).Append("\n");
            sb.Append("  HistoryLog: ").Append(HistoryLog).Append("\n");
            sb.Append("  TotalSecondsTracked: ").Append(TotalSecondsTracked).Append("\n");
            sb.Append("  LaunchTime: ").Append(LaunchTime).Append("\n");
            sb.Append("  ExitTime: ").Append(ExitTime).Append("\n");
            sb.Append("  LastRuntimeUpdate: ").Append(LastRuntimeUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LaunchHistorySchema);
        }

        /// <summary>
        /// Returns true if LaunchHistorySchema instances are equal
        /// </summary>
        /// <param name="other">Instance of LaunchHistorySchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LaunchHistorySchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Instance == other.Instance ||
                    this.Instance != null &&
                    this.Instance.Equals(other.Instance)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                ) && 
                (
                    this.CompletionStatus == other.CompletionStatus ||
                    this.CompletionStatus != null &&
                    this.CompletionStatus.Equals(other.CompletionStatus)
                ) && 
                (
                    this.SuccessStatus == other.SuccessStatus ||
                    this.SuccessStatus != null &&
                    this.SuccessStatus.Equals(other.SuccessStatus)
                ) && 
                (
                    this.HistoryLog == other.HistoryLog ||
                    this.HistoryLog != null &&
                    this.HistoryLog.Equals(other.HistoryLog)
                ) && 
                (
                    this.TotalSecondsTracked == other.TotalSecondsTracked ||
                    this.TotalSecondsTracked != null &&
                    this.TotalSecondsTracked.Equals(other.TotalSecondsTracked)
                ) && 
                (
                    this.LaunchTime == other.LaunchTime ||
                    this.LaunchTime != null &&
                    this.LaunchTime.Equals(other.LaunchTime)
                ) && 
                (
                    this.ExitTime == other.ExitTime ||
                    this.ExitTime != null &&
                    this.ExitTime.Equals(other.ExitTime)
                ) && 
                (
                    this.LastRuntimeUpdate == other.LastRuntimeUpdate ||
                    this.LastRuntimeUpdate != null &&
                    this.LastRuntimeUpdate.Equals(other.LastRuntimeUpdate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Instance != null)
                    hash = hash * 59 + this.Instance.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                if (this.CompletionStatus != null)
                    hash = hash * 59 + this.CompletionStatus.GetHashCode();
                if (this.SuccessStatus != null)
                    hash = hash * 59 + this.SuccessStatus.GetHashCode();
                if (this.HistoryLog != null)
                    hash = hash * 59 + this.HistoryLog.GetHashCode();
                if (this.TotalSecondsTracked != null)
                    hash = hash * 59 + this.TotalSecondsTracked.GetHashCode();
                if (this.LaunchTime != null)
                    hash = hash * 59 + this.LaunchTime.GetHashCode();
                if (this.ExitTime != null)
                    hash = hash * 59 + this.ExitTime.GetHashCode();
                if (this.LastRuntimeUpdate != null)
                    hash = hash * 59 + this.LastRuntimeUpdate.GetHashCode();
                return hash;
            }
        }
    }

}
