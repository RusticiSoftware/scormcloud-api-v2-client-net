/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// Metadata used to set various properties of a media file course 
    /// </summary>
    [DataContract]
    public partial class MediaFileMetadataSchema :  IEquatable<MediaFileMetadataSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaFileMetadataSchema" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="contentLanguage">contentLanguage.</param>
        /// <param name="estimatedDuration">estimatedDuration.</param>
        public MediaFileMetadataSchema(string title = default(string), string description = default(string), string contentLanguage = default(string), int? estimatedDuration = default(int?))
        {
            this.Title = title;
            this.Description = description;
            this.ContentLanguage = contentLanguage;
            this.EstimatedDuration = estimatedDuration;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ContentLanguage
        /// </summary>
        [DataMember(Name="contentLanguage", EmitDefaultValue=false)]
        public string ContentLanguage { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedDuration
        /// </summary>
        [DataMember(Name="estimatedDuration", EmitDefaultValue=false)]
        public int? EstimatedDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaFileMetadataSchema {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContentLanguage: ").Append(ContentLanguage).Append("\n");
            sb.Append("  EstimatedDuration: ").Append(EstimatedDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaFileMetadataSchema);
        }

        /// <summary>
        /// Returns true if MediaFileMetadataSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaFileMetadataSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaFileMetadataSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ContentLanguage == input.ContentLanguage ||
                    (this.ContentLanguage != null &&
                    this.ContentLanguage.Equals(input.ContentLanguage))
                ) && 
                (
                    this.EstimatedDuration == input.EstimatedDuration ||
                    (this.EstimatedDuration != null &&
                    this.EstimatedDuration.Equals(input.EstimatedDuration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ContentLanguage != null)
                    hashCode = hashCode * 59 + this.ContentLanguage.GetHashCode();
                if (this.EstimatedDuration != null)
                    hashCode = hashCode * 59 + this.EstimatedDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
