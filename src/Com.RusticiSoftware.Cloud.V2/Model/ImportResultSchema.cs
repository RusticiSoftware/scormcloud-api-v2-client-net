/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ImportResultSchema
    /// </summary>
    [DataContract]
    public partial class ImportResultSchema :  IEquatable<ImportResultSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportResultSchema" /> class.
        /// </summary>
        /// <param name="WebPathToCourse">web path to this course.</param>
        /// <param name="ParserWarnings">ParserWarnings.</param>
        /// <param name="CourseLanguages">CourseLanguages.</param>
        /// <param name="Course">Course.</param>
        public ImportResultSchema(string WebPathToCourse = default(string), List<string> ParserWarnings = default(List<string>), List<string> CourseLanguages = default(List<string>), CourseSchema Course = default(CourseSchema))
        {
            this.WebPathToCourse = WebPathToCourse;
            this.ParserWarnings = ParserWarnings;
            this.CourseLanguages = CourseLanguages;
            this.Course = Course;
        }
        
        /// <summary>
        /// web path to this course
        /// </summary>
        /// <value>web path to this course</value>
        [DataMember(Name="webPathToCourse", EmitDefaultValue=false)]
        public string WebPathToCourse { get; set; }
        /// <summary>
        /// Gets or Sets ParserWarnings
        /// </summary>
        [DataMember(Name="parserWarnings", EmitDefaultValue=false)]
        public List<string> ParserWarnings { get; set; }
        /// <summary>
        /// Gets or Sets CourseLanguages
        /// </summary>
        [DataMember(Name="courseLanguages", EmitDefaultValue=false)]
        public List<string> CourseLanguages { get; set; }
        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public CourseSchema Course { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportResultSchema {\n");
            sb.Append("  WebPathToCourse: ").Append(WebPathToCourse).Append("\n");
            sb.Append("  ParserWarnings: ").Append(ParserWarnings).Append("\n");
            sb.Append("  CourseLanguages: ").Append(CourseLanguages).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportResultSchema);
        }

        /// <summary>
        /// Returns true if ImportResultSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportResultSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportResultSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WebPathToCourse == other.WebPathToCourse ||
                    this.WebPathToCourse != null &&
                    this.WebPathToCourse.Equals(other.WebPathToCourse)
                ) && 
                (
                    this.ParserWarnings == other.ParserWarnings ||
                    this.ParserWarnings != null &&
                    this.ParserWarnings.SequenceEqual(other.ParserWarnings)
                ) && 
                (
                    this.CourseLanguages == other.CourseLanguages ||
                    this.CourseLanguages != null &&
                    this.CourseLanguages.SequenceEqual(other.CourseLanguages)
                ) && 
                (
                    this.Course == other.Course ||
                    this.Course != null &&
                    this.Course.Equals(other.Course)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WebPathToCourse != null)
                    hash = hash * 59 + this.WebPathToCourse.GetHashCode();
                if (this.ParserWarnings != null)
                    hash = hash * 59 + this.ParserWarnings.GetHashCode();
                if (this.CourseLanguages != null)
                    hash = hash * 59 + this.CourseLanguages.GetHashCode();
                if (this.Course != null)
                    hash = hash * 59 + this.Course.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
