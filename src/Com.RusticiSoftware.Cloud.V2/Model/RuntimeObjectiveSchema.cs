/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RuntimeObjectiveSchema
    /// </summary>
    [DataContract]
    public partial class RuntimeObjectiveSchema :  IEquatable<RuntimeObjectiveSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines RuntimeObjectiveSuccessStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuntimeObjectiveSuccessStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 2,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3
        }

        /// <summary>
        /// Gets or Sets RuntimeObjectiveSuccessStatus
        /// </summary>
        [DataMember(Name="runtimeObjectiveSuccessStatus", EmitDefaultValue=false)]
        public RuntimeObjectiveSuccessStatusEnum? RuntimeObjectiveSuccessStatus { get; set; }
        /// <summary>
        /// Defines RuntimeObjectiveCompletionStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuntimeObjectiveCompletionStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,
            
            /// <summary>
            /// Enum INCOMPLETE for value: INCOMPLETE
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE = 3,
            
            /// <summary>
            /// Enum NOTATTEMPTED for value: NOT_ATTEMPTED
            /// </summary>
            [EnumMember(Value = "NOT_ATTEMPTED")]
            NOTATTEMPTED = 4,
            
            /// <summary>
            /// Enum BROWSED for value: BROWSED
            /// </summary>
            [EnumMember(Value = "BROWSED")]
            BROWSED = 5
        }

        /// <summary>
        /// Gets or Sets RuntimeObjectiveCompletionStatus
        /// </summary>
        [DataMember(Name="runtimeObjectiveCompletionStatus", EmitDefaultValue=false)]
        public RuntimeObjectiveCompletionStatusEnum? RuntimeObjectiveCompletionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeObjectiveSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="scoreScaled">scoreScaled.</param>
        /// <param name="scoreMin">scoreMin.</param>
        /// <param name="scoreMax">scoreMax.</param>
        /// <param name="scoreRaw">scoreRaw.</param>
        /// <param name="runtimeObjectiveSuccessStatus">runtimeObjectiveSuccessStatus (default to RuntimeObjectiveSuccessStatusEnum.UNKNOWN).</param>
        /// <param name="runtimeObjectiveCompletionStatus">runtimeObjectiveCompletionStatus (default to RuntimeObjectiveCompletionStatusEnum.UNKNOWN).</param>
        /// <param name="progressMeasure">progressMeasure.</param>
        /// <param name="description">description.</param>
        public RuntimeObjectiveSchema(string id = default(string), string scoreScaled = default(string), string scoreMin = default(string), string scoreMax = default(string), string scoreRaw = default(string), RuntimeObjectiveSuccessStatusEnum? runtimeObjectiveSuccessStatus = RuntimeObjectiveSuccessStatusEnum.UNKNOWN, RuntimeObjectiveCompletionStatusEnum? runtimeObjectiveCompletionStatus = RuntimeObjectiveCompletionStatusEnum.UNKNOWN, string progressMeasure = default(string), string description = default(string))
        {
            this.Id = id;
            this.ScoreScaled = scoreScaled;
            this.ScoreMin = scoreMin;
            this.ScoreMax = scoreMax;
            this.ScoreRaw = scoreRaw;
            // use default value if no "runtimeObjectiveSuccessStatus" provided
            if (runtimeObjectiveSuccessStatus == null)
            {
                this.RuntimeObjectiveSuccessStatus = RuntimeObjectiveSuccessStatusEnum.UNKNOWN;
            }
            else
            {
                this.RuntimeObjectiveSuccessStatus = runtimeObjectiveSuccessStatus;
            }
            // use default value if no "runtimeObjectiveCompletionStatus" provided
            if (runtimeObjectiveCompletionStatus == null)
            {
                this.RuntimeObjectiveCompletionStatus = RuntimeObjectiveCompletionStatusEnum.UNKNOWN;
            }
            else
            {
                this.RuntimeObjectiveCompletionStatus = runtimeObjectiveCompletionStatus;
            }
            this.ProgressMeasure = progressMeasure;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ScoreScaled
        /// </summary>
        [DataMember(Name="scoreScaled", EmitDefaultValue=false)]
        public string ScoreScaled { get; set; }

        /// <summary>
        /// Gets or Sets ScoreMin
        /// </summary>
        [DataMember(Name="scoreMin", EmitDefaultValue=false)]
        public string ScoreMin { get; set; }

        /// <summary>
        /// Gets or Sets ScoreMax
        /// </summary>
        [DataMember(Name="scoreMax", EmitDefaultValue=false)]
        public string ScoreMax { get; set; }

        /// <summary>
        /// Gets or Sets ScoreRaw
        /// </summary>
        [DataMember(Name="scoreRaw", EmitDefaultValue=false)]
        public string ScoreRaw { get; set; }



        /// <summary>
        /// Gets or Sets ProgressMeasure
        /// </summary>
        [DataMember(Name="progressMeasure", EmitDefaultValue=false)]
        public string ProgressMeasure { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeObjectiveSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScoreScaled: ").Append(ScoreScaled).Append("\n");
            sb.Append("  ScoreMin: ").Append(ScoreMin).Append("\n");
            sb.Append("  ScoreMax: ").Append(ScoreMax).Append("\n");
            sb.Append("  ScoreRaw: ").Append(ScoreRaw).Append("\n");
            sb.Append("  RuntimeObjectiveSuccessStatus: ").Append(RuntimeObjectiveSuccessStatus).Append("\n");
            sb.Append("  RuntimeObjectiveCompletionStatus: ").Append(RuntimeObjectiveCompletionStatus).Append("\n");
            sb.Append("  ProgressMeasure: ").Append(ProgressMeasure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeObjectiveSchema);
        }

        /// <summary>
        /// Returns true if RuntimeObjectiveSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeObjectiveSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeObjectiveSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ScoreScaled == input.ScoreScaled ||
                    (this.ScoreScaled != null &&
                    this.ScoreScaled.Equals(input.ScoreScaled))
                ) && 
                (
                    this.ScoreMin == input.ScoreMin ||
                    (this.ScoreMin != null &&
                    this.ScoreMin.Equals(input.ScoreMin))
                ) && 
                (
                    this.ScoreMax == input.ScoreMax ||
                    (this.ScoreMax != null &&
                    this.ScoreMax.Equals(input.ScoreMax))
                ) && 
                (
                    this.ScoreRaw == input.ScoreRaw ||
                    (this.ScoreRaw != null &&
                    this.ScoreRaw.Equals(input.ScoreRaw))
                ) && 
                (
                    this.RuntimeObjectiveSuccessStatus == input.RuntimeObjectiveSuccessStatus ||
                    (this.RuntimeObjectiveSuccessStatus != null &&
                    this.RuntimeObjectiveSuccessStatus.Equals(input.RuntimeObjectiveSuccessStatus))
                ) && 
                (
                    this.RuntimeObjectiveCompletionStatus == input.RuntimeObjectiveCompletionStatus ||
                    (this.RuntimeObjectiveCompletionStatus != null &&
                    this.RuntimeObjectiveCompletionStatus.Equals(input.RuntimeObjectiveCompletionStatus))
                ) && 
                (
                    this.ProgressMeasure == input.ProgressMeasure ||
                    (this.ProgressMeasure != null &&
                    this.ProgressMeasure.Equals(input.ProgressMeasure))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ScoreScaled != null)
                    hashCode = hashCode * 59 + this.ScoreScaled.GetHashCode();
                if (this.ScoreMin != null)
                    hashCode = hashCode * 59 + this.ScoreMin.GetHashCode();
                if (this.ScoreMax != null)
                    hashCode = hashCode * 59 + this.ScoreMax.GetHashCode();
                if (this.ScoreRaw != null)
                    hashCode = hashCode * 59 + this.ScoreRaw.GetHashCode();
                if (this.RuntimeObjectiveSuccessStatus != null)
                    hashCode = hashCode * 59 + this.RuntimeObjectiveSuccessStatus.GetHashCode();
                if (this.RuntimeObjectiveCompletionStatus != null)
                    hashCode = hashCode * 59 + this.RuntimeObjectiveCompletionStatus.GetHashCode();
                if (this.ProgressMeasure != null)
                    hashCode = hashCode * 59 + this.ProgressMeasure.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
