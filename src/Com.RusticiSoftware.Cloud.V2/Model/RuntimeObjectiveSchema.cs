/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RuntimeObjectiveSchema
    /// </summary>
    [DataContract]
    public partial class RuntimeObjectiveSchema :  IEquatable<RuntimeObjectiveSchema>
    {
        /// <summary>
        /// Gets or Sets RuntimeObjectiveSuccessStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuntimeObjectiveSuccessStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum PASSED for "PASSED"
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED,
            
            /// <summary>
            /// Enum FAILED for "FAILED"
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED
        }

        /// <summary>
        /// Gets or Sets RuntimeObjectiveCompletionStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuntimeObjectiveCompletionStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum COMPLETED for "COMPLETED"
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED,
            
            /// <summary>
            /// Enum INCOMPLETE for "INCOMPLETE"
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE,
            
            /// <summary>
            /// Enum NOTATTEMPTED for "NOT_ATTEMPTED"
            /// </summary>
            [EnumMember(Value = "NOT_ATTEMPTED")]
            NOTATTEMPTED,
            
            /// <summary>
            /// Enum BROWSED for "BROWSED"
            /// </summary>
            [EnumMember(Value = "BROWSED")]
            BROWSED
        }

        /// <summary>
        /// Gets or Sets RuntimeObjectiveSuccessStatus
        /// </summary>
        [DataMember(Name="runtimeObjectiveSuccessStatus", EmitDefaultValue=false)]
        public RuntimeObjectiveSuccessStatusEnum? RuntimeObjectiveSuccessStatus { get; set; }
        /// <summary>
        /// Gets or Sets RuntimeObjectiveCompletionStatus
        /// </summary>
        [DataMember(Name="runtimeObjectiveCompletionStatus", EmitDefaultValue=false)]
        public RuntimeObjectiveCompletionStatusEnum? RuntimeObjectiveCompletionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeObjectiveSchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ScoreScaled">ScoreScaled.</param>
        /// <param name="ScoreMin">ScoreMin.</param>
        /// <param name="ScoreMax">ScoreMax.</param>
        /// <param name="ScoreRaw">ScoreRaw.</param>
        /// <param name="RuntimeObjectiveSuccessStatus">RuntimeObjectiveSuccessStatus (default to &quot;UNKNOWN&quot;).</param>
        /// <param name="RuntimeObjectiveCompletionStatus">RuntimeObjectiveCompletionStatus (default to &quot;UNKNOWN&quot;).</param>
        /// <param name="ProgressMeasure">ProgressMeasure.</param>
        /// <param name="Description">Description.</param>
        public RuntimeObjectiveSchema(string Id = null, string ScoreScaled = null, string ScoreMin = null, string ScoreMax = null, string ScoreRaw = null, RuntimeObjectiveSuccessStatusEnum? RuntimeObjectiveSuccessStatus = null, RuntimeObjectiveCompletionStatusEnum? RuntimeObjectiveCompletionStatus = null, string ProgressMeasure = null, string Description = null)
        {
            this.Id = Id;
            this.ScoreScaled = ScoreScaled;
            this.ScoreMin = ScoreMin;
            this.ScoreMax = ScoreMax;
            this.ScoreRaw = ScoreRaw;
            // use default value if no "RuntimeObjectiveSuccessStatus" provided
            if (RuntimeObjectiveSuccessStatus == null)
            {
                this.RuntimeObjectiveSuccessStatus = "UNKNOWN";
            }
            else
            {
                this.RuntimeObjectiveSuccessStatus = RuntimeObjectiveSuccessStatus;
            }
            // use default value if no "RuntimeObjectiveCompletionStatus" provided
            if (RuntimeObjectiveCompletionStatus == null)
            {
                this.RuntimeObjectiveCompletionStatus = "UNKNOWN";
            }
            else
            {
                this.RuntimeObjectiveCompletionStatus = RuntimeObjectiveCompletionStatus;
            }
            this.ProgressMeasure = ProgressMeasure;
            this.Description = Description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets ScoreScaled
        /// </summary>
        [DataMember(Name="scoreScaled", EmitDefaultValue=false)]
        public string ScoreScaled { get; set; }
        /// <summary>
        /// Gets or Sets ScoreMin
        /// </summary>
        [DataMember(Name="scoreMin", EmitDefaultValue=false)]
        public string ScoreMin { get; set; }
        /// <summary>
        /// Gets or Sets ScoreMax
        /// </summary>
        [DataMember(Name="scoreMax", EmitDefaultValue=false)]
        public string ScoreMax { get; set; }
        /// <summary>
        /// Gets or Sets ScoreRaw
        /// </summary>
        [DataMember(Name="scoreRaw", EmitDefaultValue=false)]
        public string ScoreRaw { get; set; }
        /// <summary>
        /// Gets or Sets ProgressMeasure
        /// </summary>
        [DataMember(Name="progressMeasure", EmitDefaultValue=false)]
        public string ProgressMeasure { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeObjectiveSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScoreScaled: ").Append(ScoreScaled).Append("\n");
            sb.Append("  ScoreMin: ").Append(ScoreMin).Append("\n");
            sb.Append("  ScoreMax: ").Append(ScoreMax).Append("\n");
            sb.Append("  ScoreRaw: ").Append(ScoreRaw).Append("\n");
            sb.Append("  RuntimeObjectiveSuccessStatus: ").Append(RuntimeObjectiveSuccessStatus).Append("\n");
            sb.Append("  RuntimeObjectiveCompletionStatus: ").Append(RuntimeObjectiveCompletionStatus).Append("\n");
            sb.Append("  ProgressMeasure: ").Append(ProgressMeasure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuntimeObjectiveSchema);
        }

        /// <summary>
        /// Returns true if RuntimeObjectiveSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of RuntimeObjectiveSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeObjectiveSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ScoreScaled == other.ScoreScaled ||
                    this.ScoreScaled != null &&
                    this.ScoreScaled.Equals(other.ScoreScaled)
                ) && 
                (
                    this.ScoreMin == other.ScoreMin ||
                    this.ScoreMin != null &&
                    this.ScoreMin.Equals(other.ScoreMin)
                ) && 
                (
                    this.ScoreMax == other.ScoreMax ||
                    this.ScoreMax != null &&
                    this.ScoreMax.Equals(other.ScoreMax)
                ) && 
                (
                    this.ScoreRaw == other.ScoreRaw ||
                    this.ScoreRaw != null &&
                    this.ScoreRaw.Equals(other.ScoreRaw)
                ) && 
                (
                    this.RuntimeObjectiveSuccessStatus == other.RuntimeObjectiveSuccessStatus ||
                    this.RuntimeObjectiveSuccessStatus != null &&
                    this.RuntimeObjectiveSuccessStatus.Equals(other.RuntimeObjectiveSuccessStatus)
                ) && 
                (
                    this.RuntimeObjectiveCompletionStatus == other.RuntimeObjectiveCompletionStatus ||
                    this.RuntimeObjectiveCompletionStatus != null &&
                    this.RuntimeObjectiveCompletionStatus.Equals(other.RuntimeObjectiveCompletionStatus)
                ) && 
                (
                    this.ProgressMeasure == other.ProgressMeasure ||
                    this.ProgressMeasure != null &&
                    this.ProgressMeasure.Equals(other.ProgressMeasure)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ScoreScaled != null)
                    hash = hash * 59 + this.ScoreScaled.GetHashCode();
                if (this.ScoreMin != null)
                    hash = hash * 59 + this.ScoreMin.GetHashCode();
                if (this.ScoreMax != null)
                    hash = hash * 59 + this.ScoreMax.GetHashCode();
                if (this.ScoreRaw != null)
                    hash = hash * 59 + this.ScoreRaw.GetHashCode();
                if (this.RuntimeObjectiveSuccessStatus != null)
                    hash = hash * 59 + this.RuntimeObjectiveSuccessStatus.GetHashCode();
                if (this.RuntimeObjectiveCompletionStatus != null)
                    hash = hash * 59 + this.RuntimeObjectiveCompletionStatus.GetHashCode();
                if (this.ProgressMeasure != null)
                    hash = hash * 59 + this.ProgressMeasure.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }
    }

}
