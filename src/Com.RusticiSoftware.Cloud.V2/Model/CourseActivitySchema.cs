/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CourseActivitySchema
    /// </summary>
    [DataContract]
    public partial class CourseActivitySchema :  IEquatable<CourseActivitySchema>
    {
        /// <summary>
        /// The type of activity this is
        /// </summary>
        /// <value>The type of activity this is</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivityTypeEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum AGGREGATION for "AGGREGATION"
            /// </summary>
            [EnumMember(Value = "AGGREGATION")]
            AGGREGATION,
            
            /// <summary>
            /// Enum SCO for "SCO"
            /// </summary>
            [EnumMember(Value = "SCO")]
            SCO,
            
            /// <summary>
            /// Enum ASSET for "ASSET"
            /// </summary>
            [EnumMember(Value = "ASSET")]
            ASSET,
            
            /// <summary>
            /// Enum OBJECTIVE for "OBJECTIVE"
            /// </summary>
            [EnumMember(Value = "OBJECTIVE")]
            OBJECTIVE
        }

        /// <summary>
        /// The type of activity this is
        /// </summary>
        /// <value>The type of activity this is</value>
        [DataMember(Name="activityType", EmitDefaultValue=false)]
        public ActivityTypeEnum? ActivityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CourseActivitySchema" /> class.
        /// </summary>
        /// <param name="ExternalIdentifier">An arbitrary identifier that the external LMS system can associate with this LearningObject to track it as it isreused across courses .</param>
        /// <param name="ItemIdentifier">The string which identifies this activity in the context of its course.</param>
        /// <param name="ResourceIdentifier">The string which identifies this activity&#39;s resource in a course&#39;s manifest.</param>
        /// <param name="ActivityType">The type of activity this is.</param>
        /// <param name="Href">The web path used to launch this activity.</param>
        /// <param name="ScaledPassingScore">The score required of a learner to pass this activity.</param>
        /// <param name="Title">The title of the activity.</param>
        /// <param name="Children">Children.</param>
        public CourseActivitySchema(string ExternalIdentifier = null, string ItemIdentifier = null, string ResourceIdentifier = null, ActivityTypeEnum? ActivityType = null, string Href = null, string ScaledPassingScore = null, string Title = null, List<CourseActivitySchema> Children = null)
        {
            this.ExternalIdentifier = ExternalIdentifier;
            this.ItemIdentifier = ItemIdentifier;
            this.ResourceIdentifier = ResourceIdentifier;
            this.ActivityType = ActivityType;
            this.Href = Href;
            this.ScaledPassingScore = ScaledPassingScore;
            this.Title = Title;
            this.Children = Children;
        }
        
        /// <summary>
        /// An arbitrary identifier that the external LMS system can associate with this LearningObject to track it as it isreused across courses 
        /// </summary>
        /// <value>An arbitrary identifier that the external LMS system can associate with this LearningObject to track it as it isreused across courses </value>
        [DataMember(Name="externalIdentifier", EmitDefaultValue=false)]
        public string ExternalIdentifier { get; set; }
        /// <summary>
        /// The string which identifies this activity in the context of its course
        /// </summary>
        /// <value>The string which identifies this activity in the context of its course</value>
        [DataMember(Name="itemIdentifier", EmitDefaultValue=false)]
        public string ItemIdentifier { get; set; }
        /// <summary>
        /// The string which identifies this activity&#39;s resource in a course&#39;s manifest
        /// </summary>
        /// <value>The string which identifies this activity&#39;s resource in a course&#39;s manifest</value>
        [DataMember(Name="resourceIdentifier", EmitDefaultValue=false)]
        public string ResourceIdentifier { get; set; }
        /// <summary>
        /// The web path used to launch this activity
        /// </summary>
        /// <value>The web path used to launch this activity</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// The score required of a learner to pass this activity
        /// </summary>
        /// <value>The score required of a learner to pass this activity</value>
        [DataMember(Name="scaledPassingScore", EmitDefaultValue=false)]
        public string ScaledPassingScore { get; set; }
        /// <summary>
        /// The title of the activity
        /// </summary>
        /// <value>The title of the activity</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<CourseActivitySchema> Children { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CourseActivitySchema {\n");
            sb.Append("  ExternalIdentifier: ").Append(ExternalIdentifier).Append("\n");
            sb.Append("  ItemIdentifier: ").Append(ItemIdentifier).Append("\n");
            sb.Append("  ResourceIdentifier: ").Append(ResourceIdentifier).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  ScaledPassingScore: ").Append(ScaledPassingScore).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CourseActivitySchema);
        }

        /// <summary>
        /// Returns true if CourseActivitySchema instances are equal
        /// </summary>
        /// <param name="other">Instance of CourseActivitySchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CourseActivitySchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExternalIdentifier == other.ExternalIdentifier ||
                    this.ExternalIdentifier != null &&
                    this.ExternalIdentifier.Equals(other.ExternalIdentifier)
                ) && 
                (
                    this.ItemIdentifier == other.ItemIdentifier ||
                    this.ItemIdentifier != null &&
                    this.ItemIdentifier.Equals(other.ItemIdentifier)
                ) && 
                (
                    this.ResourceIdentifier == other.ResourceIdentifier ||
                    this.ResourceIdentifier != null &&
                    this.ResourceIdentifier.Equals(other.ResourceIdentifier)
                ) && 
                (
                    this.ActivityType == other.ActivityType ||
                    this.ActivityType != null &&
                    this.ActivityType.Equals(other.ActivityType)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                ) && 
                (
                    this.ScaledPassingScore == other.ScaledPassingScore ||
                    this.ScaledPassingScore != null &&
                    this.ScaledPassingScore.Equals(other.ScaledPassingScore)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Children == other.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(other.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExternalIdentifier != null)
                    hash = hash * 59 + this.ExternalIdentifier.GetHashCode();
                if (this.ItemIdentifier != null)
                    hash = hash * 59 + this.ItemIdentifier.GetHashCode();
                if (this.ResourceIdentifier != null)
                    hash = hash * 59 + this.ResourceIdentifier.GetHashCode();
                if (this.ActivityType != null)
                    hash = hash * 59 + this.ActivityType.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                if (this.ScaledPassingScore != null)
                    hash = hash * 59 + this.ScaledPassingScore.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Children != null)
                    hash = hash * 59 + this.Children.GetHashCode();
                return hash;
            }
        }
    }

}
