/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CreatePublicInvitationSchema
    /// </summary>
    [DataContract]
    public partial class CreatePublicInvitationSchema :  IEquatable<CreatePublicInvitationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePublicInvitationSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePublicInvitationSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePublicInvitationSchema" /> class.
        /// </summary>
        /// <param name="courseId">The id of the course for which to create an invitation. (required).</param>
        /// <param name="creatingUserEmail">The email of the user who is creating the invitation. (required).</param>
        /// <param name="registrationCap">Integer value that limits the amount of registrations a public invitation can generate. (default to 0).</param>
        /// <param name="postBack">Specifies a URL for which to post activity and status data in real time as the course is completed.</param>
        /// <param name="expirationDate">The date this invitation will expire and can no longer be launched (formatted yyyyMMddHHmmss in UTC time)..</param>
        /// <param name="tags">Optional tags to be applied to this invitation..</param>
        public CreatePublicInvitationSchema(string courseId = default(string), string creatingUserEmail = default(string), int? registrationCap = 0, PostBackSchema postBack = default(PostBackSchema), DateTime? expirationDate = default(DateTime?), List<string> tags = default(List<string>))
        {
            // to ensure "courseId" is required (not null)
            if (courseId == null)
            {
                throw new InvalidDataException("courseId is a required property for CreatePublicInvitationSchema and cannot be null");
            }
            else
            {
                this.CourseId = courseId;
            }
            // to ensure "creatingUserEmail" is required (not null)
            if (creatingUserEmail == null)
            {
                throw new InvalidDataException("creatingUserEmail is a required property for CreatePublicInvitationSchema and cannot be null");
            }
            else
            {
                this.CreatingUserEmail = creatingUserEmail;
            }
            // use default value if no "registrationCap" provided
            if (registrationCap == null)
            {
                this.RegistrationCap = 0;
            }
            else
            {
                this.RegistrationCap = registrationCap;
            }
            this.PostBack = postBack;
            this.ExpirationDate = expirationDate;
            this.Tags = tags;
        }
        
        /// <summary>
        /// The id of the course for which to create an invitation.
        /// </summary>
        /// <value>The id of the course for which to create an invitation.</value>
        [DataMember(Name="courseId", EmitDefaultValue=false)]
        public string CourseId { get; set; }

        /// <summary>
        /// The email of the user who is creating the invitation.
        /// </summary>
        /// <value>The email of the user who is creating the invitation.</value>
        [DataMember(Name="creatingUserEmail", EmitDefaultValue=false)]
        public string CreatingUserEmail { get; set; }

        /// <summary>
        /// Integer value that limits the amount of registrations a public invitation can generate.
        /// </summary>
        /// <value>Integer value that limits the amount of registrations a public invitation can generate.</value>
        [DataMember(Name="registrationCap", EmitDefaultValue=false)]
        public int? RegistrationCap { get; set; }

        /// <summary>
        /// Specifies a URL for which to post activity and status data in real time as the course is completed
        /// </summary>
        /// <value>Specifies a URL for which to post activity and status data in real time as the course is completed</value>
        [DataMember(Name="postBack", EmitDefaultValue=false)]
        public PostBackSchema PostBack { get; set; }

        /// <summary>
        /// The date this invitation will expire and can no longer be launched (formatted yyyyMMddHHmmss in UTC time).
        /// </summary>
        /// <value>The date this invitation will expire and can no longer be launched (formatted yyyyMMddHHmmss in UTC time).</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Optional tags to be applied to this invitation.
        /// </summary>
        /// <value>Optional tags to be applied to this invitation.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePublicInvitationSchema {\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("  CreatingUserEmail: ").Append(CreatingUserEmail).Append("\n");
            sb.Append("  RegistrationCap: ").Append(RegistrationCap).Append("\n");
            sb.Append("  PostBack: ").Append(PostBack).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePublicInvitationSchema);
        }

        /// <summary>
        /// Returns true if CreatePublicInvitationSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePublicInvitationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePublicInvitationSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CourseId == input.CourseId ||
                    (this.CourseId != null &&
                    this.CourseId.Equals(input.CourseId))
                ) && 
                (
                    this.CreatingUserEmail == input.CreatingUserEmail ||
                    (this.CreatingUserEmail != null &&
                    this.CreatingUserEmail.Equals(input.CreatingUserEmail))
                ) && 
                (
                    this.RegistrationCap == input.RegistrationCap ||
                    (this.RegistrationCap != null &&
                    this.RegistrationCap.Equals(input.RegistrationCap))
                ) && 
                (
                    this.PostBack == input.PostBack ||
                    (this.PostBack != null &&
                    this.PostBack.Equals(input.PostBack))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CourseId != null)
                    hashCode = hashCode * 59 + this.CourseId.GetHashCode();
                if (this.CreatingUserEmail != null)
                    hashCode = hashCode * 59 + this.CreatingUserEmail.GetHashCode();
                if (this.RegistrationCap != null)
                    hashCode = hashCode * 59 + this.RegistrationCap.GetHashCode();
                if (this.PostBack != null)
                    hashCode = hashCode * 59 + this.PostBack.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
