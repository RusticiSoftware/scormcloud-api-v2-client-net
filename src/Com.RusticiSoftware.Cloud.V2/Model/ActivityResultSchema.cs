/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ActivityResultSchema
    /// </summary>
    [DataContract]
    public partial class ActivityResultSchema :  IEquatable<ActivityResultSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines ActivityCompletion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivityCompletionEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,
            
            /// <summary>
            /// Enum INCOMPLETE for value: INCOMPLETE
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE = 3
        }

        /// <summary>
        /// Gets or Sets ActivityCompletion
        /// </summary>
        [DataMember(Name="activityCompletion", EmitDefaultValue=false)]
        public ActivityCompletionEnum? ActivityCompletion { get; set; }
        /// <summary>
        /// Defines ActivitySuccess
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivitySuccessEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 2,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3
        }

        /// <summary>
        /// Gets or Sets ActivitySuccess
        /// </summary>
        [DataMember(Name="activitySuccess", EmitDefaultValue=false)]
        public ActivitySuccessEnum? ActivitySuccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityResultSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="attempts">attempts.</param>
        /// <param name="activityCompletion">activityCompletion.</param>
        /// <param name="activitySuccess">activitySuccess.</param>
        /// <param name="score">score.</param>
        /// <param name="timeTracked">timeTracked.</param>
        /// <param name="completionAmount">completionAmount.</param>
        /// <param name="suspended">suspended.</param>
        /// <param name="children">children.</param>
        /// <param name="objectives">objectives.</param>
        /// <param name="staticProperties">staticProperties.</param>
        /// <param name="runtime">runtime.</param>
        public ActivityResultSchema(string id = default(string), string title = default(string), int? attempts = default(int?), ActivityCompletionEnum? activityCompletion = default(ActivityCompletionEnum?), ActivitySuccessEnum? activitySuccess = default(ActivitySuccessEnum?), ScoreSchema score = default(ScoreSchema), string timeTracked = default(string), CompletionAmountSchema completionAmount = default(CompletionAmountSchema), bool? suspended = default(bool?), List<ActivityResultSchema> children = default(List<ActivityResultSchema>), List<ObjectiveSchema> objectives = default(List<ObjectiveSchema>), StaticPropertiesSchema staticProperties = default(StaticPropertiesSchema), RuntimeSchema runtime = default(RuntimeSchema))
        {
            this.Id = id;
            this.Title = title;
            this.Attempts = attempts;
            this.ActivityCompletion = activityCompletion;
            this.ActivitySuccess = activitySuccess;
            this.Score = score;
            this.TimeTracked = timeTracked;
            this.CompletionAmount = completionAmount;
            this.Suspended = suspended;
            this.Children = children;
            this.Objectives = objectives;
            this.StaticProperties = staticProperties;
            this.Runtime = runtime;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Attempts
        /// </summary>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int? Attempts { get; set; }



        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }

        /// <summary>
        /// Gets or Sets TimeTracked
        /// </summary>
        [DataMember(Name="timeTracked", EmitDefaultValue=false)]
        public string TimeTracked { get; set; }

        /// <summary>
        /// Gets or Sets CompletionAmount
        /// </summary>
        [DataMember(Name="completionAmount", EmitDefaultValue=false)]
        public CompletionAmountSchema CompletionAmount { get; set; }

        /// <summary>
        /// Gets or Sets Suspended
        /// </summary>
        [DataMember(Name="suspended", EmitDefaultValue=false)]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=false)]
        public List<ActivityResultSchema> Children { get; set; }

        /// <summary>
        /// Gets or Sets Objectives
        /// </summary>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public List<ObjectiveSchema> Objectives { get; set; }

        /// <summary>
        /// Gets or Sets StaticProperties
        /// </summary>
        [DataMember(Name="staticProperties", EmitDefaultValue=false)]
        public StaticPropertiesSchema StaticProperties { get; set; }

        /// <summary>
        /// Gets or Sets Runtime
        /// </summary>
        [DataMember(Name="runtime", EmitDefaultValue=false)]
        public RuntimeSchema Runtime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityResultSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  ActivityCompletion: ").Append(ActivityCompletion).Append("\n");
            sb.Append("  ActivitySuccess: ").Append(ActivitySuccess).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TimeTracked: ").Append(TimeTracked).Append("\n");
            sb.Append("  CompletionAmount: ").Append(CompletionAmount).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  StaticProperties: ").Append(StaticProperties).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityResultSchema);
        }

        /// <summary>
        /// Returns true if ActivityResultSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityResultSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityResultSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Attempts == input.Attempts ||
                    (this.Attempts != null &&
                    this.Attempts.Equals(input.Attempts))
                ) && 
                (
                    this.ActivityCompletion == input.ActivityCompletion ||
                    (this.ActivityCompletion != null &&
                    this.ActivityCompletion.Equals(input.ActivityCompletion))
                ) && 
                (
                    this.ActivitySuccess == input.ActivitySuccess ||
                    (this.ActivitySuccess != null &&
                    this.ActivitySuccess.Equals(input.ActivitySuccess))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.TimeTracked == input.TimeTracked ||
                    (this.TimeTracked != null &&
                    this.TimeTracked.Equals(input.TimeTracked))
                ) && 
                (
                    this.CompletionAmount == input.CompletionAmount ||
                    (this.CompletionAmount != null &&
                    this.CompletionAmount.Equals(input.CompletionAmount))
                ) && 
                (
                    this.Suspended == input.Suspended ||
                    (this.Suspended != null &&
                    this.Suspended.Equals(input.Suspended))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Objectives == input.Objectives ||
                    this.Objectives != null &&
                    this.Objectives.SequenceEqual(input.Objectives)
                ) && 
                (
                    this.StaticProperties == input.StaticProperties ||
                    (this.StaticProperties != null &&
                    this.StaticProperties.Equals(input.StaticProperties))
                ) && 
                (
                    this.Runtime == input.Runtime ||
                    (this.Runtime != null &&
                    this.Runtime.Equals(input.Runtime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Attempts != null)
                    hashCode = hashCode * 59 + this.Attempts.GetHashCode();
                if (this.ActivityCompletion != null)
                    hashCode = hashCode * 59 + this.ActivityCompletion.GetHashCode();
                if (this.ActivitySuccess != null)
                    hashCode = hashCode * 59 + this.ActivitySuccess.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.TimeTracked != null)
                    hashCode = hashCode * 59 + this.TimeTracked.GetHashCode();
                if (this.CompletionAmount != null)
                    hashCode = hashCode * 59 + this.CompletionAmount.GetHashCode();
                if (this.Suspended != null)
                    hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.Objectives != null)
                    hashCode = hashCode * 59 + this.Objectives.GetHashCode();
                if (this.StaticProperties != null)
                    hashCode = hashCode * 59 + this.StaticProperties.GetHashCode();
                if (this.Runtime != null)
                    hashCode = hashCode * 59 + this.Runtime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
