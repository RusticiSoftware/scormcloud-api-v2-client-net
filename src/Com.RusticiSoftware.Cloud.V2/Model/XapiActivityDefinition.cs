/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#activity-definition
    /// </summary>
    [DataContract]
    public partial class XapiActivityDefinition :  IEquatable<XapiActivityDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiActivityDefinition" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Type">Type.</param>
        /// <param name="MoreInfo">MoreInfo.</param>
        /// <param name="InteractionType">InteractionType.</param>
        /// <param name="CorrectResponsesPattern">CorrectResponsesPattern.</param>
        /// <param name="Choices">Choices.</param>
        /// <param name="Scale">Scale.</param>
        /// <param name="Source">Source.</param>
        /// <param name="Target">Target.</param>
        /// <param name="Steps">Steps.</param>
        /// <param name="Extensions">Extensions.</param>
        public XapiActivityDefinition(Dictionary<string, string> Name = default(Dictionary<string, string>), Dictionary<string, string> Description = default(Dictionary<string, string>), string Type = default(string), string MoreInfo = default(string), string InteractionType = default(string), List<string> CorrectResponsesPattern = default(List<string>), List<XapiInteractionComponent> Choices = default(List<XapiInteractionComponent>), List<XapiInteractionComponent> Scale = default(List<XapiInteractionComponent>), List<XapiInteractionComponent> Source = default(List<XapiInteractionComponent>), List<XapiInteractionComponent> Target = default(List<XapiInteractionComponent>), List<XapiInteractionComponent> Steps = default(List<XapiInteractionComponent>), Dictionary<string, Object> Extensions = default(Dictionary<string, Object>))
        {
            this.Name = Name;
            this.Description = Description;
            this.Type = Type;
            this.MoreInfo = MoreInfo;
            this.InteractionType = InteractionType;
            this.CorrectResponsesPattern = CorrectResponsesPattern;
            this.Choices = Choices;
            this.Scale = Scale;
            this.Source = Source;
            this.Target = Target;
            this.Steps = Steps;
            this.Extensions = Extensions;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Dictionary<string, string> Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public Dictionary<string, string> Description { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets MoreInfo
        /// </summary>
        [DataMember(Name="moreInfo", EmitDefaultValue=false)]
        public string MoreInfo { get; set; }
        /// <summary>
        /// Gets or Sets InteractionType
        /// </summary>
        [DataMember(Name="interactionType", EmitDefaultValue=false)]
        public string InteractionType { get; set; }
        /// <summary>
        /// Gets or Sets CorrectResponsesPattern
        /// </summary>
        [DataMember(Name="correctResponsesPattern", EmitDefaultValue=false)]
        public List<string> CorrectResponsesPattern { get; set; }
        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [DataMember(Name="choices", EmitDefaultValue=false)]
        public List<XapiInteractionComponent> Choices { get; set; }
        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public List<XapiInteractionComponent> Scale { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public List<XapiInteractionComponent> Source { get; set; }
        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public List<XapiInteractionComponent> Target { get; set; }
        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public List<XapiInteractionComponent> Steps { get; set; }
        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public Dictionary<string, Object> Extensions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiActivityDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MoreInfo: ").Append(MoreInfo).Append("\n");
            sb.Append("  InteractionType: ").Append(InteractionType).Append("\n");
            sb.Append("  CorrectResponsesPattern: ").Append(CorrectResponsesPattern).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as XapiActivityDefinition);
        }

        /// <summary>
        /// Returns true if XapiActivityDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of XapiActivityDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiActivityDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.SequenceEqual(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.SequenceEqual(other.Description)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.MoreInfo == other.MoreInfo ||
                    this.MoreInfo != null &&
                    this.MoreInfo.Equals(other.MoreInfo)
                ) && 
                (
                    this.InteractionType == other.InteractionType ||
                    this.InteractionType != null &&
                    this.InteractionType.Equals(other.InteractionType)
                ) && 
                (
                    this.CorrectResponsesPattern == other.CorrectResponsesPattern ||
                    this.CorrectResponsesPattern != null &&
                    this.CorrectResponsesPattern.SequenceEqual(other.CorrectResponsesPattern)
                ) && 
                (
                    this.Choices == other.Choices ||
                    this.Choices != null &&
                    this.Choices.SequenceEqual(other.Choices)
                ) && 
                (
                    this.Scale == other.Scale ||
                    this.Scale != null &&
                    this.Scale.SequenceEqual(other.Scale)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.SequenceEqual(other.Source)
                ) && 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.SequenceEqual(other.Target)
                ) && 
                (
                    this.Steps == other.Steps ||
                    this.Steps != null &&
                    this.Steps.SequenceEqual(other.Steps)
                ) && 
                (
                    this.Extensions == other.Extensions ||
                    this.Extensions != null &&
                    this.Extensions.SequenceEqual(other.Extensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.MoreInfo != null)
                    hash = hash * 59 + this.MoreInfo.GetHashCode();
                if (this.InteractionType != null)
                    hash = hash * 59 + this.InteractionType.GetHashCode();
                if (this.CorrectResponsesPattern != null)
                    hash = hash * 59 + this.CorrectResponsesPattern.GetHashCode();
                if (this.Choices != null)
                    hash = hash * 59 + this.Choices.GetHashCode();
                if (this.Scale != null)
                    hash = hash * 59 + this.Scale.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                if (this.Steps != null)
                    hash = hash * 59 + this.Steps.GetHashCode();
                if (this.Extensions != null)
                    hash = hash * 59 + this.Extensions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
