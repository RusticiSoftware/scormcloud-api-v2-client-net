/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ReportageAccountInfoUsageSchema
    /// </summary>
    [DataContract]
    public partial class ReportageAccountInfoUsageSchema :  IEquatable<ReportageAccountInfoUsageSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportageAccountInfoUsageSchema" /> class.
        /// </summary>
        /// <param name="monthStart">monthStart.</param>
        /// <param name="regCount">regCount.</param>
        /// <param name="totalRegistrations">totalRegistrations.</param>
        /// <param name="totalCourses">totalCourses.</param>
        public ReportageAccountInfoUsageSchema(DateTime? monthStart = default(DateTime?), int? regCount = default(int?), int? totalRegistrations = default(int?), int? totalCourses = default(int?))
        {
            this.MonthStart = monthStart;
            this.RegCount = regCount;
            this.TotalRegistrations = totalRegistrations;
            this.TotalCourses = totalCourses;
        }
        
        /// <summary>
        /// Gets or Sets MonthStart
        /// </summary>
        [DataMember(Name="monthStart", EmitDefaultValue=false)]
        public DateTime? MonthStart { get; set; }

        /// <summary>
        /// Gets or Sets RegCount
        /// </summary>
        [DataMember(Name="regCount", EmitDefaultValue=false)]
        public int? RegCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalRegistrations
        /// </summary>
        [DataMember(Name="totalRegistrations", EmitDefaultValue=false)]
        public int? TotalRegistrations { get; set; }

        /// <summary>
        /// Gets or Sets TotalCourses
        /// </summary>
        [DataMember(Name="totalCourses", EmitDefaultValue=false)]
        public int? TotalCourses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportageAccountInfoUsageSchema {\n");
            sb.Append("  MonthStart: ").Append(MonthStart).Append("\n");
            sb.Append("  RegCount: ").Append(RegCount).Append("\n");
            sb.Append("  TotalRegistrations: ").Append(TotalRegistrations).Append("\n");
            sb.Append("  TotalCourses: ").Append(TotalCourses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportageAccountInfoUsageSchema);
        }

        /// <summary>
        /// Returns true if ReportageAccountInfoUsageSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportageAccountInfoUsageSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportageAccountInfoUsageSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MonthStart == input.MonthStart ||
                    (this.MonthStart != null &&
                    this.MonthStart.Equals(input.MonthStart))
                ) && 
                (
                    this.RegCount == input.RegCount ||
                    (this.RegCount != null &&
                    this.RegCount.Equals(input.RegCount))
                ) && 
                (
                    this.TotalRegistrations == input.TotalRegistrations ||
                    (this.TotalRegistrations != null &&
                    this.TotalRegistrations.Equals(input.TotalRegistrations))
                ) && 
                (
                    this.TotalCourses == input.TotalCourses ||
                    (this.TotalCourses != null &&
                    this.TotalCourses.Equals(input.TotalCourses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MonthStart != null)
                    hashCode = hashCode * 59 + this.MonthStart.GetHashCode();
                if (this.RegCount != null)
                    hashCode = hashCode * 59 + this.RegCount.GetHashCode();
                if (this.TotalRegistrations != null)
                    hashCode = hashCode * 59 + this.TotalRegistrations.GetHashCode();
                if (this.TotalCourses != null)
                    hashCode = hashCode * 59 + this.TotalCourses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
