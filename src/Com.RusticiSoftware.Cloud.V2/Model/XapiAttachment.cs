/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4111-attachments
    /// </summary>
    [DataContract]
    public partial class XapiAttachment :  IEquatable<XapiAttachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiAttachment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XapiAttachment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiAttachment" /> class.
        /// </summary>
        /// <param name="usageType">usageType (required).</param>
        /// <param name="display">display (required).</param>
        /// <param name="description">description.</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="length">length (required).</param>
        /// <param name="sha2">sha2 (required).</param>
        /// <param name="fileUrl">fileUrl.</param>
        public XapiAttachment(string usageType = default(string), Dictionary<string, string> display = default(Dictionary<string, string>), Dictionary<string, string> description = default(Dictionary<string, string>), string contentType = default(string), long? length = default(long?), string sha2 = default(string), string fileUrl = default(string))
        {
            // to ensure "usageType" is required (not null)
            if (usageType == null)
            {
                throw new InvalidDataException("usageType is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.UsageType = usageType;
            }
            // to ensure "display" is required (not null)
            if (display == null)
            {
                throw new InvalidDataException("display is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.Display = display;
            }
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new InvalidDataException("contentType is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.ContentType = contentType;
            }
            // to ensure "length" is required (not null)
            if (length == null)
            {
                throw new InvalidDataException("length is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.Length = length;
            }
            // to ensure "sha2" is required (not null)
            if (sha2 == null)
            {
                throw new InvalidDataException("sha2 is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.Sha2 = sha2;
            }
            this.Description = description;
            this.FileUrl = fileUrl;
        }
        
        /// <summary>
        /// Gets or Sets UsageType
        /// </summary>
        [DataMember(Name="usageType", EmitDefaultValue=false)]
        public string UsageType { get; set; }

        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name="display", EmitDefaultValue=false)]
        public Dictionary<string, string> Display { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public long? Length { get; set; }

        /// <summary>
        /// Gets or Sets Sha2
        /// </summary>
        [DataMember(Name="sha2", EmitDefaultValue=false)]
        public string Sha2 { get; set; }

        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="fileUrl", EmitDefaultValue=false)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiAttachment {\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Sha2: ").Append(Sha2).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XapiAttachment);
        }

        /// <summary>
        /// Returns true if XapiAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of XapiAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiAttachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsageType == input.UsageType ||
                    (this.UsageType != null &&
                    this.UsageType.Equals(input.UsageType))
                ) && 
                (
                    this.Display == input.Display ||
                    this.Display != null &&
                    this.Display.SequenceEqual(input.Display)
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Sha2 == input.Sha2 ||
                    (this.Sha2 != null &&
                    this.Sha2.Equals(input.Sha2))
                ) && 
                (
                    this.FileUrl == input.FileUrl ||
                    (this.FileUrl != null &&
                    this.FileUrl.Equals(input.FileUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UsageType != null)
                    hashCode = hashCode * 59 + this.UsageType.GetHashCode();
                if (this.Display != null)
                    hashCode = hashCode * 59 + this.Display.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Sha2 != null)
                    hashCode = hashCode * 59 + this.Sha2.GetHashCode();
                if (this.FileUrl != null)
                    hashCode = hashCode * 59 + this.FileUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
