/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4111-attachments
    /// </summary>
    [DataContract]
    public partial class XapiAttachment :  IEquatable<XapiAttachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiAttachment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XapiAttachment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiAttachment" /> class.
        /// </summary>
        /// <param name="UsageType">UsageType (required).</param>
        /// <param name="Display">Display (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="ContentType">ContentType (required).</param>
        /// <param name="Length">Length (required).</param>
        /// <param name="Sha2">Sha2 (required).</param>
        /// <param name="FileUrl">FileUrl.</param>
        public XapiAttachment(string UsageType = default(string), Dictionary<string, string> Display = default(Dictionary<string, string>), Dictionary<string, string> Description = default(Dictionary<string, string>), string ContentType = default(string), long? Length = default(long?), string Sha2 = default(string), string FileUrl = default(string))
        {
            // to ensure "UsageType" is required (not null)
            if (UsageType == null)
            {
                throw new InvalidDataException("UsageType is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.UsageType = UsageType;
            }
            // to ensure "Display" is required (not null)
            if (Display == null)
            {
                throw new InvalidDataException("Display is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.Display = Display;
            }
            // to ensure "ContentType" is required (not null)
            if (ContentType == null)
            {
                throw new InvalidDataException("ContentType is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.ContentType = ContentType;
            }
            // to ensure "Length" is required (not null)
            if (Length == null)
            {
                throw new InvalidDataException("Length is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.Length = Length;
            }
            // to ensure "Sha2" is required (not null)
            if (Sha2 == null)
            {
                throw new InvalidDataException("Sha2 is a required property for XapiAttachment and cannot be null");
            }
            else
            {
                this.Sha2 = Sha2;
            }
            this.Description = Description;
            this.FileUrl = FileUrl;
        }
        
        /// <summary>
        /// Gets or Sets UsageType
        /// </summary>
        [DataMember(Name="usageType", EmitDefaultValue=false)]
        public string UsageType { get; set; }
        /// <summary>
        /// Gets or Sets Display
        /// </summary>
        [DataMember(Name="display", EmitDefaultValue=false)]
        public Dictionary<string, string> Display { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public Dictionary<string, string> Description { get; set; }
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }
        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public long? Length { get; set; }
        /// <summary>
        /// Gets or Sets Sha2
        /// </summary>
        [DataMember(Name="sha2", EmitDefaultValue=false)]
        public string Sha2 { get; set; }
        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="fileUrl", EmitDefaultValue=false)]
        public string FileUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiAttachment {\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Sha2: ").Append(Sha2).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as XapiAttachment);
        }

        /// <summary>
        /// Returns true if XapiAttachment instances are equal
        /// </summary>
        /// <param name="other">Instance of XapiAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiAttachment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UsageType == other.UsageType ||
                    this.UsageType != null &&
                    this.UsageType.Equals(other.UsageType)
                ) && 
                (
                    this.Display == other.Display ||
                    this.Display != null &&
                    this.Display.SequenceEqual(other.Display)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.SequenceEqual(other.Description)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.Length == other.Length ||
                    this.Length != null &&
                    this.Length.Equals(other.Length)
                ) && 
                (
                    this.Sha2 == other.Sha2 ||
                    this.Sha2 != null &&
                    this.Sha2.Equals(other.Sha2)
                ) && 
                (
                    this.FileUrl == other.FileUrl ||
                    this.FileUrl != null &&
                    this.FileUrl.Equals(other.FileUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UsageType != null)
                    hash = hash * 59 + this.UsageType.GetHashCode();
                if (this.Display != null)
                    hash = hash * 59 + this.Display.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                if (this.Length != null)
                    hash = hash * 59 + this.Length.GetHashCode();
                if (this.Sha2 != null)
                    hash = hash * 59 + this.Sha2.GetHashCode();
                if (this.FileUrl != null)
                    hash = hash * 59 + this.FileUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
