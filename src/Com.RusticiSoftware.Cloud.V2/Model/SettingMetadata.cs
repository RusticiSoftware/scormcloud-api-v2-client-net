/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// SettingMetadata
    /// </summary>
    [DataContract]
    public partial class SettingMetadata :  IEquatable<SettingMetadata>, IValidatableObject
    {
        /// <summary>
        /// Does this setting apply to only single-SCO packages, only multi-SCO, or either?
        /// </summary>
        /// <value>Does this setting apply to only single-SCO packages, only multi-SCO, or either?</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LearningStandardVariantEnum
        {
            
            /// <summary>
            /// Enum SingleScoOnly for value: singleScoOnly
            /// </summary>
            [EnumMember(Value = "singleScoOnly")]
            SingleScoOnly = 1,
            
            /// <summary>
            /// Enum MultiScoOnly for value: multiScoOnly
            /// </summary>
            [EnumMember(Value = "multiScoOnly")]
            MultiScoOnly = 2,
            
            /// <summary>
            /// Enum Either for value: either
            /// </summary>
            [EnumMember(Value = "either")]
            Either = 3
        }

        /// <summary>
        /// Does this setting apply to only single-SCO packages, only multi-SCO, or either?
        /// </summary>
        /// <value>Does this setting apply to only single-SCO packages, only multi-SCO, or either?</value>
        [DataMember(Name="learningStandardVariant", EmitDefaultValue=false)]
        public LearningStandardVariantEnum? LearningStandardVariant { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingMetadata" /> class.
        /// </summary>
        /// <param name="_default">Default value of this setting.</param>
        /// <param name="dataType">The data type of this setting.</param>
        /// <param name="settingDescription">description of this setting.</param>
        /// <param name="level">The level this setting will be applied at, which limits where it can be set. For example, WebPathToContentRoot is applied at the application level, so it&#39;s not valid to set it for a registration..</param>
        /// <param name="learningStandards">The list of learning standards this setting applies to. If not present, this setting is not limited to certain learning standards..</param>
        /// <param name="learningStandardVariant">Does this setting apply to only single-SCO packages, only multi-SCO, or either? (default to LearningStandardVariantEnum.Either).</param>
        /// <param name="fallback">A setting that will be used instead of this setting if no value is provided for this setting (This is similar to a default, except that the the value of another setting is being used instead of a fixed default value)..</param>
        /// <param name="validValues">For settings with a fixed list of valid values, the list of those values.</param>
        public SettingMetadata(string _default = default(string), string dataType = default(string), string settingDescription = default(string), string level = default(string), List<string> learningStandards = default(List<string>), LearningStandardVariantEnum? learningStandardVariant = LearningStandardVariantEnum.Either, string fallback = default(string), List<SettingValidValue> validValues = default(List<SettingValidValue>))
        {
            this.Default = _default;
            this.DataType = dataType;
            this.SettingDescription = settingDescription;
            this.Level = level;
            this.LearningStandards = learningStandards;
            // use default value if no "learningStandardVariant" provided
            if (learningStandardVariant == null)
            {
                this.LearningStandardVariant = LearningStandardVariantEnum.Either;
            }
            else
            {
                this.LearningStandardVariant = learningStandardVariant;
            }
            this.Fallback = fallback;
            this.ValidValues = validValues;
        }
        
        /// <summary>
        /// Default value of this setting
        /// </summary>
        /// <value>Default value of this setting</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string Default { get; set; }

        /// <summary>
        /// The data type of this setting
        /// </summary>
        /// <value>The data type of this setting</value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public string DataType { get; set; }

        /// <summary>
        /// description of this setting
        /// </summary>
        /// <value>description of this setting</value>
        [DataMember(Name="settingDescription", EmitDefaultValue=false)]
        public string SettingDescription { get; set; }

        /// <summary>
        /// The level this setting will be applied at, which limits where it can be set. For example, WebPathToContentRoot is applied at the application level, so it&#39;s not valid to set it for a registration.
        /// </summary>
        /// <value>The level this setting will be applied at, which limits where it can be set. For example, WebPathToContentRoot is applied at the application level, so it&#39;s not valid to set it for a registration.</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// The list of learning standards this setting applies to. If not present, this setting is not limited to certain learning standards.
        /// </summary>
        /// <value>The list of learning standards this setting applies to. If not present, this setting is not limited to certain learning standards.</value>
        [DataMember(Name="learningStandards", EmitDefaultValue=false)]
        public List<string> LearningStandards { get; set; }


        /// <summary>
        /// A setting that will be used instead of this setting if no value is provided for this setting (This is similar to a default, except that the the value of another setting is being used instead of a fixed default value).
        /// </summary>
        /// <value>A setting that will be used instead of this setting if no value is provided for this setting (This is similar to a default, except that the the value of another setting is being used instead of a fixed default value).</value>
        [DataMember(Name="fallback", EmitDefaultValue=false)]
        public string Fallback { get; set; }

        /// <summary>
        /// For settings with a fixed list of valid values, the list of those values
        /// </summary>
        /// <value>For settings with a fixed list of valid values, the list of those values</value>
        [DataMember(Name="validValues", EmitDefaultValue=false)]
        public List<SettingValidValue> ValidValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingMetadata {\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  SettingDescription: ").Append(SettingDescription).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  LearningStandardVariant: ").Append(LearningStandardVariant).Append("\n");
            sb.Append("  Fallback: ").Append(Fallback).Append("\n");
            sb.Append("  ValidValues: ").Append(ValidValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingMetadata);
        }

        /// <summary>
        /// Returns true if SettingMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Default == input.Default ||
                    (this.Default != null &&
                    this.Default.Equals(input.Default))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.SettingDescription == input.SettingDescription ||
                    (this.SettingDescription != null &&
                    this.SettingDescription.Equals(input.SettingDescription))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.LearningStandards == input.LearningStandards ||
                    this.LearningStandards != null &&
                    this.LearningStandards.SequenceEqual(input.LearningStandards)
                ) && 
                (
                    this.LearningStandardVariant == input.LearningStandardVariant ||
                    (this.LearningStandardVariant != null &&
                    this.LearningStandardVariant.Equals(input.LearningStandardVariant))
                ) && 
                (
                    this.Fallback == input.Fallback ||
                    (this.Fallback != null &&
                    this.Fallback.Equals(input.Fallback))
                ) && 
                (
                    this.ValidValues == input.ValidValues ||
                    this.ValidValues != null &&
                    this.ValidValues.SequenceEqual(input.ValidValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Default != null)
                    hashCode = hashCode * 59 + this.Default.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.SettingDescription != null)
                    hashCode = hashCode * 59 + this.SettingDescription.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.LearningStandards != null)
                    hashCode = hashCode * 59 + this.LearningStandards.GetHashCode();
                if (this.LearningStandardVariant != null)
                    hashCode = hashCode * 59 + this.LearningStandardVariant.GetHashCode();
                if (this.Fallback != null)
                    hashCode = hashCode * 59 + this.Fallback.GetHashCode();
                if (this.ValidValues != null)
                    hashCode = hashCode * 59 + this.ValidValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
