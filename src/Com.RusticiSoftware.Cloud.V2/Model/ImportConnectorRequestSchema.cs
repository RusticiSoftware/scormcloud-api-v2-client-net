/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// Used to create a course from a content connector. Before creating a course using this schema, a content connector must be created using the &#x60;/contentConnectors&#x60; API endpoints. Once a content connector has been created, this schema can be used to create a course that can be launched using that connector.  For example, this schema is used to import an LTI 1.3 Tool to be consumed by SCORM Cloud acting as the LTI Platform. 
    /// </summary>
    [DataContract]
    public partial class ImportConnectorRequestSchema :  IEquatable<ImportConnectorRequestSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportConnectorRequestSchema" /> class.
        /// </summary>
        /// <param name="connectorId">The connector to use for this course.</param>
        /// <param name="connectorIdForContent">The id the connector provides to identify this content.</param>
        /// <param name="metadataForConnector">The metadata for this connector, format is implementation specific.</param>
        public ImportConnectorRequestSchema(string connectorId = default(string), string connectorIdForContent = default(string), Object metadataForConnector = default(Object))
        {
            this.ConnectorId = connectorId;
            this.ConnectorIdForContent = connectorIdForContent;
            this.MetadataForConnector = metadataForConnector;
        }
        
        /// <summary>
        /// The connector to use for this course
        /// </summary>
        /// <value>The connector to use for this course</value>
        [DataMember(Name="connectorId", EmitDefaultValue=false)]
        public string ConnectorId { get; set; }

        /// <summary>
        /// The id the connector provides to identify this content
        /// </summary>
        /// <value>The id the connector provides to identify this content</value>
        [DataMember(Name="connectorIdForContent", EmitDefaultValue=false)]
        public string ConnectorIdForContent { get; set; }

        /// <summary>
        /// The metadata for this connector, format is implementation specific
        /// </summary>
        /// <value>The metadata for this connector, format is implementation specific</value>
        [DataMember(Name="metadataForConnector", EmitDefaultValue=false)]
        public Object MetadataForConnector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportConnectorRequestSchema {\n");
            sb.Append("  ConnectorId: ").Append(ConnectorId).Append("\n");
            sb.Append("  ConnectorIdForContent: ").Append(ConnectorIdForContent).Append("\n");
            sb.Append("  MetadataForConnector: ").Append(MetadataForConnector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportConnectorRequestSchema);
        }

        /// <summary>
        /// Returns true if ImportConnectorRequestSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportConnectorRequestSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportConnectorRequestSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectorId == input.ConnectorId ||
                    (this.ConnectorId != null &&
                    this.ConnectorId.Equals(input.ConnectorId))
                ) && 
                (
                    this.ConnectorIdForContent == input.ConnectorIdForContent ||
                    (this.ConnectorIdForContent != null &&
                    this.ConnectorIdForContent.Equals(input.ConnectorIdForContent))
                ) && 
                (
                    this.MetadataForConnector == input.MetadataForConnector ||
                    (this.MetadataForConnector != null &&
                    this.MetadataForConnector.Equals(input.MetadataForConnector))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectorId != null)
                    hashCode = hashCode * 59 + this.ConnectorId.GetHashCode();
                if (this.ConnectorIdForContent != null)
                    hashCode = hashCode * 59 + this.ConnectorIdForContent.GetHashCode();
                if (this.MetadataForConnector != null)
                    hashCode = hashCode * 59 + this.MetadataForConnector.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
