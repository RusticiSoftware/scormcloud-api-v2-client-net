/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ZoomiCourseOptionsSchema
    /// </summary>
    [DataContract]
    public partial class ZoomiCourseOptionsSchema :  IEquatable<ZoomiCourseOptionsSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoomiCourseOptionsSchema" /> class.
        /// </summary>
        /// <param name="nti">nti.</param>
        /// <param name="cta">cta.</param>
        public ZoomiCourseOptionsSchema(string nti = default(string), string cta = default(string))
        {
            this.Nti = nti;
            this.Cta = cta;
        }
        
        /// <summary>
        /// Gets or Sets Nti
        /// </summary>
        [DataMember(Name="nti", EmitDefaultValue=false)]
        public string Nti { get; set; }

        /// <summary>
        /// Gets or Sets Cta
        /// </summary>
        [DataMember(Name="cta", EmitDefaultValue=false)]
        public string Cta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZoomiCourseOptionsSchema {\n");
            sb.Append("  Nti: ").Append(Nti).Append("\n");
            sb.Append("  Cta: ").Append(Cta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZoomiCourseOptionsSchema);
        }

        /// <summary>
        /// Returns true if ZoomiCourseOptionsSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ZoomiCourseOptionsSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoomiCourseOptionsSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nti == input.Nti ||
                    (this.Nti != null &&
                    this.Nti.Equals(input.Nti))
                ) && 
                (
                    this.Cta == input.Cta ||
                    (this.Cta != null &&
                    this.Cta.Equals(input.Cta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nti != null)
                    hashCode = hashCode * 59 + this.Nti.GetHashCode();
                if (this.Cta != null)
                    hashCode = hashCode * 59 + this.Cta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
