/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ZoomiCourseOptionsSchema
    /// </summary>
    [DataContract]
    public partial class ZoomiCourseOptionsSchema :  IEquatable<ZoomiCourseOptionsSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoomiCourseOptionsSchema" /> class.
        /// </summary>
        /// <param name="Nti">Nti.</param>
        /// <param name="Cta">Cta.</param>
        public ZoomiCourseOptionsSchema(string Nti = default(string), string Cta = default(string))
        {
            this.Nti = Nti;
            this.Cta = Cta;
        }
        
        /// <summary>
        /// Gets or Sets Nti
        /// </summary>
        [DataMember(Name="nti", EmitDefaultValue=false)]
        public string Nti { get; set; }
        /// <summary>
        /// Gets or Sets Cta
        /// </summary>
        [DataMember(Name="cta", EmitDefaultValue=false)]
        public string Cta { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZoomiCourseOptionsSchema {\n");
            sb.Append("  Nti: ").Append(Nti).Append("\n");
            sb.Append("  Cta: ").Append(Cta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ZoomiCourseOptionsSchema);
        }

        /// <summary>
        /// Returns true if ZoomiCourseOptionsSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of ZoomiCourseOptionsSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoomiCourseOptionsSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Nti == other.Nti ||
                    this.Nti != null &&
                    this.Nti.Equals(other.Nti)
                ) && 
                (
                    this.Cta == other.Cta ||
                    this.Cta != null &&
                    this.Cta.Equals(other.Cta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nti != null)
                    hash = hash * 59 + this.Nti.GetHashCode();
                if (this.Cta != null)
                    hash = hash * 59 + this.Cta.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
