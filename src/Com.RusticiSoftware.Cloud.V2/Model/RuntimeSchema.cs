/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RuntimeSchema
    /// </summary>
    [DataContract]
    public partial class RuntimeSchema :  IEquatable<RuntimeSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines RuntimeSuccessStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuntimeSuccessStatusEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 2,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3
        }

        /// <summary>
        /// Gets or Sets RuntimeSuccessStatus
        /// </summary>
        [DataMember(Name="runtimeSuccessStatus", EmitDefaultValue=false)]
        public RuntimeSuccessStatusEnum? RuntimeSuccessStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeSchema" /> class.
        /// </summary>
        /// <param name="completionStatus">completionStatus.</param>
        /// <param name="credit">credit.</param>
        /// <param name="entry">entry.</param>
        /// <param name="exit">exit.</param>
        /// <param name="learnerPreference">learnerPreference.</param>
        /// <param name="location">location.</param>
        /// <param name="mode">mode.</param>
        /// <param name="progressMeasure">progressMeasure.</param>
        /// <param name="scoreScaled">scoreScaled.</param>
        /// <param name="scoreRaw">scoreRaw.</param>
        /// <param name="scoreMin">scoreMin.</param>
        /// <param name="scoreMax">scoreMax.</param>
        /// <param name="totalTime">totalTime.</param>
        /// <param name="timeTracked">timeTracked.</param>
        /// <param name="runtimeSuccessStatus">runtimeSuccessStatus (default to RuntimeSuccessStatusEnum.UNKNOWN).</param>
        /// <param name="suspendData">suspendData.</param>
        /// <param name="learnerComments">learnerComments.</param>
        /// <param name="lmsComments">lmsComments.</param>
        /// <param name="runtimeInteractions">runtimeInteractions.</param>
        /// <param name="runtimeObjectives">runtimeObjectives.</param>
        public RuntimeSchema(string completionStatus = default(string), string credit = default(string), string entry = default(string), string exit = default(string), LearnerPreferenceSchema learnerPreference = default(LearnerPreferenceSchema), string location = default(string), string mode = default(string), string progressMeasure = default(string), string scoreScaled = default(string), string scoreRaw = default(string), string scoreMin = default(string), string scoreMax = default(string), string totalTime = default(string), string timeTracked = default(string), RuntimeSuccessStatusEnum? runtimeSuccessStatus = RuntimeSuccessStatusEnum.UNKNOWN, string suspendData = default(string), List<CommentSchema> learnerComments = default(List<CommentSchema>), List<CommentSchema> lmsComments = default(List<CommentSchema>), List<RuntimeInteractionSchema> runtimeInteractions = default(List<RuntimeInteractionSchema>), List<RuntimeObjectiveSchema> runtimeObjectives = default(List<RuntimeObjectiveSchema>))
        {
            this.CompletionStatus = completionStatus;
            this.Credit = credit;
            this.Entry = entry;
            this.Exit = exit;
            this.LearnerPreference = learnerPreference;
            this.Location = location;
            this.Mode = mode;
            this.ProgressMeasure = progressMeasure;
            this.ScoreScaled = scoreScaled;
            this.ScoreRaw = scoreRaw;
            this.ScoreMin = scoreMin;
            this.ScoreMax = scoreMax;
            this.TotalTime = totalTime;
            this.TimeTracked = timeTracked;
            // use default value if no "runtimeSuccessStatus" provided
            if (runtimeSuccessStatus == null)
            {
                this.RuntimeSuccessStatus = RuntimeSuccessStatusEnum.UNKNOWN;
            }
            else
            {
                this.RuntimeSuccessStatus = runtimeSuccessStatus;
            }
            this.SuspendData = suspendData;
            this.LearnerComments = learnerComments;
            this.LmsComments = lmsComments;
            this.RuntimeInteractions = runtimeInteractions;
            this.RuntimeObjectives = runtimeObjectives;
        }
        
        /// <summary>
        /// Gets or Sets CompletionStatus
        /// </summary>
        [DataMember(Name="completionStatus", EmitDefaultValue=false)]
        public string CompletionStatus { get; set; }

        /// <summary>
        /// Gets or Sets Credit
        /// </summary>
        [DataMember(Name="credit", EmitDefaultValue=false)]
        public string Credit { get; set; }

        /// <summary>
        /// Gets or Sets Entry
        /// </summary>
        [DataMember(Name="entry", EmitDefaultValue=false)]
        public string Entry { get; set; }

        /// <summary>
        /// Gets or Sets Exit
        /// </summary>
        [DataMember(Name="exit", EmitDefaultValue=false)]
        public string Exit { get; set; }

        /// <summary>
        /// Gets or Sets LearnerPreference
        /// </summary>
        [DataMember(Name="learnerPreference", EmitDefaultValue=false)]
        public LearnerPreferenceSchema LearnerPreference { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets ProgressMeasure
        /// </summary>
        [DataMember(Name="progressMeasure", EmitDefaultValue=false)]
        public string ProgressMeasure { get; set; }

        /// <summary>
        /// Gets or Sets ScoreScaled
        /// </summary>
        [DataMember(Name="scoreScaled", EmitDefaultValue=false)]
        public string ScoreScaled { get; set; }

        /// <summary>
        /// Gets or Sets ScoreRaw
        /// </summary>
        [DataMember(Name="scoreRaw", EmitDefaultValue=false)]
        public string ScoreRaw { get; set; }

        /// <summary>
        /// Gets or Sets ScoreMin
        /// </summary>
        [DataMember(Name="scoreMin", EmitDefaultValue=false)]
        public string ScoreMin { get; set; }

        /// <summary>
        /// Gets or Sets ScoreMax
        /// </summary>
        [DataMember(Name="scoreMax", EmitDefaultValue=false)]
        public string ScoreMax { get; set; }

        /// <summary>
        /// Gets or Sets TotalTime
        /// </summary>
        [DataMember(Name="totalTime", EmitDefaultValue=false)]
        public string TotalTime { get; set; }

        /// <summary>
        /// Gets or Sets TimeTracked
        /// </summary>
        [DataMember(Name="timeTracked", EmitDefaultValue=false)]
        public string TimeTracked { get; set; }


        /// <summary>
        /// Gets or Sets SuspendData
        /// </summary>
        [DataMember(Name="suspendData", EmitDefaultValue=false)]
        public string SuspendData { get; set; }

        /// <summary>
        /// Gets or Sets LearnerComments
        /// </summary>
        [DataMember(Name="learnerComments", EmitDefaultValue=false)]
        public List<CommentSchema> LearnerComments { get; set; }

        /// <summary>
        /// Gets or Sets LmsComments
        /// </summary>
        [DataMember(Name="lmsComments", EmitDefaultValue=false)]
        public List<CommentSchema> LmsComments { get; set; }

        /// <summary>
        /// Gets or Sets RuntimeInteractions
        /// </summary>
        [DataMember(Name="runtimeInteractions", EmitDefaultValue=false)]
        public List<RuntimeInteractionSchema> RuntimeInteractions { get; set; }

        /// <summary>
        /// Gets or Sets RuntimeObjectives
        /// </summary>
        [DataMember(Name="runtimeObjectives", EmitDefaultValue=false)]
        public List<RuntimeObjectiveSchema> RuntimeObjectives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeSchema {\n");
            sb.Append("  CompletionStatus: ").Append(CompletionStatus).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Entry: ").Append(Entry).Append("\n");
            sb.Append("  Exit: ").Append(Exit).Append("\n");
            sb.Append("  LearnerPreference: ").Append(LearnerPreference).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ProgressMeasure: ").Append(ProgressMeasure).Append("\n");
            sb.Append("  ScoreScaled: ").Append(ScoreScaled).Append("\n");
            sb.Append("  ScoreRaw: ").Append(ScoreRaw).Append("\n");
            sb.Append("  ScoreMin: ").Append(ScoreMin).Append("\n");
            sb.Append("  ScoreMax: ").Append(ScoreMax).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  TimeTracked: ").Append(TimeTracked).Append("\n");
            sb.Append("  RuntimeSuccessStatus: ").Append(RuntimeSuccessStatus).Append("\n");
            sb.Append("  SuspendData: ").Append(SuspendData).Append("\n");
            sb.Append("  LearnerComments: ").Append(LearnerComments).Append("\n");
            sb.Append("  LmsComments: ").Append(LmsComments).Append("\n");
            sb.Append("  RuntimeInteractions: ").Append(RuntimeInteractions).Append("\n");
            sb.Append("  RuntimeObjectives: ").Append(RuntimeObjectives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeSchema);
        }

        /// <summary>
        /// Returns true if RuntimeSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompletionStatus == input.CompletionStatus ||
                    (this.CompletionStatus != null &&
                    this.CompletionStatus.Equals(input.CompletionStatus))
                ) && 
                (
                    this.Credit == input.Credit ||
                    (this.Credit != null &&
                    this.Credit.Equals(input.Credit))
                ) && 
                (
                    this.Entry == input.Entry ||
                    (this.Entry != null &&
                    this.Entry.Equals(input.Entry))
                ) && 
                (
                    this.Exit == input.Exit ||
                    (this.Exit != null &&
                    this.Exit.Equals(input.Exit))
                ) && 
                (
                    this.LearnerPreference == input.LearnerPreference ||
                    (this.LearnerPreference != null &&
                    this.LearnerPreference.Equals(input.LearnerPreference))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.ProgressMeasure == input.ProgressMeasure ||
                    (this.ProgressMeasure != null &&
                    this.ProgressMeasure.Equals(input.ProgressMeasure))
                ) && 
                (
                    this.ScoreScaled == input.ScoreScaled ||
                    (this.ScoreScaled != null &&
                    this.ScoreScaled.Equals(input.ScoreScaled))
                ) && 
                (
                    this.ScoreRaw == input.ScoreRaw ||
                    (this.ScoreRaw != null &&
                    this.ScoreRaw.Equals(input.ScoreRaw))
                ) && 
                (
                    this.ScoreMin == input.ScoreMin ||
                    (this.ScoreMin != null &&
                    this.ScoreMin.Equals(input.ScoreMin))
                ) && 
                (
                    this.ScoreMax == input.ScoreMax ||
                    (this.ScoreMax != null &&
                    this.ScoreMax.Equals(input.ScoreMax))
                ) && 
                (
                    this.TotalTime == input.TotalTime ||
                    (this.TotalTime != null &&
                    this.TotalTime.Equals(input.TotalTime))
                ) && 
                (
                    this.TimeTracked == input.TimeTracked ||
                    (this.TimeTracked != null &&
                    this.TimeTracked.Equals(input.TimeTracked))
                ) && 
                (
                    this.RuntimeSuccessStatus == input.RuntimeSuccessStatus ||
                    (this.RuntimeSuccessStatus != null &&
                    this.RuntimeSuccessStatus.Equals(input.RuntimeSuccessStatus))
                ) && 
                (
                    this.SuspendData == input.SuspendData ||
                    (this.SuspendData != null &&
                    this.SuspendData.Equals(input.SuspendData))
                ) && 
                (
                    this.LearnerComments == input.LearnerComments ||
                    this.LearnerComments != null &&
                    this.LearnerComments.SequenceEqual(input.LearnerComments)
                ) && 
                (
                    this.LmsComments == input.LmsComments ||
                    this.LmsComments != null &&
                    this.LmsComments.SequenceEqual(input.LmsComments)
                ) && 
                (
                    this.RuntimeInteractions == input.RuntimeInteractions ||
                    this.RuntimeInteractions != null &&
                    this.RuntimeInteractions.SequenceEqual(input.RuntimeInteractions)
                ) && 
                (
                    this.RuntimeObjectives == input.RuntimeObjectives ||
                    this.RuntimeObjectives != null &&
                    this.RuntimeObjectives.SequenceEqual(input.RuntimeObjectives)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompletionStatus != null)
                    hashCode = hashCode * 59 + this.CompletionStatus.GetHashCode();
                if (this.Credit != null)
                    hashCode = hashCode * 59 + this.Credit.GetHashCode();
                if (this.Entry != null)
                    hashCode = hashCode * 59 + this.Entry.GetHashCode();
                if (this.Exit != null)
                    hashCode = hashCode * 59 + this.Exit.GetHashCode();
                if (this.LearnerPreference != null)
                    hashCode = hashCode * 59 + this.LearnerPreference.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.ProgressMeasure != null)
                    hashCode = hashCode * 59 + this.ProgressMeasure.GetHashCode();
                if (this.ScoreScaled != null)
                    hashCode = hashCode * 59 + this.ScoreScaled.GetHashCode();
                if (this.ScoreRaw != null)
                    hashCode = hashCode * 59 + this.ScoreRaw.GetHashCode();
                if (this.ScoreMin != null)
                    hashCode = hashCode * 59 + this.ScoreMin.GetHashCode();
                if (this.ScoreMax != null)
                    hashCode = hashCode * 59 + this.ScoreMax.GetHashCode();
                if (this.TotalTime != null)
                    hashCode = hashCode * 59 + this.TotalTime.GetHashCode();
                if (this.TimeTracked != null)
                    hashCode = hashCode * 59 + this.TimeTracked.GetHashCode();
                if (this.RuntimeSuccessStatus != null)
                    hashCode = hashCode * 59 + this.RuntimeSuccessStatus.GetHashCode();
                if (this.SuspendData != null)
                    hashCode = hashCode * 59 + this.SuspendData.GetHashCode();
                if (this.LearnerComments != null)
                    hashCode = hashCode * 59 + this.LearnerComments.GetHashCode();
                if (this.LmsComments != null)
                    hashCode = hashCode * 59 + this.LmsComments.GetHashCode();
                if (this.RuntimeInteractions != null)
                    hashCode = hashCode * 59 + this.RuntimeInteractions.GetHashCode();
                if (this.RuntimeObjectives != null)
                    hashCode = hashCode * 59 + this.RuntimeObjectives.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
