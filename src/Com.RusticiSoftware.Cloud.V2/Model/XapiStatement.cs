/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#41-statement-properties
    /// </summary>
    [DataContract]
    public partial class XapiStatement :  IEquatable<XapiStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiStatement" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Actor">Actor.</param>
        /// <param name="Verb">Verb.</param>
        /// <param name="ObjectActivity">ObjectActivity.</param>
        /// <param name="ObjectAgentGroup">ObjectAgentGroup.</param>
        /// <param name="ObjectStatementReference">ObjectStatementReference.</param>
        /// <param name="ObjectSubStatement">ObjectSubStatement.</param>
        /// <param name="Result">Result.</param>
        /// <param name="Context">Context.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="Stored">Stored.</param>
        /// <param name="Authority">Authority.</param>
        /// <param name="Attachments">Attachments.</param>
        public XapiStatement(string Id = default(string), XapiAgentGroup Actor = default(XapiAgentGroup), XapiVerb Verb = default(XapiVerb), XapiActivity ObjectActivity = default(XapiActivity), XapiAgentGroup ObjectAgentGroup = default(XapiAgentGroup), XapiStatementReference ObjectStatementReference = default(XapiStatementReference), XapiStatement ObjectSubStatement = default(XapiStatement), XapiResult Result = default(XapiResult), XapiContext Context = default(XapiContext), DateTime? Timestamp = default(DateTime?), DateTime? Stored = default(DateTime?), XapiAgentGroup Authority = default(XapiAgentGroup), List<XapiAttachment> Attachments = default(List<XapiAttachment>))
        {
            this.Id = Id;
            this.Actor = Actor;
            this.Verb = Verb;
            this.ObjectActivity = ObjectActivity;
            this.ObjectAgentGroup = ObjectAgentGroup;
            this.ObjectStatementReference = ObjectStatementReference;
            this.ObjectSubStatement = ObjectSubStatement;
            this.Result = Result;
            this.Context = Context;
            this.Timestamp = Timestamp;
            this.Stored = Stored;
            this.Authority = Authority;
            this.Attachments = Attachments;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public XapiAgentGroup Actor { get; set; }
        /// <summary>
        /// Gets or Sets Verb
        /// </summary>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public XapiVerb Verb { get; set; }
        /// <summary>
        /// Gets or Sets ObjectActivity
        /// </summary>
        [DataMember(Name="objectActivity", EmitDefaultValue=false)]
        public XapiActivity ObjectActivity { get; set; }
        /// <summary>
        /// Gets or Sets ObjectAgentGroup
        /// </summary>
        [DataMember(Name="objectAgentGroup", EmitDefaultValue=false)]
        public XapiAgentGroup ObjectAgentGroup { get; set; }
        /// <summary>
        /// Gets or Sets ObjectStatementReference
        /// </summary>
        [DataMember(Name="objectStatementReference", EmitDefaultValue=false)]
        public XapiStatementReference ObjectStatementReference { get; set; }
        /// <summary>
        /// Gets or Sets ObjectSubStatement
        /// </summary>
        [DataMember(Name="objectSubStatement", EmitDefaultValue=false)]
        public XapiStatement ObjectSubStatement { get; set; }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public XapiResult Result { get; set; }
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public XapiContext Context { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets Stored
        /// </summary>
        [DataMember(Name="stored", EmitDefaultValue=false)]
        public DateTime? Stored { get; set; }
        /// <summary>
        /// Gets or Sets Authority
        /// </summary>
        [DataMember(Name="authority", EmitDefaultValue=false)]
        public XapiAgentGroup Authority { get; set; }
        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<XapiAttachment> Attachments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiStatement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  ObjectActivity: ").Append(ObjectActivity).Append("\n");
            sb.Append("  ObjectAgentGroup: ").Append(ObjectAgentGroup).Append("\n");
            sb.Append("  ObjectStatementReference: ").Append(ObjectStatementReference).Append("\n");
            sb.Append("  ObjectSubStatement: ").Append(ObjectSubStatement).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Stored: ").Append(Stored).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as XapiStatement);
        }

        /// <summary>
        /// Returns true if XapiStatement instances are equal
        /// </summary>
        /// <param name="other">Instance of XapiStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiStatement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Actor == other.Actor ||
                    this.Actor != null &&
                    this.Actor.Equals(other.Actor)
                ) && 
                (
                    this.Verb == other.Verb ||
                    this.Verb != null &&
                    this.Verb.Equals(other.Verb)
                ) && 
                (
                    this.ObjectActivity == other.ObjectActivity ||
                    this.ObjectActivity != null &&
                    this.ObjectActivity.Equals(other.ObjectActivity)
                ) && 
                (
                    this.ObjectAgentGroup == other.ObjectAgentGroup ||
                    this.ObjectAgentGroup != null &&
                    this.ObjectAgentGroup.Equals(other.ObjectAgentGroup)
                ) && 
                (
                    this.ObjectStatementReference == other.ObjectStatementReference ||
                    this.ObjectStatementReference != null &&
                    this.ObjectStatementReference.Equals(other.ObjectStatementReference)
                ) && 
                (
                    this.ObjectSubStatement == other.ObjectSubStatement ||
                    this.ObjectSubStatement != null &&
                    this.ObjectSubStatement.Equals(other.ObjectSubStatement)
                ) && 
                (
                    this.Result == other.Result ||
                    this.Result != null &&
                    this.Result.Equals(other.Result)
                ) && 
                (
                    this.Context == other.Context ||
                    this.Context != null &&
                    this.Context.Equals(other.Context)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Stored == other.Stored ||
                    this.Stored != null &&
                    this.Stored.Equals(other.Stored)
                ) && 
                (
                    this.Authority == other.Authority ||
                    this.Authority != null &&
                    this.Authority.Equals(other.Authority)
                ) && 
                (
                    this.Attachments == other.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(other.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Actor != null)
                    hash = hash * 59 + this.Actor.GetHashCode();
                if (this.Verb != null)
                    hash = hash * 59 + this.Verb.GetHashCode();
                if (this.ObjectActivity != null)
                    hash = hash * 59 + this.ObjectActivity.GetHashCode();
                if (this.ObjectAgentGroup != null)
                    hash = hash * 59 + this.ObjectAgentGroup.GetHashCode();
                if (this.ObjectStatementReference != null)
                    hash = hash * 59 + this.ObjectStatementReference.GetHashCode();
                if (this.ObjectSubStatement != null)
                    hash = hash * 59 + this.ObjectSubStatement.GetHashCode();
                if (this.Result != null)
                    hash = hash * 59 + this.Result.GetHashCode();
                if (this.Context != null)
                    hash = hash * 59 + this.Context.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Stored != null)
                    hash = hash * 59 + this.Stored.GetHashCode();
                if (this.Authority != null)
                    hash = hash * 59 + this.Authority.GetHashCode();
                if (this.Attachments != null)
                    hash = hash * 59 + this.Attachments.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
