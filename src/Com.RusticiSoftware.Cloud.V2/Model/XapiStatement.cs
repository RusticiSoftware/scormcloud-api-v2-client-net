/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#41-statement-properties
    /// </summary>
    [DataContract]
    public partial class XapiStatement :  IEquatable<XapiStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiStatement" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="actor">actor.</param>
        /// <param name="verb">verb.</param>
        /// <param name="objectActivity">objectActivity.</param>
        /// <param name="objectAgentGroup">objectAgentGroup.</param>
        /// <param name="objectStatementReference">objectStatementReference.</param>
        /// <param name="objectSubStatement">objectSubStatement.</param>
        /// <param name="result">result.</param>
        /// <param name="context">context.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="stored">stored.</param>
        /// <param name="authority">authority.</param>
        /// <param name="attachments">attachments.</param>
        public XapiStatement(string id = default(string), XapiAgentGroup actor = default(XapiAgentGroup), XapiVerb verb = default(XapiVerb), XapiActivity objectActivity = default(XapiActivity), XapiAgentGroup objectAgentGroup = default(XapiAgentGroup), XapiStatementReference objectStatementReference = default(XapiStatementReference), XapiStatement objectSubStatement = default(XapiStatement), XapiResult result = default(XapiResult), XapiContext context = default(XapiContext), DateTime? timestamp = default(DateTime?), DateTime? stored = default(DateTime?), XapiAgentGroup authority = default(XapiAgentGroup), List<XapiAttachment> attachments = default(List<XapiAttachment>))
        {
            this.Id = id;
            this.Actor = actor;
            this.Verb = verb;
            this.ObjectActivity = objectActivity;
            this.ObjectAgentGroup = objectAgentGroup;
            this.ObjectStatementReference = objectStatementReference;
            this.ObjectSubStatement = objectSubStatement;
            this.Result = result;
            this.Context = context;
            this.Timestamp = timestamp;
            this.Stored = stored;
            this.Authority = authority;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public XapiAgentGroup Actor { get; set; }

        /// <summary>
        /// Gets or Sets Verb
        /// </summary>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public XapiVerb Verb { get; set; }

        /// <summary>
        /// Gets or Sets ObjectActivity
        /// </summary>
        [DataMember(Name="objectActivity", EmitDefaultValue=false)]
        public XapiActivity ObjectActivity { get; set; }

        /// <summary>
        /// Gets or Sets ObjectAgentGroup
        /// </summary>
        [DataMember(Name="objectAgentGroup", EmitDefaultValue=false)]
        public XapiAgentGroup ObjectAgentGroup { get; set; }

        /// <summary>
        /// Gets or Sets ObjectStatementReference
        /// </summary>
        [DataMember(Name="objectStatementReference", EmitDefaultValue=false)]
        public XapiStatementReference ObjectStatementReference { get; set; }

        /// <summary>
        /// Gets or Sets ObjectSubStatement
        /// </summary>
        [DataMember(Name="objectSubStatement", EmitDefaultValue=false)]
        public XapiStatement ObjectSubStatement { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public XapiResult Result { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public XapiContext Context { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Stored
        /// </summary>
        [DataMember(Name="stored", EmitDefaultValue=false)]
        public DateTime? Stored { get; set; }

        /// <summary>
        /// Gets or Sets Authority
        /// </summary>
        [DataMember(Name="authority", EmitDefaultValue=false)]
        public XapiAgentGroup Authority { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<XapiAttachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiStatement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  ObjectActivity: ").Append(ObjectActivity).Append("\n");
            sb.Append("  ObjectAgentGroup: ").Append(ObjectAgentGroup).Append("\n");
            sb.Append("  ObjectStatementReference: ").Append(ObjectStatementReference).Append("\n");
            sb.Append("  ObjectSubStatement: ").Append(ObjectSubStatement).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Stored: ").Append(Stored).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XapiStatement);
        }

        /// <summary>
        /// Returns true if XapiStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of XapiStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                ) && 
                (
                    this.Verb == input.Verb ||
                    (this.Verb != null &&
                    this.Verb.Equals(input.Verb))
                ) && 
                (
                    this.ObjectActivity == input.ObjectActivity ||
                    (this.ObjectActivity != null &&
                    this.ObjectActivity.Equals(input.ObjectActivity))
                ) && 
                (
                    this.ObjectAgentGroup == input.ObjectAgentGroup ||
                    (this.ObjectAgentGroup != null &&
                    this.ObjectAgentGroup.Equals(input.ObjectAgentGroup))
                ) && 
                (
                    this.ObjectStatementReference == input.ObjectStatementReference ||
                    (this.ObjectStatementReference != null &&
                    this.ObjectStatementReference.Equals(input.ObjectStatementReference))
                ) && 
                (
                    this.ObjectSubStatement == input.ObjectSubStatement ||
                    (this.ObjectSubStatement != null &&
                    this.ObjectSubStatement.Equals(input.ObjectSubStatement))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Stored == input.Stored ||
                    (this.Stored != null &&
                    this.Stored.Equals(input.Stored))
                ) && 
                (
                    this.Authority == input.Authority ||
                    (this.Authority != null &&
                    this.Authority.Equals(input.Authority))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Actor != null)
                    hashCode = hashCode * 59 + this.Actor.GetHashCode();
                if (this.Verb != null)
                    hashCode = hashCode * 59 + this.Verb.GetHashCode();
                if (this.ObjectActivity != null)
                    hashCode = hashCode * 59 + this.ObjectActivity.GetHashCode();
                if (this.ObjectAgentGroup != null)
                    hashCode = hashCode * 59 + this.ObjectAgentGroup.GetHashCode();
                if (this.ObjectStatementReference != null)
                    hashCode = hashCode * 59 + this.ObjectStatementReference.GetHashCode();
                if (this.ObjectSubStatement != null)
                    hashCode = hashCode * 59 + this.ObjectSubStatement.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Stored != null)
                    hashCode = hashCode * 59 + this.Stored.GetHashCode();
                if (this.Authority != null)
                    hashCode = hashCode * 59 + this.Authority.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
