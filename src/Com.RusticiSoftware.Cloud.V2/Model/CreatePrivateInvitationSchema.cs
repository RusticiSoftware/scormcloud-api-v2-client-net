/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CreatePrivateInvitationSchema
    /// </summary>
    [DataContract]
    public partial class CreatePrivateInvitationSchema :  IEquatable<CreatePrivateInvitationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePrivateInvitationSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePrivateInvitationSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePrivateInvitationSchema" /> class.
        /// </summary>
        /// <param name="CourseId">The id of the course for which to create an invitation. (required).</param>
        /// <param name="CreatingUserEmail">The email of the user who is creating the invitation. (required).</param>
        /// <param name="InvitationEmail">InvitationEmail (required).</param>
        /// <param name="PostBack">Specifies a URL for which to post activity and status data in real time as the course is completed.</param>
        /// <param name="ExpirationDate">The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time)..</param>
        /// <param name="Tags">Optional tags to be applied to this invitation..</param>
        public CreatePrivateInvitationSchema(string CourseId = default(string), string CreatingUserEmail = default(string), InvitationEmailSchema InvitationEmail = default(InvitationEmailSchema), PostBackSchema PostBack = default(PostBackSchema), DateTime? ExpirationDate = default(DateTime?), List<string> Tags = default(List<string>))
        {
            // to ensure "CourseId" is required (not null)
            if (CourseId == null)
            {
                throw new InvalidDataException("CourseId is a required property for CreatePrivateInvitationSchema and cannot be null");
            }
            else
            {
                this.CourseId = CourseId;
            }
            // to ensure "CreatingUserEmail" is required (not null)
            if (CreatingUserEmail == null)
            {
                throw new InvalidDataException("CreatingUserEmail is a required property for CreatePrivateInvitationSchema and cannot be null");
            }
            else
            {
                this.CreatingUserEmail = CreatingUserEmail;
            }
            // to ensure "InvitationEmail" is required (not null)
            if (InvitationEmail == null)
            {
                throw new InvalidDataException("InvitationEmail is a required property for CreatePrivateInvitationSchema and cannot be null");
            }
            else
            {
                this.InvitationEmail = InvitationEmail;
            }
            this.PostBack = PostBack;
            this.ExpirationDate = ExpirationDate;
            this.Tags = Tags;
        }
        
        /// <summary>
        /// The id of the course for which to create an invitation.
        /// </summary>
        /// <value>The id of the course for which to create an invitation.</value>
        [DataMember(Name="courseId", EmitDefaultValue=false)]
        public string CourseId { get; set; }
        /// <summary>
        /// The email of the user who is creating the invitation.
        /// </summary>
        /// <value>The email of the user who is creating the invitation.</value>
        [DataMember(Name="creatingUserEmail", EmitDefaultValue=false)]
        public string CreatingUserEmail { get; set; }
        /// <summary>
        /// Gets or Sets InvitationEmail
        /// </summary>
        [DataMember(Name="invitationEmail", EmitDefaultValue=false)]
        public InvitationEmailSchema InvitationEmail { get; set; }
        /// <summary>
        /// Specifies a URL for which to post activity and status data in real time as the course is completed
        /// </summary>
        /// <value>Specifies a URL for which to post activity and status data in real time as the course is completed</value>
        [DataMember(Name="postBack", EmitDefaultValue=false)]
        public PostBackSchema PostBack { get; set; }
        /// <summary>
        /// The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).
        /// </summary>
        /// <value>The date this invitation will expire and can not be launched (formatted yyyyMMddHHmmss in UTC time).</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// Optional tags to be applied to this invitation.
        /// </summary>
        /// <value>Optional tags to be applied to this invitation.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePrivateInvitationSchema {\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("  CreatingUserEmail: ").Append(CreatingUserEmail).Append("\n");
            sb.Append("  InvitationEmail: ").Append(InvitationEmail).Append("\n");
            sb.Append("  PostBack: ").Append(PostBack).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreatePrivateInvitationSchema);
        }

        /// <summary>
        /// Returns true if CreatePrivateInvitationSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of CreatePrivateInvitationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePrivateInvitationSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CourseId == other.CourseId ||
                    this.CourseId != null &&
                    this.CourseId.Equals(other.CourseId)
                ) && 
                (
                    this.CreatingUserEmail == other.CreatingUserEmail ||
                    this.CreatingUserEmail != null &&
                    this.CreatingUserEmail.Equals(other.CreatingUserEmail)
                ) && 
                (
                    this.InvitationEmail == other.InvitationEmail ||
                    this.InvitationEmail != null &&
                    this.InvitationEmail.Equals(other.InvitationEmail)
                ) && 
                (
                    this.PostBack == other.PostBack ||
                    this.PostBack != null &&
                    this.PostBack.Equals(other.PostBack)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CourseId != null)
                    hash = hash * 59 + this.CourseId.GetHashCode();
                if (this.CreatingUserEmail != null)
                    hash = hash * 59 + this.CreatingUserEmail.GetHashCode();
                if (this.InvitationEmail != null)
                    hash = hash * 59 + this.InvitationEmail.GetHashCode();
                if (this.PostBack != null)
                    hash = hash * 59 + this.PostBack.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
