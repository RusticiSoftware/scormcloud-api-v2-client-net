/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// LearnerPreferenceSchema
    /// </summary>
    [DataContract]
    public partial class LearnerPreferenceSchema :  IEquatable<LearnerPreferenceSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LearnerPreferenceSchema" /> class.
        /// </summary>
        /// <param name="audioLevel">audioLevel.</param>
        /// <param name="language">language.</param>
        /// <param name="deliverySpeed">deliverySpeed.</param>
        /// <param name="audioCaptioning">audioCaptioning.</param>
        public LearnerPreferenceSchema(double? audioLevel = default(double?), string language = default(string), double? deliverySpeed = default(double?), int? audioCaptioning = default(int?))
        {
            this.AudioLevel = audioLevel;
            this.Language = language;
            this.DeliverySpeed = deliverySpeed;
            this.AudioCaptioning = audioCaptioning;
        }
        
        /// <summary>
        /// Gets or Sets AudioLevel
        /// </summary>
        [DataMember(Name="audioLevel", EmitDefaultValue=false)]
        public double? AudioLevel { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets DeliverySpeed
        /// </summary>
        [DataMember(Name="deliverySpeed", EmitDefaultValue=false)]
        public double? DeliverySpeed { get; set; }

        /// <summary>
        /// Gets or Sets AudioCaptioning
        /// </summary>
        [DataMember(Name="audioCaptioning", EmitDefaultValue=false)]
        public int? AudioCaptioning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LearnerPreferenceSchema {\n");
            sb.Append("  AudioLevel: ").Append(AudioLevel).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  DeliverySpeed: ").Append(DeliverySpeed).Append("\n");
            sb.Append("  AudioCaptioning: ").Append(AudioCaptioning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LearnerPreferenceSchema);
        }

        /// <summary>
        /// Returns true if LearnerPreferenceSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of LearnerPreferenceSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LearnerPreferenceSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AudioLevel == input.AudioLevel ||
                    (this.AudioLevel != null &&
                    this.AudioLevel.Equals(input.AudioLevel))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.DeliverySpeed == input.DeliverySpeed ||
                    (this.DeliverySpeed != null &&
                    this.DeliverySpeed.Equals(input.DeliverySpeed))
                ) && 
                (
                    this.AudioCaptioning == input.AudioCaptioning ||
                    (this.AudioCaptioning != null &&
                    this.AudioCaptioning.Equals(input.AudioCaptioning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AudioLevel != null)
                    hashCode = hashCode * 59 + this.AudioLevel.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.DeliverySpeed != null)
                    hashCode = hashCode * 59 + this.DeliverySpeed.GetHashCode();
                if (this.AudioCaptioning != null)
                    hashCode = hashCode * 59 + this.AudioCaptioning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
