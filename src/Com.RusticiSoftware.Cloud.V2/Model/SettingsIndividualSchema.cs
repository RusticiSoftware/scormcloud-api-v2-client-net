/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// SettingsIndividualSchema
    /// </summary>
    [DataContract]
    public partial class SettingsIndividualSchema :  IEquatable<SettingsIndividualSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsIndividualSchema" /> class.
        /// </summary>
        /// <param name="settingId">settingId.</param>
        /// <param name="value">value.</param>
        /// <param name="_explicit">_explicit (default to false).</param>
        public SettingsIndividualSchema(string settingId = default(string), string value = default(string), bool? _explicit = false)
        {
            this.SettingId = settingId;
            this.Value = value;
            // use default value if no "_explicit" provided
            if (_explicit == null)
            {
                this.Explicit = false;
            }
            else
            {
                this.Explicit = _explicit;
            }
        }
        
        /// <summary>
        /// Gets or Sets SettingId
        /// </summary>
        [DataMember(Name="settingId", EmitDefaultValue=false)]
        public string SettingId { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Explicit
        /// </summary>
        [DataMember(Name="explicit", EmitDefaultValue=false)]
        public bool? Explicit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingsIndividualSchema {\n");
            sb.Append("  SettingId: ").Append(SettingId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Explicit: ").Append(Explicit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingsIndividualSchema);
        }

        /// <summary>
        /// Returns true if SettingsIndividualSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingsIndividualSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingsIndividualSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SettingId == input.SettingId ||
                    (this.SettingId != null &&
                    this.SettingId.Equals(input.SettingId))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Explicit == input.Explicit ||
                    (this.Explicit != null &&
                    this.Explicit.Equals(input.Explicit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettingId != null)
                    hashCode = hashCode * 59 + this.SettingId.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Explicit != null)
                    hashCode = hashCode * 59 + this.Explicit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
