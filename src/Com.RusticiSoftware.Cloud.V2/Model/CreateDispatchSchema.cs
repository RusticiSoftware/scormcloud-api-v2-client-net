/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// CreateDispatchSchema
    /// </summary>
    [DataContract]
    public partial class CreateDispatchSchema :  IEquatable<CreateDispatchSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDispatchSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDispatchSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDispatchSchema" /> class.
        /// </summary>
        /// <param name="DestinationId">Id of the destination this dispatch will belong to. (required).</param>
        /// <param name="CourseId">Id of the course to be dispatched. (required).</param>
        /// <param name="AllowNewRegistrations">If true, then new registrations can be created for this dispatch. (default to true).</param>
        /// <param name="Instanced">If true, then a new registration instance will be created if the client LMS doesn&#39;t provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id.  (default to true).</param>
        /// <param name="RegistrationCap">The maximum number of registrations that can be created for this dispatch, where &#39;0&#39; means &#39;unlimited registrations&#39;.  (default to 0).</param>
        /// <param name="ExpirationDate">The date after which this dispatch will be disabled as an ISO 8601 string, or not present for no expiration date. .</param>
        /// <param name="Enabled">If true, then this dispatch can be launched. (default to true).</param>
        /// <param name="Tags">The tags to associate with this Dispatch..</param>
        /// <param name="Email">SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. .</param>
        /// <param name="Notes">Any provided notes about this dispatch..</param>
        /// <param name="PostBack">The postback information for this Dispatch..</param>
        public CreateDispatchSchema(string DestinationId = default(string), string CourseId = default(string), bool? AllowNewRegistrations = true, bool? Instanced = true, int? RegistrationCap = 0, DateTime? ExpirationDate = default(DateTime?), bool? Enabled = true, List<string> Tags = default(List<string>), string Email = default(string), string Notes = default(string), PostBackSchema PostBack = default(PostBackSchema))
        {
            // to ensure "DestinationId" is required (not null)
            if (DestinationId == null)
            {
                throw new InvalidDataException("DestinationId is a required property for CreateDispatchSchema and cannot be null");
            }
            else
            {
                this.DestinationId = DestinationId;
            }
            // to ensure "CourseId" is required (not null)
            if (CourseId == null)
            {
                throw new InvalidDataException("CourseId is a required property for CreateDispatchSchema and cannot be null");
            }
            else
            {
                this.CourseId = CourseId;
            }
            // use default value if no "AllowNewRegistrations" provided
            if (AllowNewRegistrations == null)
            {
                this.AllowNewRegistrations = true;
            }
            else
            {
                this.AllowNewRegistrations = AllowNewRegistrations;
            }
            // use default value if no "Instanced" provided
            if (Instanced == null)
            {
                this.Instanced = true;
            }
            else
            {
                this.Instanced = Instanced;
            }
            // use default value if no "RegistrationCap" provided
            if (RegistrationCap == null)
            {
                this.RegistrationCap = 0;
            }
            else
            {
                this.RegistrationCap = RegistrationCap;
            }
            this.ExpirationDate = ExpirationDate;
            // use default value if no "Enabled" provided
            if (Enabled == null)
            {
                this.Enabled = true;
            }
            else
            {
                this.Enabled = Enabled;
            }
            this.Tags = Tags;
            this.Email = Email;
            this.Notes = Notes;
            this.PostBack = PostBack;
        }
        
        /// <summary>
        /// Id of the destination this dispatch will belong to.
        /// </summary>
        /// <value>Id of the destination this dispatch will belong to.</value>
        [DataMember(Name="destinationId", EmitDefaultValue=false)]
        public string DestinationId { get; set; }
        /// <summary>
        /// Id of the course to be dispatched.
        /// </summary>
        /// <value>Id of the course to be dispatched.</value>
        [DataMember(Name="courseId", EmitDefaultValue=false)]
        public string CourseId { get; set; }
        /// <summary>
        /// If true, then new registrations can be created for this dispatch.
        /// </summary>
        /// <value>If true, then new registrations can be created for this dispatch.</value>
        [DataMember(Name="allowNewRegistrations", EmitDefaultValue=false)]
        public bool? AllowNewRegistrations { get; set; }
        /// <summary>
        /// If true, then a new registration instance will be created if the client LMS doesn&#39;t provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id. 
        /// </summary>
        /// <value>If true, then a new registration instance will be created if the client LMS doesn&#39;t provide launch data for an existing one. Otherwise, the same instance will always be used for the given cmi.learner_id. </value>
        [DataMember(Name="instanced", EmitDefaultValue=false)]
        public bool? Instanced { get; set; }
        /// <summary>
        /// The maximum number of registrations that can be created for this dispatch, where &#39;0&#39; means &#39;unlimited registrations&#39;. 
        /// </summary>
        /// <value>The maximum number of registrations that can be created for this dispatch, where &#39;0&#39; means &#39;unlimited registrations&#39;. </value>
        [DataMember(Name="registrationCap", EmitDefaultValue=false)]
        public int? RegistrationCap { get; set; }
        /// <summary>
        /// The date after which this dispatch will be disabled as an ISO 8601 string, or not present for no expiration date. 
        /// </summary>
        /// <value>The date after which this dispatch will be disabled as an ISO 8601 string, or not present for no expiration date. </value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// If true, then this dispatch can be launched.
        /// </summary>
        /// <value>If true, then this dispatch can be launched.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// The tags to associate with this Dispatch.
        /// </summary>
        /// <value>The tags to associate with this Dispatch.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. 
        /// </summary>
        /// <value>SCORM Cloud user e-mail associated with this dispatch. If this is not provided, it will default to the owner of the Realm. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Any provided notes about this dispatch.
        /// </summary>
        /// <value>Any provided notes about this dispatch.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// The postback information for this Dispatch.
        /// </summary>
        /// <value>The postback information for this Dispatch.</value>
        [DataMember(Name="postBack", EmitDefaultValue=false)]
        public PostBackSchema PostBack { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDispatchSchema {\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  CourseId: ").Append(CourseId).Append("\n");
            sb.Append("  AllowNewRegistrations: ").Append(AllowNewRegistrations).Append("\n");
            sb.Append("  Instanced: ").Append(Instanced).Append("\n");
            sb.Append("  RegistrationCap: ").Append(RegistrationCap).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  PostBack: ").Append(PostBack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateDispatchSchema);
        }

        /// <summary>
        /// Returns true if CreateDispatchSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateDispatchSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDispatchSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DestinationId == other.DestinationId ||
                    this.DestinationId != null &&
                    this.DestinationId.Equals(other.DestinationId)
                ) && 
                (
                    this.CourseId == other.CourseId ||
                    this.CourseId != null &&
                    this.CourseId.Equals(other.CourseId)
                ) && 
                (
                    this.AllowNewRegistrations == other.AllowNewRegistrations ||
                    this.AllowNewRegistrations != null &&
                    this.AllowNewRegistrations.Equals(other.AllowNewRegistrations)
                ) && 
                (
                    this.Instanced == other.Instanced ||
                    this.Instanced != null &&
                    this.Instanced.Equals(other.Instanced)
                ) && 
                (
                    this.RegistrationCap == other.RegistrationCap ||
                    this.RegistrationCap != null &&
                    this.RegistrationCap.Equals(other.RegistrationCap)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.PostBack == other.PostBack ||
                    this.PostBack != null &&
                    this.PostBack.Equals(other.PostBack)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DestinationId != null)
                    hash = hash * 59 + this.DestinationId.GetHashCode();
                if (this.CourseId != null)
                    hash = hash * 59 + this.CourseId.GetHashCode();
                if (this.AllowNewRegistrations != null)
                    hash = hash * 59 + this.AllowNewRegistrations.GetHashCode();
                if (this.Instanced != null)
                    hash = hash * 59 + this.Instanced.GetHashCode();
                if (this.RegistrationCap != null)
                    hash = hash * 59 + this.RegistrationCap.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.PostBack != null)
                    hash = hash * 59 + this.PostBack.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
