/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// DispatchLti13InfoSchema
    /// </summary>
    [DataContract]
    public partial class DispatchLti13InfoSchema :  IEquatable<DispatchLti13InfoSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DispatchLti13InfoSchema" /> class.
        /// </summary>
        /// <param name="targetLinkUri">Endpoint executed at the end of the OIDC authentication flow..</param>
        public DispatchLti13InfoSchema(string targetLinkUri = default(string))
        {
            this.TargetLinkUri = targetLinkUri;
        }
        
        /// <summary>
        /// Endpoint executed at the end of the OIDC authentication flow.
        /// </summary>
        /// <value>Endpoint executed at the end of the OIDC authentication flow.</value>
        [DataMember(Name="targetLinkUri", EmitDefaultValue=false)]
        public string TargetLinkUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DispatchLti13InfoSchema {\n");
            sb.Append("  TargetLinkUri: ").Append(TargetLinkUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DispatchLti13InfoSchema);
        }

        /// <summary>
        /// Returns true if DispatchLti13InfoSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of DispatchLti13InfoSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DispatchLti13InfoSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetLinkUri == input.TargetLinkUri ||
                    (this.TargetLinkUri != null &&
                    this.TargetLinkUri.Equals(input.TargetLinkUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetLinkUri != null)
                    hashCode = hashCode * 59 + this.TargetLinkUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
