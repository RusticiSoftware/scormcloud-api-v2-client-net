/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// ObjectiveSchema
    /// </summary>
    [DataContract]
    public partial class ObjectiveSchema :  IEquatable<ObjectiveSchema>, IValidatableObject
    {
        /// <summary>
        /// Defines ObjectiveCompletion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectiveCompletionEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,
            
            /// <summary>
            /// Enum INCOMPLETE for value: INCOMPLETE
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE = 3
        }

        /// <summary>
        /// Gets or Sets ObjectiveCompletion
        /// </summary>
        [DataMember(Name="objectiveCompletion", EmitDefaultValue=false)]
        public ObjectiveCompletionEnum? ObjectiveCompletion { get; set; }
        /// <summary>
        /// Defines ObjectiveSuccess
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectiveSuccessEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 2,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3
        }

        /// <summary>
        /// Gets or Sets ObjectiveSuccess
        /// </summary>
        [DataMember(Name="objectiveSuccess", EmitDefaultValue=false)]
        public ObjectiveSuccessEnum? ObjectiveSuccess { get; set; }
        /// <summary>
        /// Defines PreviousObjectiveSuccess
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreviousObjectiveSuccessEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 1,
            
            /// <summary>
            /// Enum PASSED for value: PASSED
            /// </summary>
            [EnumMember(Value = "PASSED")]
            PASSED = 2,
            
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3
        }

        /// <summary>
        /// Gets or Sets PreviousObjectiveSuccess
        /// </summary>
        [DataMember(Name="previousObjectiveSuccess", EmitDefaultValue=false)]
        public PreviousObjectiveSuccessEnum? PreviousObjectiveSuccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectiveSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="primary">primary.</param>
        /// <param name="score">score.</param>
        /// <param name="scoreMax">scoreMax.</param>
        /// <param name="scoreMin">scoreMin.</param>
        /// <param name="scoreRaw">scoreRaw.</param>
        /// <param name="previousScoreScaled">previousScoreScaled.</param>
        /// <param name="firstScoreScaled">firstScoreScaled.</param>
        /// <param name="progressMeasure">progressMeasure.</param>
        /// <param name="firstSuccessTimeStamp">firstSuccessTimeStamp.</param>
        /// <param name="objectiveCompletion">objectiveCompletion (default to ObjectiveCompletionEnum.UNKNOWN).</param>
        /// <param name="objectiveSuccess">objectiveSuccess (default to ObjectiveSuccessEnum.UNKNOWN).</param>
        /// <param name="previousObjectiveSuccess">previousObjectiveSuccess (default to PreviousObjectiveSuccessEnum.UNKNOWN).</param>
        public ObjectiveSchema(string id = default(string), bool? primary = default(bool?), ScoreSchema score = default(ScoreSchema), double? scoreMax = default(double?), double? scoreMin = default(double?), double? scoreRaw = default(double?), double? previousScoreScaled = default(double?), double? firstScoreScaled = default(double?), double? progressMeasure = default(double?), string firstSuccessTimeStamp = default(string), ObjectiveCompletionEnum? objectiveCompletion = ObjectiveCompletionEnum.UNKNOWN, ObjectiveSuccessEnum? objectiveSuccess = ObjectiveSuccessEnum.UNKNOWN, PreviousObjectiveSuccessEnum? previousObjectiveSuccess = PreviousObjectiveSuccessEnum.UNKNOWN)
        {
            this.Id = id;
            this.Primary = primary;
            this.Score = score;
            this.ScoreMax = scoreMax;
            this.ScoreMin = scoreMin;
            this.ScoreRaw = scoreRaw;
            this.PreviousScoreScaled = previousScoreScaled;
            this.FirstScoreScaled = firstScoreScaled;
            this.ProgressMeasure = progressMeasure;
            this.FirstSuccessTimeStamp = firstSuccessTimeStamp;
            // use default value if no "objectiveCompletion" provided
            if (objectiveCompletion == null)
            {
                this.ObjectiveCompletion = ObjectiveCompletionEnum.UNKNOWN;
            }
            else
            {
                this.ObjectiveCompletion = objectiveCompletion;
            }
            // use default value if no "objectiveSuccess" provided
            if (objectiveSuccess == null)
            {
                this.ObjectiveSuccess = ObjectiveSuccessEnum.UNKNOWN;
            }
            else
            {
                this.ObjectiveSuccess = objectiveSuccess;
            }
            // use default value if no "previousObjectiveSuccess" provided
            if (previousObjectiveSuccess == null)
            {
                this.PreviousObjectiveSuccess = PreviousObjectiveSuccessEnum.UNKNOWN;
            }
            else
            {
                this.PreviousObjectiveSuccess = previousObjectiveSuccess;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Primary
        /// </summary>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }

        /// <summary>
        /// Gets or Sets ScoreMax
        /// </summary>
        [DataMember(Name="scoreMax", EmitDefaultValue=false)]
        public double? ScoreMax { get; set; }

        /// <summary>
        /// Gets or Sets ScoreMin
        /// </summary>
        [DataMember(Name="scoreMin", EmitDefaultValue=false)]
        public double? ScoreMin { get; set; }

        /// <summary>
        /// Gets or Sets ScoreRaw
        /// </summary>
        [DataMember(Name="scoreRaw", EmitDefaultValue=false)]
        public double? ScoreRaw { get; set; }

        /// <summary>
        /// Gets or Sets PreviousScoreScaled
        /// </summary>
        [DataMember(Name="previousScoreScaled", EmitDefaultValue=false)]
        public double? PreviousScoreScaled { get; set; }

        /// <summary>
        /// Gets or Sets FirstScoreScaled
        /// </summary>
        [DataMember(Name="firstScoreScaled", EmitDefaultValue=false)]
        public double? FirstScoreScaled { get; set; }

        /// <summary>
        /// Gets or Sets ProgressMeasure
        /// </summary>
        [DataMember(Name="progressMeasure", EmitDefaultValue=false)]
        public double? ProgressMeasure { get; set; }

        /// <summary>
        /// Gets or Sets FirstSuccessTimeStamp
        /// </summary>
        [DataMember(Name="firstSuccessTimeStamp", EmitDefaultValue=false)]
        public string FirstSuccessTimeStamp { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectiveSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ScoreMax: ").Append(ScoreMax).Append("\n");
            sb.Append("  ScoreMin: ").Append(ScoreMin).Append("\n");
            sb.Append("  ScoreRaw: ").Append(ScoreRaw).Append("\n");
            sb.Append("  PreviousScoreScaled: ").Append(PreviousScoreScaled).Append("\n");
            sb.Append("  FirstScoreScaled: ").Append(FirstScoreScaled).Append("\n");
            sb.Append("  ProgressMeasure: ").Append(ProgressMeasure).Append("\n");
            sb.Append("  FirstSuccessTimeStamp: ").Append(FirstSuccessTimeStamp).Append("\n");
            sb.Append("  ObjectiveCompletion: ").Append(ObjectiveCompletion).Append("\n");
            sb.Append("  ObjectiveSuccess: ").Append(ObjectiveSuccess).Append("\n");
            sb.Append("  PreviousObjectiveSuccess: ").Append(PreviousObjectiveSuccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectiveSchema);
        }

        /// <summary>
        /// Returns true if ObjectiveSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectiveSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectiveSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.ScoreMax == input.ScoreMax ||
                    (this.ScoreMax != null &&
                    this.ScoreMax.Equals(input.ScoreMax))
                ) && 
                (
                    this.ScoreMin == input.ScoreMin ||
                    (this.ScoreMin != null &&
                    this.ScoreMin.Equals(input.ScoreMin))
                ) && 
                (
                    this.ScoreRaw == input.ScoreRaw ||
                    (this.ScoreRaw != null &&
                    this.ScoreRaw.Equals(input.ScoreRaw))
                ) && 
                (
                    this.PreviousScoreScaled == input.PreviousScoreScaled ||
                    (this.PreviousScoreScaled != null &&
                    this.PreviousScoreScaled.Equals(input.PreviousScoreScaled))
                ) && 
                (
                    this.FirstScoreScaled == input.FirstScoreScaled ||
                    (this.FirstScoreScaled != null &&
                    this.FirstScoreScaled.Equals(input.FirstScoreScaled))
                ) && 
                (
                    this.ProgressMeasure == input.ProgressMeasure ||
                    (this.ProgressMeasure != null &&
                    this.ProgressMeasure.Equals(input.ProgressMeasure))
                ) && 
                (
                    this.FirstSuccessTimeStamp == input.FirstSuccessTimeStamp ||
                    (this.FirstSuccessTimeStamp != null &&
                    this.FirstSuccessTimeStamp.Equals(input.FirstSuccessTimeStamp))
                ) && 
                (
                    this.ObjectiveCompletion == input.ObjectiveCompletion ||
                    (this.ObjectiveCompletion != null &&
                    this.ObjectiveCompletion.Equals(input.ObjectiveCompletion))
                ) && 
                (
                    this.ObjectiveSuccess == input.ObjectiveSuccess ||
                    (this.ObjectiveSuccess != null &&
                    this.ObjectiveSuccess.Equals(input.ObjectiveSuccess))
                ) && 
                (
                    this.PreviousObjectiveSuccess == input.PreviousObjectiveSuccess ||
                    (this.PreviousObjectiveSuccess != null &&
                    this.PreviousObjectiveSuccess.Equals(input.PreviousObjectiveSuccess))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.ScoreMax != null)
                    hashCode = hashCode * 59 + this.ScoreMax.GetHashCode();
                if (this.ScoreMin != null)
                    hashCode = hashCode * 59 + this.ScoreMin.GetHashCode();
                if (this.ScoreRaw != null)
                    hashCode = hashCode * 59 + this.ScoreRaw.GetHashCode();
                if (this.PreviousScoreScaled != null)
                    hashCode = hashCode * 59 + this.PreviousScoreScaled.GetHashCode();
                if (this.FirstScoreScaled != null)
                    hashCode = hashCode * 59 + this.FirstScoreScaled.GetHashCode();
                if (this.ProgressMeasure != null)
                    hashCode = hashCode * 59 + this.ProgressMeasure.GetHashCode();
                if (this.FirstSuccessTimeStamp != null)
                    hashCode = hashCode * 59 + this.FirstSuccessTimeStamp.GetHashCode();
                if (this.ObjectiveCompletion != null)
                    hashCode = hashCode * 59 + this.ObjectiveCompletion.GetHashCode();
                if (this.ObjectiveSuccess != null)
                    hashCode = hashCode * 59 + this.ObjectiveSuccess.GetHashCode();
                if (this.PreviousObjectiveSuccess != null)
                    hashCode = hashCode * 59 + this.PreviousObjectiveSuccess.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
