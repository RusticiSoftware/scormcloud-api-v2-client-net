/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0 beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RegistrationSchema
    /// </summary>
    [DataContract]
    public partial class RegistrationSchema :  IEquatable<RegistrationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationSchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Instance">Instance.</param>
        /// <param name="XapiRegistrationId">xAPI registration id associated with this registration.</param>
        /// <param name="DispatchId">Dispatch ID for this registration, if applicable.</param>
        /// <param name="Updated">Updated.</param>
        /// <param name="RegistrationCompletion">RegistrationCompletion.</param>
        /// <param name="RegistrationCompletionAmount">RegistrationCompletionAmount.</param>
        /// <param name="RegistrationSuccess">RegistrationSuccess.</param>
        /// <param name="Score">Score.</param>
        /// <param name="TotalSecondsTracked">TotalSecondsTracked.</param>
        /// <param name="FirstAccessDate">FirstAccessDate.</param>
        /// <param name="LastAccessDate">LastAccessDate.</param>
        /// <param name="CompletedDate">CompletedDate.</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="Course">Course.</param>
        /// <param name="Learner">Learner.</param>
        /// <param name="Tags">Tags.</param>
        /// <param name="GlobalObjectives">GlobalObjectives.</param>
        /// <param name="SharedData">SharedData.</param>
        /// <param name="SuspendedActivityId">SuspendedActivityId.</param>
        /// <param name="ActivityDetails">ActivityDetails.</param>
        public RegistrationSchema(string Id = default(string), int? Instance = default(int?), string XapiRegistrationId = default(string), string DispatchId = default(string), DateTime? Updated = default(DateTime?), RegistrationCompletion RegistrationCompletion = default(RegistrationCompletion), double? RegistrationCompletionAmount = default(double?), RegistrationSuccess RegistrationSuccess = default(RegistrationSuccess), ScoreSchema Score = default(ScoreSchema), double? TotalSecondsTracked = default(double?), DateTime? FirstAccessDate = default(DateTime?), DateTime? LastAccessDate = default(DateTime?), DateTime? CompletedDate = default(DateTime?), DateTime? CreatedDate = default(DateTime?), CourseReferenceSchema Course = default(CourseReferenceSchema), LearnerSchema Learner = default(LearnerSchema), List<string> Tags = default(List<string>), List<ObjectiveSchema> GlobalObjectives = default(List<ObjectiveSchema>), List<SharedDataEntrySchema> SharedData = default(List<SharedDataEntrySchema>), string SuspendedActivityId = default(string), ActivityResultSchema ActivityDetails = default(ActivityResultSchema))
        {
            this.Id = Id;
            this.Instance = Instance;
            this.XapiRegistrationId = XapiRegistrationId;
            this.DispatchId = DispatchId;
            this.Updated = Updated;
            this.RegistrationCompletion = RegistrationCompletion;
            this.RegistrationCompletionAmount = RegistrationCompletionAmount;
            this.RegistrationSuccess = RegistrationSuccess;
            this.Score = Score;
            this.TotalSecondsTracked = TotalSecondsTracked;
            this.FirstAccessDate = FirstAccessDate;
            this.LastAccessDate = LastAccessDate;
            this.CompletedDate = CompletedDate;
            this.CreatedDate = CreatedDate;
            this.Course = Course;
            this.Learner = Learner;
            this.Tags = Tags;
            this.GlobalObjectives = GlobalObjectives;
            this.SharedData = SharedData;
            this.SuspendedActivityId = SuspendedActivityId;
            this.ActivityDetails = ActivityDetails;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public int? Instance { get; set; }
        /// <summary>
        /// xAPI registration id associated with this registration
        /// </summary>
        /// <value>xAPI registration id associated with this registration</value>
        [DataMember(Name="xapiRegistrationId", EmitDefaultValue=false)]
        public string XapiRegistrationId { get; set; }
        /// <summary>
        /// Dispatch ID for this registration, if applicable
        /// </summary>
        /// <value>Dispatch ID for this registration, if applicable</value>
        [DataMember(Name="dispatchId", EmitDefaultValue=false)]
        public string DispatchId { get; set; }
        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationCompletion
        /// </summary>
        [DataMember(Name="registrationCompletion", EmitDefaultValue=false)]
        public RegistrationCompletion RegistrationCompletion { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationCompletionAmount
        /// </summary>
        [DataMember(Name="registrationCompletionAmount", EmitDefaultValue=false)]
        public double? RegistrationCompletionAmount { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationSuccess
        /// </summary>
        [DataMember(Name="registrationSuccess", EmitDefaultValue=false)]
        public RegistrationSuccess RegistrationSuccess { get; set; }
        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }
        /// <summary>
        /// Gets or Sets TotalSecondsTracked
        /// </summary>
        [DataMember(Name="totalSecondsTracked", EmitDefaultValue=false)]
        public double? TotalSecondsTracked { get; set; }
        /// <summary>
        /// Gets or Sets FirstAccessDate
        /// </summary>
        [DataMember(Name="firstAccessDate", EmitDefaultValue=false)]
        public DateTime? FirstAccessDate { get; set; }
        /// <summary>
        /// Gets or Sets LastAccessDate
        /// </summary>
        [DataMember(Name="lastAccessDate", EmitDefaultValue=false)]
        public DateTime? LastAccessDate { get; set; }
        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public DateTime? CompletedDate { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public CourseReferenceSchema Course { get; set; }
        /// <summary>
        /// Gets or Sets Learner
        /// </summary>
        [DataMember(Name="learner", EmitDefaultValue=false)]
        public LearnerSchema Learner { get; set; }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// Gets or Sets GlobalObjectives
        /// </summary>
        [DataMember(Name="globalObjectives", EmitDefaultValue=false)]
        public List<ObjectiveSchema> GlobalObjectives { get; set; }
        /// <summary>
        /// Gets or Sets SharedData
        /// </summary>
        [DataMember(Name="sharedData", EmitDefaultValue=false)]
        public List<SharedDataEntrySchema> SharedData { get; set; }
        /// <summary>
        /// Gets or Sets SuspendedActivityId
        /// </summary>
        [DataMember(Name="suspendedActivityId", EmitDefaultValue=false)]
        public string SuspendedActivityId { get; set; }
        /// <summary>
        /// Gets or Sets ActivityDetails
        /// </summary>
        [DataMember(Name="activityDetails", EmitDefaultValue=false)]
        public ActivityResultSchema ActivityDetails { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  XapiRegistrationId: ").Append(XapiRegistrationId).Append("\n");
            sb.Append("  DispatchId: ").Append(DispatchId).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  RegistrationCompletion: ").Append(RegistrationCompletion).Append("\n");
            sb.Append("  RegistrationCompletionAmount: ").Append(RegistrationCompletionAmount).Append("\n");
            sb.Append("  RegistrationSuccess: ").Append(RegistrationSuccess).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TotalSecondsTracked: ").Append(TotalSecondsTracked).Append("\n");
            sb.Append("  FirstAccessDate: ").Append(FirstAccessDate).Append("\n");
            sb.Append("  LastAccessDate: ").Append(LastAccessDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Learner: ").Append(Learner).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  GlobalObjectives: ").Append(GlobalObjectives).Append("\n");
            sb.Append("  SharedData: ").Append(SharedData).Append("\n");
            sb.Append("  SuspendedActivityId: ").Append(SuspendedActivityId).Append("\n");
            sb.Append("  ActivityDetails: ").Append(ActivityDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RegistrationSchema);
        }

        /// <summary>
        /// Returns true if RegistrationSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistrationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Instance == other.Instance ||
                    this.Instance != null &&
                    this.Instance.Equals(other.Instance)
                ) && 
                (
                    this.XapiRegistrationId == other.XapiRegistrationId ||
                    this.XapiRegistrationId != null &&
                    this.XapiRegistrationId.Equals(other.XapiRegistrationId)
                ) && 
                (
                    this.DispatchId == other.DispatchId ||
                    this.DispatchId != null &&
                    this.DispatchId.Equals(other.DispatchId)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.Equals(other.Updated)
                ) && 
                (
                    this.RegistrationCompletion == other.RegistrationCompletion ||
                    this.RegistrationCompletion != null &&
                    this.RegistrationCompletion.Equals(other.RegistrationCompletion)
                ) && 
                (
                    this.RegistrationCompletionAmount == other.RegistrationCompletionAmount ||
                    this.RegistrationCompletionAmount != null &&
                    this.RegistrationCompletionAmount.Equals(other.RegistrationCompletionAmount)
                ) && 
                (
                    this.RegistrationSuccess == other.RegistrationSuccess ||
                    this.RegistrationSuccess != null &&
                    this.RegistrationSuccess.Equals(other.RegistrationSuccess)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                ) && 
                (
                    this.TotalSecondsTracked == other.TotalSecondsTracked ||
                    this.TotalSecondsTracked != null &&
                    this.TotalSecondsTracked.Equals(other.TotalSecondsTracked)
                ) && 
                (
                    this.FirstAccessDate == other.FirstAccessDate ||
                    this.FirstAccessDate != null &&
                    this.FirstAccessDate.Equals(other.FirstAccessDate)
                ) && 
                (
                    this.LastAccessDate == other.LastAccessDate ||
                    this.LastAccessDate != null &&
                    this.LastAccessDate.Equals(other.LastAccessDate)
                ) && 
                (
                    this.CompletedDate == other.CompletedDate ||
                    this.CompletedDate != null &&
                    this.CompletedDate.Equals(other.CompletedDate)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Course == other.Course ||
                    this.Course != null &&
                    this.Course.Equals(other.Course)
                ) && 
                (
                    this.Learner == other.Learner ||
                    this.Learner != null &&
                    this.Learner.Equals(other.Learner)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.GlobalObjectives == other.GlobalObjectives ||
                    this.GlobalObjectives != null &&
                    this.GlobalObjectives.SequenceEqual(other.GlobalObjectives)
                ) && 
                (
                    this.SharedData == other.SharedData ||
                    this.SharedData != null &&
                    this.SharedData.SequenceEqual(other.SharedData)
                ) && 
                (
                    this.SuspendedActivityId == other.SuspendedActivityId ||
                    this.SuspendedActivityId != null &&
                    this.SuspendedActivityId.Equals(other.SuspendedActivityId)
                ) && 
                (
                    this.ActivityDetails == other.ActivityDetails ||
                    this.ActivityDetails != null &&
                    this.ActivityDetails.Equals(other.ActivityDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Instance != null)
                    hash = hash * 59 + this.Instance.GetHashCode();
                if (this.XapiRegistrationId != null)
                    hash = hash * 59 + this.XapiRegistrationId.GetHashCode();
                if (this.DispatchId != null)
                    hash = hash * 59 + this.DispatchId.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                if (this.RegistrationCompletion != null)
                    hash = hash * 59 + this.RegistrationCompletion.GetHashCode();
                if (this.RegistrationCompletionAmount != null)
                    hash = hash * 59 + this.RegistrationCompletionAmount.GetHashCode();
                if (this.RegistrationSuccess != null)
                    hash = hash * 59 + this.RegistrationSuccess.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                if (this.TotalSecondsTracked != null)
                    hash = hash * 59 + this.TotalSecondsTracked.GetHashCode();
                if (this.FirstAccessDate != null)
                    hash = hash * 59 + this.FirstAccessDate.GetHashCode();
                if (this.LastAccessDate != null)
                    hash = hash * 59 + this.LastAccessDate.GetHashCode();
                if (this.CompletedDate != null)
                    hash = hash * 59 + this.CompletedDate.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.Course != null)
                    hash = hash * 59 + this.Course.GetHashCode();
                if (this.Learner != null)
                    hash = hash * 59 + this.Learner.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.GlobalObjectives != null)
                    hash = hash * 59 + this.GlobalObjectives.GetHashCode();
                if (this.SharedData != null)
                    hash = hash * 59 + this.SharedData.GetHashCode();
                if (this.SuspendedActivityId != null)
                    hash = hash * 59 + this.SuspendedActivityId.GetHashCode();
                if (this.ActivityDetails != null)
                    hash = hash * 59 + this.ActivityDetails.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
