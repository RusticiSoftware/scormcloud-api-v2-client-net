/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// RegistrationSchema
    /// </summary>
    [DataContract]
    public partial class RegistrationSchema :  IEquatable<RegistrationSchema>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets RegistrationCompletion
        /// </summary>
        [DataMember(Name="registrationCompletion", EmitDefaultValue=false)]
        public RegistrationCompletion? RegistrationCompletion { get; set; }
        /// <summary>
        /// Gets or Sets RegistrationSuccess
        /// </summary>
        [DataMember(Name="registrationSuccess", EmitDefaultValue=false)]
        public RegistrationSuccess? RegistrationSuccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="instance">instance.</param>
        /// <param name="xapiRegistrationId">xAPI registration id associated with this registration.</param>
        /// <param name="dispatchId">Dispatch ID for this registration, if applicable.</param>
        /// <param name="updated">updated.</param>
        /// <param name="registrationCompletion">registrationCompletion.</param>
        /// <param name="registrationCompletionAmount">registrationCompletionAmount.</param>
        /// <param name="registrationSuccess">registrationSuccess.</param>
        /// <param name="score">score.</param>
        /// <param name="totalSecondsTracked">totalSecondsTracked.</param>
        /// <param name="firstAccessDate">firstAccessDate.</param>
        /// <param name="lastAccessDate">lastAccessDate.</param>
        /// <param name="completedDate">completedDate.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="course">course.</param>
        /// <param name="learner">learner.</param>
        /// <param name="tags">tags.</param>
        /// <param name="globalObjectives">globalObjectives.</param>
        /// <param name="sharedData">sharedData.</param>
        /// <param name="suspendedActivityId">suspendedActivityId.</param>
        /// <param name="activityDetails">activityDetails.</param>
        public RegistrationSchema(string id = default(string), int? instance = default(int?), string xapiRegistrationId = default(string), string dispatchId = default(string), DateTime? updated = default(DateTime?), RegistrationCompletion? registrationCompletion = default(RegistrationCompletion?), double? registrationCompletionAmount = default(double?), RegistrationSuccess? registrationSuccess = default(RegistrationSuccess?), ScoreSchema score = default(ScoreSchema), double? totalSecondsTracked = default(double?), DateTime? firstAccessDate = default(DateTime?), DateTime? lastAccessDate = default(DateTime?), DateTime? completedDate = default(DateTime?), DateTime? createdDate = default(DateTime?), CourseReferenceSchema course = default(CourseReferenceSchema), LearnerSchema learner = default(LearnerSchema), List<string> tags = default(List<string>), List<ObjectiveSchema> globalObjectives = default(List<ObjectiveSchema>), List<SharedDataEntrySchema> sharedData = default(List<SharedDataEntrySchema>), string suspendedActivityId = default(string), ActivityResultSchema activityDetails = default(ActivityResultSchema))
        {
            this.Id = id;
            this.Instance = instance;
            this.XapiRegistrationId = xapiRegistrationId;
            this.DispatchId = dispatchId;
            this.Updated = updated;
            this.RegistrationCompletion = registrationCompletion;
            this.RegistrationCompletionAmount = registrationCompletionAmount;
            this.RegistrationSuccess = registrationSuccess;
            this.Score = score;
            this.TotalSecondsTracked = totalSecondsTracked;
            this.FirstAccessDate = firstAccessDate;
            this.LastAccessDate = lastAccessDate;
            this.CompletedDate = completedDate;
            this.CreatedDate = createdDate;
            this.Course = course;
            this.Learner = learner;
            this.Tags = tags;
            this.GlobalObjectives = globalObjectives;
            this.SharedData = sharedData;
            this.SuspendedActivityId = suspendedActivityId;
            this.ActivityDetails = activityDetails;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public int? Instance { get; set; }

        /// <summary>
        /// xAPI registration id associated with this registration
        /// </summary>
        /// <value>xAPI registration id associated with this registration</value>
        [DataMember(Name="xapiRegistrationId", EmitDefaultValue=false)]
        public string XapiRegistrationId { get; set; }

        /// <summary>
        /// Dispatch ID for this registration, if applicable
        /// </summary>
        /// <value>Dispatch ID for this registration, if applicable</value>
        [DataMember(Name="dispatchId", EmitDefaultValue=false)]
        public string DispatchId { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; set; }


        /// <summary>
        /// Gets or Sets RegistrationCompletionAmount
        /// </summary>
        [DataMember(Name="registrationCompletionAmount", EmitDefaultValue=false)]
        public double? RegistrationCompletionAmount { get; set; }


        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public ScoreSchema Score { get; set; }

        /// <summary>
        /// Gets or Sets TotalSecondsTracked
        /// </summary>
        [DataMember(Name="totalSecondsTracked", EmitDefaultValue=false)]
        public double? TotalSecondsTracked { get; set; }

        /// <summary>
        /// Gets or Sets FirstAccessDate
        /// </summary>
        [DataMember(Name="firstAccessDate", EmitDefaultValue=false)]
        public DateTime? FirstAccessDate { get; set; }

        /// <summary>
        /// Gets or Sets LastAccessDate
        /// </summary>
        [DataMember(Name="lastAccessDate", EmitDefaultValue=false)]
        public DateTime? LastAccessDate { get; set; }

        /// <summary>
        /// Gets or Sets CompletedDate
        /// </summary>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name="course", EmitDefaultValue=false)]
        public CourseReferenceSchema Course { get; set; }

        /// <summary>
        /// Gets or Sets Learner
        /// </summary>
        [DataMember(Name="learner", EmitDefaultValue=false)]
        public LearnerSchema Learner { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets GlobalObjectives
        /// </summary>
        [DataMember(Name="globalObjectives", EmitDefaultValue=false)]
        public List<ObjectiveSchema> GlobalObjectives { get; set; }

        /// <summary>
        /// Gets or Sets SharedData
        /// </summary>
        [DataMember(Name="sharedData", EmitDefaultValue=false)]
        public List<SharedDataEntrySchema> SharedData { get; set; }

        /// <summary>
        /// Gets or Sets SuspendedActivityId
        /// </summary>
        [DataMember(Name="suspendedActivityId", EmitDefaultValue=false)]
        public string SuspendedActivityId { get; set; }

        /// <summary>
        /// Gets or Sets ActivityDetails
        /// </summary>
        [DataMember(Name="activityDetails", EmitDefaultValue=false)]
        public ActivityResultSchema ActivityDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  XapiRegistrationId: ").Append(XapiRegistrationId).Append("\n");
            sb.Append("  DispatchId: ").Append(DispatchId).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  RegistrationCompletion: ").Append(RegistrationCompletion).Append("\n");
            sb.Append("  RegistrationCompletionAmount: ").Append(RegistrationCompletionAmount).Append("\n");
            sb.Append("  RegistrationSuccess: ").Append(RegistrationSuccess).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  TotalSecondsTracked: ").Append(TotalSecondsTracked).Append("\n");
            sb.Append("  FirstAccessDate: ").Append(FirstAccessDate).Append("\n");
            sb.Append("  LastAccessDate: ").Append(LastAccessDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Learner: ").Append(Learner).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  GlobalObjectives: ").Append(GlobalObjectives).Append("\n");
            sb.Append("  SharedData: ").Append(SharedData).Append("\n");
            sb.Append("  SuspendedActivityId: ").Append(SuspendedActivityId).Append("\n");
            sb.Append("  ActivityDetails: ").Append(ActivityDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationSchema);
        }

        /// <summary>
        /// Returns true if RegistrationSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Instance == input.Instance ||
                    (this.Instance != null &&
                    this.Instance.Equals(input.Instance))
                ) && 
                (
                    this.XapiRegistrationId == input.XapiRegistrationId ||
                    (this.XapiRegistrationId != null &&
                    this.XapiRegistrationId.Equals(input.XapiRegistrationId))
                ) && 
                (
                    this.DispatchId == input.DispatchId ||
                    (this.DispatchId != null &&
                    this.DispatchId.Equals(input.DispatchId))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.RegistrationCompletion == input.RegistrationCompletion ||
                    (this.RegistrationCompletion != null &&
                    this.RegistrationCompletion.Equals(input.RegistrationCompletion))
                ) && 
                (
                    this.RegistrationCompletionAmount == input.RegistrationCompletionAmount ||
                    (this.RegistrationCompletionAmount != null &&
                    this.RegistrationCompletionAmount.Equals(input.RegistrationCompletionAmount))
                ) && 
                (
                    this.RegistrationSuccess == input.RegistrationSuccess ||
                    (this.RegistrationSuccess != null &&
                    this.RegistrationSuccess.Equals(input.RegistrationSuccess))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.TotalSecondsTracked == input.TotalSecondsTracked ||
                    (this.TotalSecondsTracked != null &&
                    this.TotalSecondsTracked.Equals(input.TotalSecondsTracked))
                ) && 
                (
                    this.FirstAccessDate == input.FirstAccessDate ||
                    (this.FirstAccessDate != null &&
                    this.FirstAccessDate.Equals(input.FirstAccessDate))
                ) && 
                (
                    this.LastAccessDate == input.LastAccessDate ||
                    (this.LastAccessDate != null &&
                    this.LastAccessDate.Equals(input.LastAccessDate))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Course == input.Course ||
                    (this.Course != null &&
                    this.Course.Equals(input.Course))
                ) && 
                (
                    this.Learner == input.Learner ||
                    (this.Learner != null &&
                    this.Learner.Equals(input.Learner))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.GlobalObjectives == input.GlobalObjectives ||
                    this.GlobalObjectives != null &&
                    this.GlobalObjectives.SequenceEqual(input.GlobalObjectives)
                ) && 
                (
                    this.SharedData == input.SharedData ||
                    this.SharedData != null &&
                    this.SharedData.SequenceEqual(input.SharedData)
                ) && 
                (
                    this.SuspendedActivityId == input.SuspendedActivityId ||
                    (this.SuspendedActivityId != null &&
                    this.SuspendedActivityId.Equals(input.SuspendedActivityId))
                ) && 
                (
                    this.ActivityDetails == input.ActivityDetails ||
                    (this.ActivityDetails != null &&
                    this.ActivityDetails.Equals(input.ActivityDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Instance != null)
                    hashCode = hashCode * 59 + this.Instance.GetHashCode();
                if (this.XapiRegistrationId != null)
                    hashCode = hashCode * 59 + this.XapiRegistrationId.GetHashCode();
                if (this.DispatchId != null)
                    hashCode = hashCode * 59 + this.DispatchId.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.RegistrationCompletion != null)
                    hashCode = hashCode * 59 + this.RegistrationCompletion.GetHashCode();
                if (this.RegistrationCompletionAmount != null)
                    hashCode = hashCode * 59 + this.RegistrationCompletionAmount.GetHashCode();
                if (this.RegistrationSuccess != null)
                    hashCode = hashCode * 59 + this.RegistrationSuccess.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.TotalSecondsTracked != null)
                    hashCode = hashCode * 59 + this.TotalSecondsTracked.GetHashCode();
                if (this.FirstAccessDate != null)
                    hashCode = hashCode * 59 + this.FirstAccessDate.GetHashCode();
                if (this.LastAccessDate != null)
                    hashCode = hashCode * 59 + this.LastAccessDate.GetHashCode();
                if (this.CompletedDate != null)
                    hashCode = hashCode * 59 + this.CompletedDate.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Course != null)
                    hashCode = hashCode * 59 + this.Course.GetHashCode();
                if (this.Learner != null)
                    hashCode = hashCode * 59 + this.Learner.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.GlobalObjectives != null)
                    hashCode = hashCode * 59 + this.GlobalObjectives.GetHashCode();
                if (this.SharedData != null)
                    hashCode = hashCode * 59 + this.SharedData.GetHashCode();
                if (this.SuspendedActivityId != null)
                    hashCode = hashCode * 59 + this.SuspendedActivityId.GetHashCode();
                if (this.ActivityDetails != null)
                    hashCode = hashCode * 59 + this.ActivityDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
