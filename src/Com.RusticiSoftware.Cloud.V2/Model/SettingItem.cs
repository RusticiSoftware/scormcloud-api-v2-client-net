/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// SettingItem
    /// </summary>
    [DataContract]
    public partial class SettingItem :  IEquatable<SettingItem>, IValidatableObject
    {
        /// <summary>
        /// The source of this effective value, default, fallback, or the level the value was set at.
        /// </summary>
        /// <value>The source of this effective value, default, fallback, or the level the value was set at.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EffectiveValueSourceEnum
        {
            
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,
            
            /// <summary>
            /// Enum Application for value: application
            /// </summary>
            [EnumMember(Value = "application")]
            Application = 2,
            
            /// <summary>
            /// Enum LearningStandardForApplication for value: learningStandardForApplication
            /// </summary>
            [EnumMember(Value = "learningStandardForApplication")]
            LearningStandardForApplication = 3,
            
            /// <summary>
            /// Enum DispatchDestination for value: dispatchDestination
            /// </summary>
            [EnumMember(Value = "dispatchDestination")]
            DispatchDestination = 4,
            
            /// <summary>
            /// Enum Course for value: course
            /// </summary>
            [EnumMember(Value = "course")]
            Course = 5,
            
            /// <summary>
            /// Enum Dispatch for value: dispatch
            /// </summary>
            [EnumMember(Value = "dispatch")]
            Dispatch = 6,
            
            /// <summary>
            /// Enum Registration for value: registration
            /// </summary>
            [EnumMember(Value = "registration")]
            Registration = 7
        }

        /// <summary>
        /// The source of this effective value, default, fallback, or the level the value was set at.
        /// </summary>
        /// <value>The source of this effective value, default, fallback, or the level the value was set at.</value>
        [DataMember(Name="effectiveValueSource", EmitDefaultValue=false)]
        public EffectiveValueSourceEnum? EffectiveValueSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="effectiveValue">The value of this setting that would be used if read at this level, including defaults, fallback, and values set at less specific levels..</param>
        /// <param name="effectiveValueSource">The source of this effective value, default, fallback, or the level the value was set at..</param>
        /// <param name="explicitValue">The value of this setting that is explicitly set at this level. If not present, the setting is not specified at this level..</param>
        /// <param name="metadata">metadata.</param>
        public SettingItem(string id = default(string), string effectiveValue = default(string), EffectiveValueSourceEnum? effectiveValueSource = default(EffectiveValueSourceEnum?), string explicitValue = default(string), SettingMetadata metadata = default(SettingMetadata))
        {
            this.Id = id;
            this.EffectiveValue = effectiveValue;
            this.EffectiveValueSource = effectiveValueSource;
            this.ExplicitValue = explicitValue;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The value of this setting that would be used if read at this level, including defaults, fallback, and values set at less specific levels.
        /// </summary>
        /// <value>The value of this setting that would be used if read at this level, including defaults, fallback, and values set at less specific levels.</value>
        [DataMember(Name="effectiveValue", EmitDefaultValue=false)]
        public string EffectiveValue { get; set; }


        /// <summary>
        /// The value of this setting that is explicitly set at this level. If not present, the setting is not specified at this level.
        /// </summary>
        /// <value>The value of this setting that is explicitly set at this level. If not present, the setting is not specified at this level.</value>
        [DataMember(Name="explicitValue", EmitDefaultValue=false)]
        public string ExplicitValue { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public SettingMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettingItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EffectiveValue: ").Append(EffectiveValue).Append("\n");
            sb.Append("  EffectiveValueSource: ").Append(EffectiveValueSource).Append("\n");
            sb.Append("  ExplicitValue: ").Append(ExplicitValue).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettingItem);
        }

        /// <summary>
        /// Returns true if SettingItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SettingItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettingItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EffectiveValue == input.EffectiveValue ||
                    (this.EffectiveValue != null &&
                    this.EffectiveValue.Equals(input.EffectiveValue))
                ) && 
                (
                    this.EffectiveValueSource == input.EffectiveValueSource ||
                    (this.EffectiveValueSource != null &&
                    this.EffectiveValueSource.Equals(input.EffectiveValueSource))
                ) && 
                (
                    this.ExplicitValue == input.ExplicitValue ||
                    (this.ExplicitValue != null &&
                    this.ExplicitValue.Equals(input.ExplicitValue))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EffectiveValue != null)
                    hashCode = hashCode * 59 + this.EffectiveValue.GetHashCode();
                if (this.EffectiveValueSource != null)
                    hashCode = hashCode * 59 + this.EffectiveValueSource.GetHashCode();
                if (this.ExplicitValue != null)
                    hashCode = hashCode * 59 + this.ExplicitValue.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
