/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Com.RusticiSoftware.Cloud.V2.Client.SwaggerDateConverter;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// XapiStatementPipeSchema
    /// </summary>
    [DataContract]
    public partial class XapiStatementPipeSchema :  IEquatable<XapiStatementPipeSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiStatementPipeSchema" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="lastForwardedStatementDate">lastForwardedStatementDate.</param>
        /// <param name="moreUrl">moreUrl.</param>
        /// <param name="attempts">attempts.</param>
        /// <param name="visibleAfter">visibleAfter.</param>
        /// <param name="source">source.</param>
        /// <param name="target">target.</param>
        public XapiStatementPipeSchema(string id = default(string), string lastForwardedStatementDate = default(string), string moreUrl = default(string), int? attempts = default(int?), string visibleAfter = default(string), XapiEndpointSchema source = default(XapiEndpointSchema), XapiEndpointSchema target = default(XapiEndpointSchema))
        {
            this.Id = id;
            this.LastForwardedStatementDate = lastForwardedStatementDate;
            this.MoreUrl = moreUrl;
            this.Attempts = attempts;
            this.VisibleAfter = visibleAfter;
            this.Source = source;
            this.Target = target;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastForwardedStatementDate
        /// </summary>
        [DataMember(Name="lastForwardedStatementDate", EmitDefaultValue=false)]
        public string LastForwardedStatementDate { get; set; }

        /// <summary>
        /// Gets or Sets MoreUrl
        /// </summary>
        [DataMember(Name="moreUrl", EmitDefaultValue=false)]
        public string MoreUrl { get; set; }

        /// <summary>
        /// Gets or Sets Attempts
        /// </summary>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int? Attempts { get; set; }

        /// <summary>
        /// Gets or Sets VisibleAfter
        /// </summary>
        [DataMember(Name="visibleAfter", EmitDefaultValue=false)]
        public string VisibleAfter { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public XapiEndpointSchema Source { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public XapiEndpointSchema Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiStatementPipeSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastForwardedStatementDate: ").Append(LastForwardedStatementDate).Append("\n");
            sb.Append("  MoreUrl: ").Append(MoreUrl).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  VisibleAfter: ").Append(VisibleAfter).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XapiStatementPipeSchema);
        }

        /// <summary>
        /// Returns true if XapiStatementPipeSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of XapiStatementPipeSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiStatementPipeSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastForwardedStatementDate == input.LastForwardedStatementDate ||
                    (this.LastForwardedStatementDate != null &&
                    this.LastForwardedStatementDate.Equals(input.LastForwardedStatementDate))
                ) && 
                (
                    this.MoreUrl == input.MoreUrl ||
                    (this.MoreUrl != null &&
                    this.MoreUrl.Equals(input.MoreUrl))
                ) && 
                (
                    this.Attempts == input.Attempts ||
                    (this.Attempts != null &&
                    this.Attempts.Equals(input.Attempts))
                ) && 
                (
                    this.VisibleAfter == input.VisibleAfter ||
                    (this.VisibleAfter != null &&
                    this.VisibleAfter.Equals(input.VisibleAfter))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastForwardedStatementDate != null)
                    hashCode = hashCode * 59 + this.LastForwardedStatementDate.GetHashCode();
                if (this.MoreUrl != null)
                    hashCode = hashCode * 59 + this.MoreUrl.GetHashCode();
                if (this.Attempts != null)
                    hashCode = hashCode * 59 + this.Attempts.GetHashCode();
                if (this.VisibleAfter != null)
                    hashCode = hashCode * 59 + this.VisibleAfter.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
