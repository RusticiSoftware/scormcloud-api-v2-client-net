/* 
 * SCORM Cloud Rest API
 *
 * REST API used for SCORM Cloud integrations.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Com.RusticiSoftware.Cloud.V2.Model
{
    /// <summary>
    /// XapiStatementPipeSchema
    /// </summary>
    [DataContract]
    public partial class XapiStatementPipeSchema :  IEquatable<XapiStatementPipeSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XapiStatementPipeSchema" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="LastForwardedStatementDate">LastForwardedStatementDate.</param>
        /// <param name="MoreUrl">MoreUrl.</param>
        /// <param name="Attempts">Attempts.</param>
        /// <param name="VisibleAfter">VisibleAfter.</param>
        /// <param name="Source">Source.</param>
        /// <param name="Target">Target.</param>
        public XapiStatementPipeSchema(string Id = default(string), string LastForwardedStatementDate = default(string), string MoreUrl = default(string), int? Attempts = default(int?), string VisibleAfter = default(string), XapiEndpointSchema Source = default(XapiEndpointSchema), XapiEndpointSchema Target = default(XapiEndpointSchema))
        {
            this.Id = Id;
            this.LastForwardedStatementDate = LastForwardedStatementDate;
            this.MoreUrl = MoreUrl;
            this.Attempts = Attempts;
            this.VisibleAfter = VisibleAfter;
            this.Source = Source;
            this.Target = Target;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets LastForwardedStatementDate
        /// </summary>
        [DataMember(Name="lastForwardedStatementDate", EmitDefaultValue=false)]
        public string LastForwardedStatementDate { get; set; }
        /// <summary>
        /// Gets or Sets MoreUrl
        /// </summary>
        [DataMember(Name="moreUrl", EmitDefaultValue=false)]
        public string MoreUrl { get; set; }
        /// <summary>
        /// Gets or Sets Attempts
        /// </summary>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int? Attempts { get; set; }
        /// <summary>
        /// Gets or Sets VisibleAfter
        /// </summary>
        [DataMember(Name="visibleAfter", EmitDefaultValue=false)]
        public string VisibleAfter { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public XapiEndpointSchema Source { get; set; }
        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public XapiEndpointSchema Target { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XapiStatementPipeSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastForwardedStatementDate: ").Append(LastForwardedStatementDate).Append("\n");
            sb.Append("  MoreUrl: ").Append(MoreUrl).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  VisibleAfter: ").Append(VisibleAfter).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as XapiStatementPipeSchema);
        }

        /// <summary>
        /// Returns true if XapiStatementPipeSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of XapiStatementPipeSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XapiStatementPipeSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LastForwardedStatementDate == other.LastForwardedStatementDate ||
                    this.LastForwardedStatementDate != null &&
                    this.LastForwardedStatementDate.Equals(other.LastForwardedStatementDate)
                ) && 
                (
                    this.MoreUrl == other.MoreUrl ||
                    this.MoreUrl != null &&
                    this.MoreUrl.Equals(other.MoreUrl)
                ) && 
                (
                    this.Attempts == other.Attempts ||
                    this.Attempts != null &&
                    this.Attempts.Equals(other.Attempts)
                ) && 
                (
                    this.VisibleAfter == other.VisibleAfter ||
                    this.VisibleAfter != null &&
                    this.VisibleAfter.Equals(other.VisibleAfter)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LastForwardedStatementDate != null)
                    hash = hash * 59 + this.LastForwardedStatementDate.GetHashCode();
                if (this.MoreUrl != null)
                    hash = hash * 59 + this.MoreUrl.GetHashCode();
                if (this.Attempts != null)
                    hash = hash * 59 + this.Attempts.GetHashCode();
                if (this.VisibleAfter != null)
                    hash = hash * 59 + this.VisibleAfter.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
